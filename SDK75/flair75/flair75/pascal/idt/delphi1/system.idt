000 Name=?
003 Name=@__SystemInit$qv Pascal=0 Comment=Initialize run-time library
004 Name=@RunError$q4Byte Pascal=0 Comment=RunError(errcode: Byte{AX})
005 Name=@Halt$q4Word Pascal=0 Comment=Halt(exitcode: Word{AX})
006 Name=@$basg$qm3Anyt14Word Comment=Bitcopy of any type variable
007 Name=@$brmul$q7Longintt1 Pascal=0 Comment=X1{DX:AX}*=X2{BX:CX}
008 Name=@$brdiv$q7Longintt1 Pascal=0 \
	Comment=X1{DX:AX}/=X2{BX:CX}\nX2=X1%X2
009 Name=@$brrsh$q7Longint7Integer Pascal=0 Comment=X1{DX:AX}>>=N{CX}
010 Name=@$brlsh$q7Longint7Integer Pascal=0 Comment=X1{DX:AX}<<=N{CX}
011 Name=@$brmul$q7Longint7Longint Pascal=0 \
	Comment=X1{DX:AX}*=X2{BX:CX}\nWith overflow check
012 Name=@__Overflow$qv Pascal=0 Comment=Overflow error
013 Name=@$basg$qm6Stringt1 Args=8 Drops=4 Comment=Load string
014 Name=@$basg$qm6Stringt14Byte Pascal=10 Comment=Store string
015 Name=@__RangeError$qv Pascal=0 Comment=Range error
016 Name=@Copy$qm6Stringt17Integert3 Args=12 Drops=8 \
	Comment=Copy(s: String, index: Integer, count: Integer): String
017 Name=@Concat$qm6Stringt1 Args=8 Drops=4 \
	Comment=Concat(dst, src: String): String
018 Name=@Pos$qm6Stringt1 Pascal=8 \
	Comment=Pos(substr: String, s: String): Byte{AX}
019 Name=@$bsub$qm6Stringt1 Pascal=8 \
	Comment=Compare two strings\nZF - src=dst\nCF - src<dst
020 Name=@$basg$qm6String4Char Args=6 Drops=2 Comment=Str:=Char
021 Name=@$basg$qm6Stringn4Char4Byte Args=10 Drops=6 \
	Comment=Str:=Array of Char
022 Name=@Insert$qm6Stringt14Word7Integer Pascal=12 \
	Comment=Insert(source,dst: String;{dstlen: Word} index: Integer)
023 Name=@Delete$qm6String7Integert2 Pascal=8 \
	Comment=Delete(var s: String; index: Integer; count: Integer)
024 Name=@Set@$bctr$qn4Byte4Word Args=10 Drops=6 Comment=Load Set
025 Name=@Set@$bctr$qm3Set4Word Pascal=10 Comment=Store Set
026 Name=@Set@GetElemOffset$q4Wordt1 Pascal=0 \
	Comment=Compute Set offset and bitmask\nAL - Element number\nAH - mask\nDX - Set params
027 Name=@Trunc$q8Extended Pascal=0 \
	Comment=Trunc(x: Extended{st(0)}): Longint{DX:AX}
028 Name=@Round$q8Extended Pascal=0 \
	Comment=Round(x: Extended{st(0)}): Longint{DX:AX}
029 Name=@Int$q8Extended Pascal=0 Comment=Int(x: Extended): Extended
030 Name=@Sqrt$q8Extended Pascal=0 Comment=Sqrt(x: Extended): Extended
031 Name=@Sin$q8Extended Pascal=0 Comment=Sin(x: Extended): Extended
032 Name=@Cos$q8Extended Pascal=0 Comment=Cos(x: Extended): Extended
033 Name=@ArcTan$q8Extended Pascal=0 Comment=Arc(x: Extended): Extended
034 Name=@Ln$q8Extended Pascal=0 Comment=Ln(x: Extended): Extended
035 Name=@Exp$q8Extended Pascal=0 Comment=Exp(x: Extended): Extended
036 Name=@GetMem$q4Word Pascal=2 \
	Comment=GetMem(var p: Pointer{DX:AX}; size: Word)
037 Name=@FreeMem$qm7Pointer4Word Pascal=6 \
	Comment=FreeMem(var p: Pointer; size: Word)
038 Name=@Mark$qm7Pointer Pascal=4 Comment=Mark(var p: Pointer)
039 Name=@Release$qm7Pointer Pascal=4 Comment=Release(var p: Pointer)
040 Name=@MemAvail$qv Pascal=0 Comment=MemAvail: Longint{DX:AX}
041 Name=@MaxAvail$qv Pascal=0 Comment=MaxAvail: Longint{DX:AX}
042 Name=@$basg$qm3Set4Word Args=6 Drops=2 Comment=Load word sized set
043 Name=@Set@$brplu$q4Byte Args=6 Drops=2 Comment=Add Set component
044 Name=@Set@$brplu$q4Bytet1 Args=8 Drops=4 Comment=Add Set range
045 Name=@$brplu$qm3Sett1 Args=8 Drops=4 Comment=Set union
046 Name=@$brmin$qm3Sett1 Args=8 Drops=4 Comment=Set difference
047 Name=@$brmul$qm3Sett1 Args=8 Drops=4 Comment=Set intersection
048 Name=@$beql$qm3Sett1 Pascal=8 Comment=Set equality test\nZF if s1=s2
049 Name=@$bgeq$qm3Sett1 Pascal=8 Comment=Set relation test\nZF if s1>=s2
050 Name=@ParamCount$qv Pascal=0 Comment=ParamCount: Word{AX}
051 Name=@IOResult$qv Pascal=0 Comment=IOResult: Word{AX}
052 Name=@__IOCheck$qv Pascal=0 Comment=Exit if error
053 Name=@__RangeCheck$q7Longintpa2$7Longint Pascal=0 \
	Comment=Range check (DX:AX, CS:DI)
054 Name=@__StackCheck$q4Word Pascal=0 Comment=Stack overflow check (AX)
055 Name=@Write$qm4Text8Extended4Wordt3 Args=8 Drops=4 \
	Comment=Write(var f; v: Extended{st(0); width, decimals: Word)
056 Name=@Write$qm4Textm6String4Word Args=10 Drops=6 \
	Comment=Write(var f; s: String; width: Word)
057 Name=@Write$qm4Text7Longint4Word Args=10 Drops=6 \
	Comment=Write(var f; v: Longint; width: Word)
058 Name=@Write$qm4Text7Boolean4Word Args=8 Drops=4 \
	Comment=Write(var f;b: Boolean; width: Word)
059 Name=@Write$qm4Text4Char4Word Args=8 Drops=4 \
	Comment=Write(var f; c: Char; width: Word)
060 Name=@WriteLn$qm4Text Pascal=4 Comment=WriteLn(var f: Text)
061 Name=@Write$qm4Text Pascal=4 Comment=Write(var f: Text)
062 Name=@Write$qm4Filem3Any Args=8 Drops=4 \
	Comment=Write(var f: File{; buf: PByte})
063 Name=@Read$qm4Text8Extended Args=4 \
	Comment=Read(var f; var v:Extended{st(0)})
064 Name=@Read$qm4Textm6String4Word Args=10 Drops=6 \
	Comment=Read(var f; var s: String; width: Word)
065 Name=@Read$qm4Text7Longint Args=4 \
	Comment=Read(var f; var v: Longint{DX:AX})
066 Name=@Read$qm4Text4Char Args=4 Comment=Read(var f; var c: Char{AL})
067 Name=@ReadLn$qm4Text Pascal=4 Comment=ReadLn(var f: Text)
068 Name=@Write$qm4Text Pascal=4 Comment=Write(var f: Text)
069 Name=@Read$qm4Filem3Any Args=8 Drops=4 \
	Comment=Read(var f: File{; buf: PByte})
070 Name=@Randomize$qv Pascal=0 Comment=Randomize
071 Name=@Assign$qm4Textm6String Pascal=8 \
	Comment=Assign(var f: Text; name: String)
072 Name=@Reset$qm4Text Pascal=4 Comment=Reset(var f: Text)
073 Name=@Rewrite$qm4Text Pascal=4 Comment=Rewrite(var f: Text)
074 Name=@Close$qm4Text Pascal=4 Comment=Close(var f: Text)
075 Name=@Assign$qm4Filem6String Pascal=8 \
	Comment=Assign(var f: File; name: String)
076 Name=@Reset$qm4File4Word Pascal=6 Comment=Reset(var f: File; recsize: Word)
077 Name=@Rewrite$qm4File4Word Pascal=6 \
	Comment=Rewrite(var f: File; recsize: Word)
078 Name=@Close$qm4File Pascal=4 Comment=Close(var f: File)
079 Name=@Erase$qm4File Pascal=4 Comment=Erase(var f)
080 Name=@Rename$qm4Filem6String Pascal=8 Comment=Rename(var f; newname: String)
081 Name=@SeekEoln$qm4Text Pascal=4 Comment=SeekEoln(var f: Text): Boolean{AL}
082 Name=@SeekEof$qm4Text Pascal=4 Comment=SeekEof(var f: Text): Boolean{AL}
083 Name=@Eoln$qm4Text Pascal=4 Comment=Eoln(var f: Text): Boolean{AL}
084 Name=@Eof$qm4Text Pascal=4 Comment=Eof(var f: Text): Boolean{AL}
085 Name=@BlockRead$qm4Filem3Any4Wordm4Word Pascal=14 \
	Comment=BlockRead(var f: File; var buf; count: Word;var result: Word)
086 Name=@BlockWrite$qm4Filem3Any4Wordm4Word Pascal=14 \
	Comment=BlockWrite(var f: File; var buf; count: Word;var result: Word)
087 Name=@Seek$qm4File7Longint Pascal=8 Comment=Seek(var f; n: Longint)
088 Name=@FilePos$qm4File Pascal=4 Comment=FilePos(var f): Longint{DX:AX}
089 Name=@FileSize$qm4File Pascal=4 Comment=FileSize(var f): Longint{DX:AX}
090 Name=@Eof$qm4File Pascal=4 Comment=Eof(var f: File): Boolean{AL}
091 Name=@Frac$q8Extended Pascal=0 Comment=Frac(x: Extended): Extended
092 Name=@UpCase$q4Char Pascal=2 Comment=UpCase(ch: Char): Char{AL}
093 Name=@Truncate$qm4File Pascal=4 Comment=Truncate(var f)
094 Name=@FillChar$qm3Any4Word4Byte Pascal=8 \
	Comment=FillChar(var x; count: Word; value: Byte)
095 Name=@Random$q4Word Pascal=2 Comment=Random(range: Word): Word{AX}
096 Name=@Random__Extended$qv Pascal=0 Comment=Random: Extended{st(0)}
097 Name=@ParamStr$qm6String4Word Args=6 Drops=4 Comment=ParamStr(index): String
098 Name=@Move$qm3Anyt14Word Pascal=10 \
	Comment=Move(var source, dest; count: Word)
099 Name=@Str$q7Longint4Wordm6String4Byte Pascal=12 \
	Comment=Str(x:width; var s: string {; strlen: Word})
100 Name=@Val__Longint$qm6Stringm7Integer Pascal=8 \
	Comment=Val(s: String; v: Longint{DX:AX}; var code: Integer)
101 Name=@Str$q8Extended4Wordt2m6String4Word Pascal=10 \
	Comment=Str(x{st(0)}:width:decimals; var s: string {; strlen: Word})
102 Name=@Val__Extended$qm6Stringm7Integer Pascal=8 \
	Comment=Val(s: String; v: Extended{st(0)}; var code: Integer)
103 Name=@GetDir$q4Bytem6String4Word Pascal=8 \
	Comment=GetDir(d: Byte, var s: String{; strlen: Word})
104 Name=@ChDir$qm6String Pascal=4 Comment=ChDir(s: String)
105 Name=@MkDir$qm6String Pascal=4 Comment=MkDir(s: String)
106 Name=@RmDir$qm6String Pascal=4 Comment=RmDir(s: String)
107 Name=@Append$qm4Text Pascal=4 Comment=Append(var f: Text)
108 Name=@Flush$qm4Text Pascal=4 Comment=Flush(var f: Text)
109 Name=@SetTextBuf$qm4Textm3Any4Word Pascal=10 \
	Comment=SetTextBuf(var f: Text; var buf; size: Word)
110 Name=@Extended$q4Real Pascal=0 Comment=Convert Real to Extended
111 Name=@Real$q8Extended Pascal=0 Comment=Convert Extended to Real
112 Name=@$brplu$q4Realt1 Pascal=0 Comment=Real(AX:BX:DX)+=Real(CX:SI:DI)
113 Name=@$brmin$q4Realt1 Pascal=0 Comment=Real(AX:BX:DX)-=Real(CX:SI:DI)
114 Name=@$brmul$q4Realt1 Pascal=0 Comment=Real(AX:BX:DX)*=Real(CX:SI:DI)
115 Name=@$brdiv$q4Realt1 Pascal=0 \
	Comment=Real(AX:BX:DX)/=Real(CX:SI:DI)\nReal(CX:SI:DI)=Real(AX:BX:DX)%Real(CX:SI:DI)
116 Name=@__Cmp$q4Realt1 Pascal=0 Comment=Compare two reals
117 Name=@Real$q7Longint Pascal=0 Comment=Real(x: Longint{DX:AX}): Real
118 Name=@Trunc$q4Real Pascal=0 Comment=Trunc(x: Real): Longint{DX:AX}
119 Name=@Round$q4Real Pascal=0 Comment=Round(x: Real): Longint
120 Name=@Sqr$q4Real Pascal=0 Comment=Sqr(x: Real): Real
121 Name=@Write$qm4Text4Real4Wordt3 Args=14 Drops=10 \
	Comment=Write(var f; v: Real; width, decimals: Word)
122 Name=@Read$qm4Text4Real Args=4 Comment=Read(var f; var v: Real{DX:BX:AX})
123 Name=@Str$q4Real4Wordt2m6String4Word Pascal=16 \
	Comment=Str(x:width:decimals; var s: string {; strlen: Word})
124 Name=@Val__Real$qm6Stringm7Integer Pascal=8 \
	Comment=Val(s: String; v: Real{DX:BX:AX}; var code: Integer)
125 Name=@Int$q4Real Pascal=0 Comment=Int(x: Real): Real
126 Name=@Frac$q4Real Pascal=0 Comment=Frac(x: Real): Real
127 Name=@Sqrt$q4Real Pascal=0 Comment=Sqrt(x: Real): Real
128 Name=@Cos$q4Real Pascal=0 Comment=Cos(x: Real): Real
129 Name=@Sin$q4Real Pascal=0 Comment=Sin(x: Real): Real
130 Name=@Ln$q4Real Pascal=0 Comment=Ln(x: Real): Real
131 Name=@Exp$q4Real Pascal=0 Comment=Exp(x: Real): Real
132 Name=@ArcTan$q4Real Pascal=0 Comment=ArcTan(x: Real): Real
133 Name=@Random__Real$qv Pascal=0 Comment=Random: Real
134 Name=@__InitEM86$qv Pascal=0 Comment=Initialize software emulator
135 Name=@__InitEM87$qv Pascal=0 Comment=Initialize hardware emulator
136 Name=@Object@$bctr$q4Word Pascal=0 Comment=Constructor routine (DI)
137 Name=@Object@$bdtr$q4Word Pascal=0 Comment=Destructor routine (DI)
138 Name=@Object@$basg$qm6Object4Word Pascal=10 Comment=Copy Object
139 Name=@__MethodCheck$q7Pointer Pascal=0 Comment=Check method table (DS:DI)
140 Name=@__FindMethod$q4Word7Pointer Pascal=0 \
	Comment=Find dynamic method (AX-idx,DI-VMT)
141 Name=@__CallMethod$q4Word7Pointer Pascal=0 \
	Comment=Call dynamic method (AX-idx,DI-VMT)
142 Name=@Read$qm4Text5PChar4Word Args=10 Drops=6 \
	Comment=Read(var f: Text; str: PChar{; len: Word})
143 Name=@Write$qm4Text5PChar4Word Args=10 Drops=6 \
	Comment=Write(var f: Text; str: PChar; width: Word)
144 Name=@Assign$qm4Text5PChar Pascal=8 \
	Comment=Assign(var f: Text; name: PChar)
145 Name=@Assign$qm4File5PChar Pascal=8 \
	Comment=Assign(var f: File; name: PChar)
146 Name=@Rename$qm4File5PChar Pascal=8 Comment=Rename(var f; newname: String)
147 Name=@Str$q7Longint4Word5PChar4Word Pascal=12 \
	Comment=Str(v: Longint; width: Word; s: PChar; len: Word)
148 Name=@Val__Longint$q5PCharm7Integer Pascal=8 \
	Comment=Val(s: PChar;var v: Longint{DX:AX};var code: Integer)
149 Name=@Str$q8Extended4Wordt25PChar4Word Pascal=10 \
	Comment=Str(v: Extended{st(0)}; width,decimals: Word; s: PChar; len: Word)
150 Name=@Val__Extended$q5PCharm7Integer Pascal=8 \
	Comment=Val(s: PChar;var v: Extended{st(0)};var code: Integer)
151 Name=@Str$q4Real4Wordt25PChar4Word Pascal=16 \
	Comment=Str(v: Real; width,decimals: Word; s: PChar; len: Word)
152 Name=@Val__Real$q5PCharm7Integer Pascal=8 \
	Comment=Val(s: PChar;var v: Real{DX:BX:AX};var code: Integer)
153 Name=@__LibEntry$qv Pascal=0 Comment=Library entry code
154 Name=@__LibExit$qv Pascal=0 Comment=Library exit code
155 Name=WEP Pascal=2 Comment=Library exit procedure
156 Name=INITTASK
157 Name=__ClassCtr Pascal=0 Comment=Class constructor support
158 Name=__ClassDtr Pascal=0 Comment=Class destructor support
159 Name=__RaiseExcept Pascal=0 Comment=Raise exception
160 Name=__RaiseAgain Pascal=0 Comment=Re-raise exception
161 Name=__DoneExcept Pascal=0 Comment=Exception handler cleanup

;162-191 Have names in unit

192 Name=__IsOperator Pascal=8 Comment=IS operator
193 Name=__AsOperator Pascal=8 Comment=AS operator
194 Name=__CallDynaInst Pascal=0 Comment=Call dynamic instance method
195 Name=__CallDynaClass Pascal=0 Comment=Call dynamic class method
196 Name=__FindDynaInst Pascal=0 Comment=Find dynamic instance method
197 Name=__FindDynaClass Pascal=0 Comment=Find dynamic class method
;198-199 Have names in unit
200 Name=__TryStatExit Pascal=0 Comment=Exit from TRY statement
;201 Have name in unit
;202-218 External functions

; Private routines
219 Name=__DoExitProcs Pascal=0 Comment=Execute exit procedures
222 Name=__Terminate Pascal=0 \
	Comment=__Terminate( error: Word{AX}, ptr: Pointer{BX:CX} )
220 Name=InitExceptHook Pascal=0 Comment=Initialize exception hook
224 Name=__NewMemory Pascal=0 \
	Comment=__NewMemory(var p: Pointer{DX:AX}; size: Word{AX})
225 Name=__DisMemory Pascal=0 \
	Comment=__DisMemory(p: Pointer{ES:CX}; size: Word{AX})
226 Name=__Str2Int Pascal=0
227 Name=__Str2Float Pascal=0
228 Name=__Float2Str Pascal=0
229 Name=__FileOpen Pascal=4 \
	Comment=__FileOpen(var f: Text)
230 Name=__FileRead Pascal=4 \
	Comment==__FileRead(var f: Text)
231 Name=__FileWrDev Pascal=4 \
	Comment=__FileWrDev(var f: Text)
232 Name=__FileWrite Pascal=4 \
	Comment=__FileWrite(var f: Text)
233 Name=__FileClose Pascal=4 \
	Comment=__FileClose(var f: Text)
234 Name=__InOutProc Pascal=0 \
	Comment=__InOutProc(var f: Text{ES:BX})
235 Name=__WriteBlanks Pascal=0 \
	Comment=__WriteBlanks(var f: Text{ES:BX}; len: Word{DX})
236 Name=__WriteBuffer Pascal=0 \
	Comment=__WriteBuffer(var f: Text{ES:BX}; buf: PChar{DX:SI}; len: Word{AX})
237 Name=__ReadText Pascal=0 \
	Comment=__ReadText(var f: Text{ES:BX; func: CS:AX; DX->DS;})
238 Name=__Int2Str Pascal=0
239 Name=__Str2Real Pascal=0
240 Name=__Real2Str Pascal=0
241 Name=__Exception Pascal=0 Comment=Floating point exception handler
242 Name=__F87_SINE
243 Name=__F87_COSINE
244 Name=__F87_ARCTAN
245 Name=__F87_LOG
246 Name=__F87_EXP
247 Name=__F87_LOG2
248 Name=__F87_LOG10
249 Name=__F87_TANGENT
250 Name=__F87_EXP10
251 Name=__F87_EXP2
252 Name=__CheckDerivedInstance Pascal=0
253 Name=__RealAdd Pascal=0
254 Name=__RealSub Pascal=0
255 Name=__RealCmp Pascal=0
256 Name=__RealTrunc Pascal=0
257 Name=__RealMul Pascal=0
258 Name=__RealDiv Pascal=0
259 Name=__RealFloat Pascal=0
