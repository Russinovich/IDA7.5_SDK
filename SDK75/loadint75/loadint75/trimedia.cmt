TRIMEDIA_igtri:         "signed compare greater with immediate"
TRIMEDIA_igeqi:         "signed compare greater or equal with immediate"
TRIMEDIA_ilesi:         "signed compare less with immediate"
TRIMEDIA_ineqi:         "signed compare not equal with immediate"
TRIMEDIA_ieqli:         "signed compare equal with immediate"
TRIMEDIA_iaddi:         "add with immediate"
TRIMEDIA_ild16d:        "signed 16-bit load with displacement"
TRIMEDIA_ld32d:         "32-bit load with displacement"
TRIMEDIA_uld8d:         "unsigned 8-bit load with displacement"
TRIMEDIA_lsri:          "logical shift right immediate"
TRIMEDIA_asri:          "arithmetic shift right immediate"
TRIMEDIA_asli:          "arithmetic shift left immediate"
TRIMEDIA_iadd:          "signed add"
TRIMEDIA_isub:          "signed subtract"
TRIMEDIA_igeq:          "signed compare greater or equal"
TRIMEDIA_igtr:          "signed compare greater"
TRIMEDIA_bitand:        "bitwise logical AND"
TRIMEDIA_bitor:         "bitwise logical OR"
TRIMEDIA_asr:           "arithmetic shift right"
TRIMEDIA_asl:           "arithmetic shift left"
TRIMEDIA_ifloat:        "convert signed integer to floating-point"
TRIMEDIA_ifixrz:        "convert floating-point to integer with round toward zero"
TRIMEDIA_fadd:          "floating-point add"
TRIMEDIA_imin:          "signed minimum"
TRIMEDIA_imax:          "signed maximum"
TRIMEDIA_iavgonep:      "signed average"
TRIMEDIA_ume8uu:        "sum of absolute values of unsigned 8-bit differences"
TRIMEDIA_imul:          "signed multiply"
TRIMEDIA_fmul:          "floating-point multiply"
TRIMEDIA_h_st8d:        "hardware 8-bit store with displacement"
TRIMEDIA_h_st16d:       "hardware 16-bit store with displacement"
TRIMEDIA_h_st32d:       "hardware 32-bit store with displacement"
TRIMEDIA_isubi:         "subtract with immediate"
TRIMEDIA_ugtr:          "unsigned compare greater"
TRIMEDIA_ugtri:         "unsigned compare greater with immediate"
TRIMEDIA_ugeq:          "unsigned compare greater or equal"
TRIMEDIA_ugeqi:         "unsigned compare greater or equal with immediate"
TRIMEDIA_ieql:          "signed compare equal"
TRIMEDIA_ueqli:         "unsigned compare equal with immediate"
TRIMEDIA_ineq:          "signed compare not equal"
TRIMEDIA_uneqi:         "unsigned compare not equal"
TRIMEDIA_ulesi:         "unsigned compare less with immediate"
TRIMEDIA_ileqi:         "signed compare less or equal with immediate"
TRIMEDIA_uleqi:         "unsigned compare less or equal with immediate"
TRIMEDIA_h_iabs:        "hardware absolute value"
TRIMEDIA_carry:         "compute carry bit from unsigned add"
TRIMEDIA_izero:         "if zero select zero"
TRIMEDIA_inonzero:      "if nonzero select zero"
TRIMEDIA_bitxor:        "bitwise logical exclusive OR"
TRIMEDIA_bitandinv:     "bitwise logical AND NOT"
TRIMEDIA_bitinv:        "bitwise logical NOT"
TRIMEDIA_sex16:         "sign extend 16 bits"
TRIMEDIA_packbytes:     "pack least-significant bytes"
TRIMEDIA_pack16lsb:     "pack least-significant 16-bit halfwords"
TRIMEDIA_pack16msb:     "pack most-significant 16-bit halfwords"
TRIMEDIA_ubytesel:      "select unsigned byte"
TRIMEDIA_ibytesel:      "signed select byte"
TRIMEDIA_mergelsb:      "merge least-significant byte"
TRIMEDIA_mergemsb:      "merge most-significant byte"
TRIMEDIA_ume8ii:        "unsigned sum of absolute values of signed 8-bit differences"
TRIMEDIA_h_dspiabs:     "clipped signed absolute value"
TRIMEDIA_dspiadd:       "clipped signed add"
TRIMEDIA_dspuadd:       "clipped unsigned add"
TRIMEDIA_dspisub:       "clipped signed subtract"
TRIMEDIA_dspusub:       "clipped unsigned subtract"
TRIMEDIA_dspidualadd:   "dual clipped add of signed 16-bit halfwords"
TRIMEDIA_dspidualsub:   "dual clipped subtract of signed 16-bit halfwords"
TRIMEDIA_h_dspidualabs: "dual clipped absolute value of signed 16-bit halfwords"
TRIMEDIA_quadavg:       "unsigned byte-wise quad average"
TRIMEDIA_iclipi:        "clip signed to signed"
TRIMEDIA_uclipi:        "clip signed to unsigned"
TRIMEDIA_uclipu:        "clip unsigned to unsigned"
TRIMEDIA_iflip:         "if non-zero negate"
TRIMEDIA_dspuquadaddui: "quad clipped add of unsigned/signed bytes"
TRIMEDIA_quadumin:      "unsigned byte-wise quad minimum"
TRIMEDIA_quadumax:      "unsigned byte-wise quad maximum"
TRIMEDIA_dualiclipi:    "dual-16 clip signed to signed"
TRIMEDIA_dualuclipi:    "dual-16 clip signed to unsigned"
TRIMEDIA_quadumulmsb:   "unsigned quad 8-bit multiply most significant"
TRIMEDIA_ufir8uu:       "unsigned sum of products of unsigned bytes"
TRIMEDIA_ifir8ui:       "signed sum of products of unsigned/signed bytes"
TRIMEDIA_ifir8ii:       "signed sum of products of signed bytes"
TRIMEDIA_ifir16:        "sum of products of signed 16-bit halfwords"
TRIMEDIA_ufir16:        "sum of products of unsigned 16-bit halfwords"
TRIMEDIA_dspidualmul:   "dual clipped multiply of signed 16-bit halfwords"
TRIMEDIA_lsr:           "logical shift right"
TRIMEDIA_rol:           "rotate left"
TRIMEDIA_roli:          "rotate left by immediate"
TRIMEDIA_funshift1:     "funnel-shift 1 byte"
TRIMEDIA_funshift2:     "funnel-shift 2 bytes"
TRIMEDIA_funshift3:     "funnel-shift 3 bytes"
TRIMEDIA_dualasr:       "dual-16 arithmetic shift right"
TRIMEDIA_mergedual16lsb:"merge dual 16-bit lsb bytes"
TRIMEDIA_fdiv:          "floating-point divide"
TRIMEDIA_fdivflags:     "IEEE status flags from floating-point divide"
TRIMEDIA_fsqrt:         "floating-point square root"
TRIMEDIA_fsqrtflags:    "IEEE status flags from floating-point square root"
TRIMEDIA_faddflags:     "IEEE status flags from floating-point add"
TRIMEDIA_fsub:          "floating-point subtract"
TRIMEDIA_fsubflags:     "IEEE status flags from floating-point subtract"
TRIMEDIA_fabsval:       "floating-point absolute value"
TRIMEDIA_fabsvalflags:  "IEEE status flags from floating-point absolute value"
TRIMEDIA_ifloatrz:      "convert signed integer to floating-point with rounding toward zero"
TRIMEDIA_ifloatrzflags: "IEEE status flags from convert signed integer to floating-point with rounding toward zero"
TRIMEDIA_ufloatrz:      "convert unsigned integer to floating-point with round toward zero"
TRIMEDIA_ufloatrzflags: "IEEE status flags from convert unsigned integer to floating-point with round toward zero"
TRIMEDIA_ifixieee:      "convert floating-point to integer using PCSW rounding mode"
TRIMEDIA_ifixieeeflags: "IEEE status flags from convert floating-point to integer using PCSW rounding mode"
TRIMEDIA_ufixieee:      "convert floating-point to unsigned integer using PCSW rounding mode"
TRIMEDIA_ufixieeeflags: "IEEE status flags from convert floating-point to unsigned integer using PCSW rounding mode"
TRIMEDIA_ufixrz:        "convert floating-point to unsigned integer with round toward zero"
TRIMEDIA_ufixrzflags:   "IEEE status flags from convert floating-point to unsigned integer with round toward zero"
TRIMEDIA_ufloat:        "convert unsigned integer to floating-point"
TRIMEDIA_ufloatflags:   "IEEE status flags from convert unsigned integer to floating-point"
TRIMEDIA_ifixrzflags:   "IEEE status flags from convert floating-point to integer with round toward zero"
TRIMEDIA_ifloatflags:   "IEEE status flags from convert signed integer to floating-point"
TRIMEDIA_umul:          "unsigned multiply"
TRIMEDIA_imulm:         "signed multiply: return most-significant 32 bits"
TRIMEDIA_umulm:         "unsigned multiply: return most-significant 32 bits"
TRIMEDIA_dspimul:       "clipped signed multiply"
TRIMEDIA_dspumul:       "clipped unsigned multiply"
TRIMEDIA_fmulflags:     "IEEE status flags from floating-point multiply"
TRIMEDIA_fgtr:          "floating-point compare greater"
TRIMEDIA_fgtrflags:     "IEEE status flags from floating-point compare greater"
TRIMEDIA_fgeq:          "floating-point compare greater or equal"
TRIMEDIA_fgeqflags:     "IEEE status flags from floating-point compare greater or equal"
TRIMEDIA_feql:          "floating-point compare equal"
TRIMEDIA_feqlflags:     "IEEE status flags from floating-point compare equal"
TRIMEDIA_fneq:          "floating-point compare not equal"
TRIMEDIA_fneqflags:     "IEEE status flags from floating-point compare not equal"
TRIMEDIA_fsign:         "sign of floating-point value"
TRIMEDIA_fsignflags:    "IEEE status flags from floating-point sign"
TRIMEDIA_cycles:        "read clock cycle counter: least-significant word"
TRIMEDIA_hicycles:      "read clock cycle counter: most-significant word"
TRIMEDIA_readdpc:       "read destination program counter"
TRIMEDIA_readspc:       "read source program counter"
TRIMEDIA_readpcsw:      "read program control and status word"
TRIMEDIA_writespc:      "write source program counter"
TRIMEDIA_writedpc:      "write destination program counter"
TRIMEDIA_writepcsw:     "write program control and status word"
TRIMEDIA_curcycles:     "read current clock cycle: least-significant word"
TRIMEDIA_jmpt:          "indirect jump on true"
TRIMEDIA_ijmpt:         "interruptible indirect jump on true"
TRIMEDIA_jmpi:          "jump immediate"
TRIMEDIA_ijmpi:         "interruptible jump immediate"
TRIMEDIA_jmpf:          "indirect jump on false"
TRIMEDIA_ijmpf:         "interruptible indirect jump on false"
TRIMEDIA_iclr:          "invalidate all instruction cache blocks"
TRIMEDIA_uimm:          "unsigned immediate"
TRIMEDIA_ild8d:         "signed 8-bit load with displacement"
TRIMEDIA_ild8r:         "signed 8-bit load with index"
TRIMEDIA_uld8r:         "unsigned 8-bit load with index"
TRIMEDIA_ild16r:        "signed 16-bit load with index"
TRIMEDIA_ild16x:        "signed 16-bit load with scaled index"
TRIMEDIA_uld16d:        "unsigned 16-bit load with displacement"
TRIMEDIA_uld16r:        "unsigned 16-bit load with index"
TRIMEDIA_uld16x:        "unsigned 16-bit load with scaled index"
TRIMEDIA_ld32r:         "32-bit load with index"
TRIMEDIA_ld32x:         "32-bit load with scaled index"
TRIMEDIA_rdtag:         "read data cache address tag"
TRIMEDIA_rdstatus:      "read data cache status bits"
TRIMEDIA_dcb:           "data cache copy back"
TRIMEDIA_dinvalid:      "invalidate data cache block"
TRIMEDIA_prefd:         "prefetch with displacement"
TRIMEDIA_prefr:         "prefetch with index"
TRIMEDIA_pref16x:       "prefetch with 16-bit scaled index"
TRIMEDIA_pref32x:       "prefetch with 32-bit scaled index"
TRIMEDIA_allocd:        "allocate a cache block with displacement"
TRIMEDIA_allocr:        "allocate a cache block with index"
TRIMEDIA_allocx:        "allocate a cache block with scaled index"

// Pseudo-operations

TRIMEDIA_alloc:         "allocate a cache block"
TRIMEDIA_dspiabs:       "clipped signed absolute value"
TRIMEDIA_dspidualabs:   "dual clipped absolute value of signed 16-bit halfwords"
TRIMEDIA_iabs:          "absolute value"
TRIMEDIA_ild16:         "signed 16-bit load"
TRIMEDIA_ild8:          "signed 8-bit load"
TRIMEDIA_ineg:          "signed negate"
TRIMEDIA_ld32:          "32-bit load"
TRIMEDIA_pref:          "prefetch"
TRIMEDIA_sex8:          "sign extend 8 bits"
TRIMEDIA_st16:          "16-bit store"
TRIMEDIA_st16d:         "16-bit store with displacement"
TRIMEDIA_st32:          "32-bit store"
TRIMEDIA_st32d:         "32-bit store with displacement"
TRIMEDIA_st8:           "8-bit store"
TRIMEDIA_st8d:          "8-bit store with displacement"
TRIMEDIA_uld16:         "unsigned 16-bit load"
TRIMEDIA_uld8:          "unsigned 8-bit load"
TRIMEDIA_zex16:         "zero extend 16 bits"
TRIMEDIA_zex8:          "zero extend 8 bits"
TRIMEDIA_ident:         "identity"

