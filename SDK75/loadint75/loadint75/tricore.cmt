TRICORE_abs:             "Absolute Value"
TRICORE_abs_b:           "Absolute Value Packed Byte"
TRICORE_abs_h:           "Absolute Value Packed Half-word"
TRICORE_absdif:          "Absolute Value of Difference"
TRICORE_absdif_b:        "Absolute Value of Difference Packed Byte"
TRICORE_absdif_h:        "Absolute Value of Difference Packed Half-word"
TRICORE_absdifs:         "Absolute Value of Difference with Saturation"
TRICORE_absdifs_h:       "Absolute Value of Difference Packed Half-word with Saturation"
TRICORE_abss:            "Absolute Value with Saturation"
TRICORE_abss_h:          "Absolute Value Packed Half-word with Saturation"
TRICORE_add_b:           "Add Packed Byte"
TRICORE_add_h:           "Add Packed Half-word"
TRICORE_add16:           "Add"
TRICORE_add16_a:         "Add Address"
TRICORE_add32:           "Add"
TRICORE_add32_a:         "Add Address"
TRICORE_addc:            "Add with Carry"
TRICORE_addi:            "Add Immediate"
TRICORE_addih:           "Add Immediate High"
TRICORE_addih_a:         "Add Immediate High to Address"
TRICORE_adds:            "Add Signed with Saturation"
TRICORE_adds_h:          "Add Signed Packed Half-word with Saturation"
TRICORE_adds_hu:         "Add Unsigned Packed Half-word with Saturation"
TRICORE_adds_u:          "Add Unsigned with Saturation"
TRICORE_adds16:          "Add Signed with Saturation"
TRICORE_addsc_at:        "Add Bit-Scaled Index to Address"
TRICORE_addsc16_a:       "Add Scaled Index to Address"
TRICORE_addsc32_a:       "Add Scaled Index to Address"
TRICORE_addx:            "Add Extended"
TRICORE_and_and_t:       "Accumulating Bit Logical AND-AND"
TRICORE_and_andn_t:      "Accumulating Bit Logical AND-AND-Not"
TRICORE_and_eq:          "Equal Accumulating"
TRICORE_and_ge:          "Greater Than or Equal Accumulating"
TRICORE_and_ge_u:        "Greater Than or Equal Accumulating Unsigned"
TRICORE_and_lt:          "Less Than Accumulating"
TRICORE_and_lt_u:        "Less Than Accumulating Unsigned"
TRICORE_and_ne:          "Not Equal Accumulating"
TRICORE_and_nor_t:       "Accumulating Bit Logical AND-NOR"
TRICORE_and_or_t:        "Accumulating Bit Logical AND-OR"
TRICORE_and_t:           "Bit Logical AND"
TRICORE_and16:           "Bitwise AND"
TRICORE_and32:           "Bitwise AND"
TRICORE_andn:            "Bitwise AND-Not"
TRICORE_andn_t:          "Bit Logical AND-Not"
TRICORE_bisr16:          "Begin Interrupt Service Routine"
TRICORE_bisr32:          "Begin Interrupt Service Routine"
TRICORE_bmerge:          "Bit Merge"
TRICORE_bsplit:          "Bit Split"
TRICORE_cachea_i:        "Cache Address, Invalidate"
TRICORE_cachea_w:        "Cache Address, Writeback"
TRICORE_cachea_wi:       "Cache Address, Writeback and Invalidate"
TRICORE_cadd16:          "Conditional Add"
TRICORE_cadd32:          "Conditional Add"
TRICORE_caddn16:         "Conditional Add-Not"
TRICORE_caddn32:         "Conditional Add-Not"
TRICORE_call16:          "Call"
TRICORE_call32:          "Call"
TRICORE_calla:           "Call Absolute"
TRICORE_calli:           "Call Indirect"
TRICORE_clo:             "Count Leading Ones"
TRICORE_clo_h:           "Count Leading Ones in Packed Half-words"
TRICORE_cls:             "Count Leading Signs"
TRICORE_cls_h:           "Count Leading Signs in Packed Half-words"
TRICORE_clz:             "Count Leading Zeros"
TRICORE_clz_h:           "Count Leading Zeros in Packed Half-words"
TRICORE_cmov16:          "Conditional Move (16-bit)"
TRICORE_cmovn16:         "Conditional Move-Not (16-bit)"
TRICORE_csub:            "Conditional Subtract"
TRICORE_csubn:           "Conditional Subtract-Not"
TRICORE_debug16:         "Debug"
TRICORE_debug32:         "Debug"
TRICORE_dextr:           "Extract from Double Register"
TRICORE_disable:         "Disable Interrupts"
TRICORE_dsync:           "Synchronize Data"
TRICORE_dvadj:           "Divide-Adjust"
TRICORE_dvinit:          "Divide-Initialization Word"
TRICORE_dvinit_b:        "Divide-Initialization Byte"
TRICORE_dvinit_bu:       "Divide-Initialization Byte Unsigned"
TRICORE_dvinit_h:        "Divide-Initialization Half-word"
TRICORE_dvinit_hu:       "Divide-Initialization Half-word Unsigned"
TRICORE_dvinit_u:        "Divide-Initialization Word Unsigned"
TRICORE_dvstep:          "Divide-Step"
TRICORE_dvstep_u:        "Divide-Step Unsigned"
TRICORE_enable:          "Enable Interrupts"
TRICORE_eq_a:            "Equal to Address"
TRICORE_eq_b:            "Equal Packed Byte"
TRICORE_eq_h:            "Equal Packed Half-word"
TRICORE_eq_w:            "Equal Packed Word"
TRICORE_eq16:            "Equal"
TRICORE_eq32:            "Equal"
TRICORE_eqany_b:         "Equal Any Byte"
TRICORE_eqany_h:         "Equal Any Half-word"
TRICORE_eqz_a:           "Equal Zero Address"
TRICORE_extr:            "Extract Bit Field"
TRICORE_extr_u:          "Extract Bit Field Unsigned"
TRICORE_ge:              "Greater Than or Equal"
TRICORE_ge_a:            "Greater Than or Equal Address"
TRICORE_ge_u:            "Greater Than or Equal Unsigned"
TRICORE_imask:           "Insert Mask"
TRICORE_ins_t:           "Insert Bit"
TRICORE_insert:          "Insert Bit Field"
TRICORE_insn_t:          "Insert Bit-Not"
TRICORE_isync:           "Synchronize Instructions"
TRICORE_ixmax:           "Find Maximum Index"
TRICORE_ixmax_u:         "Find Maximum Index (unsigned)"
TRICORE_ixmin:           "Find Minimum Index"
TRICORE_ixmin_u:         "Find Minimum Index (unsigned)"
TRICORE_j16:             "Jump Unconditional"
TRICORE_j32:             "Jump Unconditional"
TRICORE_ja:              "Jump Unconditional Absolute"
TRICORE_jeq_a:           "Jump if Equal Address"
TRICORE_jeq16:           "Jump if Equal"
TRICORE_jeq32:           "Jump if Equal"
TRICORE_jge:             "Jump if Greater Than or Equal"
TRICORE_jge_u:           "Jump if Greater Than or Equal Unsigned"
TRICORE_jgez16:          "Jump if Greater Than or Equal to Zero (16-bit)"
TRICORE_jgtz16:          "Jump if Greater Than Zero (16-bit)"
TRICORE_ji16:            "Jump Indirect"
TRICORE_ji32:            "Jump Indirect"
TRICORE_jl:              "Jump and Link"
TRICORE_jla:             "Jump and Link Absolute"
TRICORE_jlez16:          "Jump if Less Than or Equal to Zero (16-bit)"
TRICORE_jli:             "Jump and Link Indirect"
TRICORE_jlt:             "Jump if Less Than"
TRICORE_jlt_u:           "Jump if Less Than Unsigned"
TRICORE_jltz16:          "Jump if Less Than Zero (16-bit)"
TRICORE_jne_a:           "Jump if Not Equal Address"
TRICORE_jne16:           "Jump if Not Equal"
TRICORE_jne32:           "Jump if Not Equal"
TRICORE_jned:            "Jump if Not Equal and Decrement"
TRICORE_jnei:            "Jump if Not Equal and Increment"
TRICORE_jnz16:           "Jump if Not Equal to Zero (16-bit)"
TRICORE_jnz16_a:         "Jump if Not Equal to Zero Address"
TRICORE_jnz16_t:         "Jump if Not Equal to Zero Bit"
TRICORE_jnz32_a:         "Jump if Not Equal to Zero Address"
TRICORE_jnz32_t:         "Jump if Not Equal to Zero Bit"
TRICORE_jz16:            "Jump if Zero (16-bit)"
TRICORE_jz16_a:          "Jump if Zero Address"
TRICORE_jz16_t:          "Jump if Zero Bit"
TRICORE_jz32_a:          "Jump if Zero Address"
TRICORE_jz32_t:          "Jump if Zero Bit"
TRICORE_ld_b:            "Load Byte"
TRICORE_ld_d:            "Load Double-word"
TRICORE_ld_da:           "Load Double-word to Address Register"
TRICORE_ld_hu:           "Load Half-word Unsigned"
TRICORE_ld_q:            "Load Half-word Signed Fraction"
TRICORE_ld16_a:          "Load Word to Address Register"
TRICORE_ld16_bu:         "Load Byte Unsigned"
TRICORE_ld16_h:          "Load Half-word"
TRICORE_ld16_w:          "Load Word"
TRICORE_ld32_a:          "Load Word to Address Register"
TRICORE_ld32_bu:         "Load Byte Unsigned"
TRICORE_ld32_h:          "Load Half-word"
TRICORE_ld32_w:          "Load Word"
TRICORE_ldlcx:           "Load Lower Context"
TRICORE_ldmst:           "Load-Modify-Store"
TRICORE_lducx:           "Load Upper Context"
TRICORE_lea:             "Load Effective Address"
TRICORE_loop16:          "Loop"
TRICORE_loop32:          "Loop"
TRICORE_loopu:           "Loop Unconditional"
TRICORE_lt_a:            "Less Than Address"
TRICORE_lt_b:            "Less Than Packed Byte"
TRICORE_lt_bu:           "Less Than Packed Byte Unsigned"
TRICORE_lt_h:            "Less Than Packed Half-word"
TRICORE_lt_hu:           "Less Than Packed Half-word Unsigned"
TRICORE_lt_u:            "Less Than Unsigned"
TRICORE_lt_w:            "Less Than Packed Word"
TRICORE_lt_wu:           "Less Than Packed Word Unsigned"
TRICORE_lt16:            "Less Than"
TRICORE_lt32:            "Less Than"
TRICORE_madd:            "Multiply-Add"
TRICORE_madd_h:          "Packed Multiply-Add Q Format"
TRICORE_madd_q:          "Multiply-Add Q Format"
TRICORE_madd_u:          "Multiply-Add Unsigned"
TRICORE_maddm_h:         "Packed Multiply-Add Q Format Multiprecision"
TRICORE_maddms_h:        "Packed Multiply-Add Q Format Multiprecision, Saturated"
TRICORE_maddr_h:         "Packed Multiply-Add Q Format with Rounding"
TRICORE_maddr_q:         "Multiply-Add Q Format with Rounding"
TRICORE_maddrs_h:        "Packed Multiply-Add Q Format with Rounding, Saturated"
TRICORE_maddrs_q:        "Multiply-Add Q Format with Rounding, Saturated"
TRICORE_madds:           "Multiply-Add, Saturated"
TRICORE_madds_h:         "Packed Multiply-Add Q Format, Saturated"
TRICORE_madds_q:         "Multiply-Add Q Format, Saturated"
TRICORE_madds_u:         "Multiply-Add Unsigned, Saturated"
TRICORE_maddsu_h:        "Packed Multiply-Add/Subtract Q Format"
TRICORE_maddsum_h:       "Packed Multiply-Add/Subtract Q Format Multiprecision"
TRICORE_maddsums_h:      "Packed Multiply-Add/Subtract Q Format Multiprecision Saturated"
TRICORE_maddsur_h:       "Packed Multiply-Add/Subtract Q Format with Rounding"
TRICORE_maddsurs_h:      "Packed Multiply-Add/Subtract Q Format with Rounding Saturated"
TRICORE_maddsus_h:       "Packed Multiply-Add/Subtract Q Format Saturated"
TRICORE_max:             "Maximum Value"
TRICORE_max_b:           "Maximum Value Packed Byte"
TRICORE_max_bu:          "Maximum Value Packed Byte Unsigned"
TRICORE_max_h:           "Maximum Value Packed Half-word"
TRICORE_max_hu:          "Maximum Value Packed Half-word Unsigned"
TRICORE_max_u:           "Maximum Value Unsigned"
TRICORE_mfcr:            "Move From Core Register"
TRICORE_min:             "Minimum Value"
TRICORE_min_b:           "Minimum Value Packed Byte"
TRICORE_min_bu:          "Minimum Value Packed Byte Unsigned"
TRICORE_min_h:           "Minimum Value Packed Half-word"
TRICORE_min_hu:          "Minimum Value Packed Half-word Unsigned"
TRICORE_min_u:           "Minimum Value Unsigned"
TRICORE_mov_u:           "Move Unsigned"
TRICORE_mov16:           "Move"
TRICORE_mov16_a:         "Move Value to Address Register"
TRICORE_mov16_aa:        "Move Address from Address Register"
TRICORE_mov16_d:         "Move Address to Data Register"
TRICORE_mov32:           "Move"
TRICORE_mov32_a:         "Move Value to Address Register"
TRICORE_mov32_aa:        "Move Address from Address Register"
TRICORE_mov32_d:         "Move Address to Data Register"
TRICORE_movh:            "Move High"
TRICORE_movh_a:          "Move High to Address"
TRICORE_msub:            "Multiply-Subtract"
TRICORE_msub_h:          "Packed Multiply-Subtract Q Format"
TRICORE_msub_q:          "Multiply-Subtract Q Format"
TRICORE_msub_u:          "Multiply-Subtract Unsigned"
TRICORE_msubad_h:        "Packed Multiply-Subtract/Add Q Format"
TRICORE_msubadm_h:       "Packed Multiply-Subtract/Add Q Format-Multiprecision"
TRICORE_msubadms_h:      "Packed Multiply-Subtract/Add Q Format-Multiprecision, Saturated"
TRICORE_msubadr_h:       "Packed Multiply-Subtract/Add Q Format with Rounding"
TRICORE_msubadrs_h:      "Packed Multiply-Subtract/Add Q Format with Rounding, Saturated"
TRICORE_msubads_h:       "Packed Multiply-Subtract/Add Q Format, Saturated"
TRICORE_msubm_h:         "Packed Multiply-Subtract Q Format-Multiprecision"
TRICORE_msubms_h:        "Packed Multiply-Subtract Q Format-Multiprecision, Saturated"
TRICORE_msubr_h:         "Packed Multiply-Subtract Q Format with Rounding"
TRICORE_msubr_q:         "Multiply-Subtract Q Format with Rounding"
TRICORE_msubrs_h:        "Packed Multiply-Subtract Q Format with Rounding, Saturated"
TRICORE_msubrs_q:        "Multiply-Subtract Q Format with Rounding, Saturated"
TRICORE_msubs:           "Multiply-Subtract, Saturated"
TRICORE_msubs_h:         "Packed Multiply-Subtract Q Format, Saturated"
TRICORE_msubs_q:         "Multiply-Subtract Q Format, Saturated"
TRICORE_msubs_u:         "Multiply-Subtract Unsigned, Saturated"
TRICORE_mtcr:            "Move To Core Register"
TRICORE_mul_h:           "cked Multiply Q Format"
TRICORE_mul_q:           "Multiply Q Format"
TRICORE_mul_u:           "Multiply Unsigned"
TRICORE_mul16:           "Multiply"
TRICORE_mul32:           "Multiply"
TRICORE_mulm_h:          "Packed Multiply Q Format-Multiprecision"
TRICORE_mulms_h:         "Packed Multiply Q Format-Multiprecision, Saturated"
TRICORE_mulr_h:          "Packed Multiply Q Format with Rounding"
TRICORE_mulr_q:          "Multiply Q Format with Rounding"
TRICORE_muls:            "Multiply, Saturated"
TRICORE_muls_u:          "Multiply Unsigned, Saturated"
TRICORE_nand:            "Bitwise NAND"
TRICORE_nand_t:          "Bit Logical NAND"
TRICORE_ne:              "Not Equal"
TRICORE_ne_a:            "Not Equal Address"
TRICORE_nez_a:           "Not Equal Zero Address"
TRICORE_nop16:           "No Operation"
TRICORE_nop32:           "No Operation"
TRICORE_nor_t:           "Bit Logical NOR"
TRICORE_nor16:           "Bitwise NOR"
TRICORE_nor32:           "Bitwise NOR"
TRICORE_or_and_t:        "Accumulating Bit Logical OR-AND"
TRICORE_or_andn_t:       "Accumulating Bit Logical OR-AND-Not"
TRICORE_or_eq:           "Equal Accumulating"
TRICORE_or_ge:           "Greater Than or Equal Accumulating"
TRICORE_or_ge_u:         "Greater Than or Equal Accumulating Unsigned"
TRICORE_or_lt:           "Less Than Accumulating"
TRICORE_or_lt_u:         "Less Than Accumulating Unsigned"
TRICORE_or_ne:           "Not Equal Accumulating"
TRICORE_or_nor_t:        "Accumulating Bit Logical OR-NOR"
TRICORE_or_or_t:         "Accumulating Bit Logical OR-OR"
TRICORE_or_t:            "Bit Logical OR"
TRICORE_or16:            "Bitwise OR"
TRICORE_or32:            "Bitwise OR"
TRICORE_orn:             "Bitwise OR-Not"
TRICORE_orn_t:           "Bit Logical OR-Not"
TRICORE_pack:            "Pack"
TRICORE_parity:          "Parity"
TRICORE_ret16:           "Return from Call"
TRICORE_ret32:           "Return from Call"
TRICORE_rfe16:           "Return From Exception"
TRICORE_rfe32:           "Return From Exception"
TRICORE_rfm:             "Return From Monitor"
TRICORE_rslcx:           "Restore Lower Context"
TRICORE_rstv:            "Reset Overflow Bits"
TRICORE_rsub16:          "Reverse-Subtract"
TRICORE_rsub32:          "Reverse-Subtract"
TRICORE_rsubs:           "Reverse-Subtract with Saturation"
TRICORE_rsubs_u:         "Reverse-Subtract Unsigned with Saturation"
TRICORE_sat16_b:         "Saturate Byte"
TRICORE_sat16_bu:        "Saturate Byte Unsigned"
TRICORE_sat16_h:         "Saturate Half-word"
TRICORE_sat16_hu:        "Saturate Half-word Unsigned"
TRICORE_sat32_b:         "Saturate Byte"
TRICORE_sat32_bu:        "Saturate Byte Unsigned"
TRICORE_sat32_h:         "Saturate Half-word"
TRICORE_sat32_hu:        "Saturate Half-word Unsigned"
TRICORE_sel:             "Select"
TRICORE_seln:            "Select-Not"
TRICORE_sh_and_t:        "Accumulating Shift-AND"
TRICORE_sh_andn_t:       "Accumulating Shift-AND-Not"
TRICORE_sh_eq:           "Shift Equal"
TRICORE_sh_ge:           "Shift Greater Than or Equal"
TRICORE_sh_ge_u:         "Shift Greater Than or Equal Unsigned"
TRICORE_sh_h:            "Shift Packed Half-words"
TRICORE_sh_lt:           "Shift Less Than"
TRICORE_sh_lt_u:         "Shift Less Than Unsigned"
TRICORE_sh_nand_t:       "Accumulating Shift-NAND"
TRICORE_sh_ne:           "Shift Not Equal"
TRICORE_sh_nor_t:        "Accumulating Shift-NOR"
TRICORE_sh_or_t:         "Accumulating Shift-OR"
TRICORE_sh_orn_t:        "Accumulating Shift-OR-Not"
TRICORE_sh_xnor_t:       "Accumulating Shift-XNOR"
TRICORE_sh_xor_t:        "Accumulating Shift-XOR"
TRICORE_sh16:            "Shift"
TRICORE_sh32:            "Shift"
TRICORE_sha_h:           "Arithmetic Shift Packed Half-words"
TRICORE_sha16:           "Arithmetic Shift"
TRICORE_sha32:           "Arithmetic Shift"
TRICORE_shas:            "Arithmetic Shift with Saturation"
TRICORE_st_d:            "Store Double-word"
TRICORE_st_da:           "Store Double-word from Address Registers"
TRICORE_st_q:            "Store Half-word Signed Fraction"
TRICORE_st_t:            "Store Bit"
TRICORE_st16_a:          "Store Word from Address Register"
TRICORE_st16_b:          "Store Byte"
TRICORE_st16_h:          "Store Half-word"
TRICORE_st16_w:          "Store Word"
TRICORE_st32_a:          "Store Word from Address Register"
TRICORE_st32_b:          "Store Byte"
TRICORE_st32_h:          "Store Half-word"
TRICORE_st32_w:          "Store Word"
TRICORE_stlcx:           "Store Lower Context"
TRICORE_stucx:           "Store Upper Context"
TRICORE_sub_b:           "Subtract Packed Byte"
TRICORE_sub_h:           "Subtract Packed Half-word"
TRICORE_sub16:           "Subtract"
TRICORE_sub16_a:         "Subtract Address"
TRICORE_sub32:           "Subtract"
TRICORE_sub32_a:         "Subtract Address"
TRICORE_subc:            "Subtract With Carry"
TRICORE_subs_h:          "Subtract Packed Half-word with Saturation"
TRICORE_subs_hu:         "Subtract Packed Half-word Unsigned with Saturation"
TRICORE_subs_u:          "Subtract Unsigned with Saturation"
TRICORE_subs16:          "Subtract Signed with Saturation"
TRICORE_subs32:          "Subtract Signed with Saturation"
TRICORE_subx:            "Subtract Extended"
TRICORE_svlcx:           "Save Lower Context"
TRICORE_swap_w:          "Swap with Data Register"
TRICORE_syscall:         "System Call"
TRICORE_tlbdemap:        "TLB Demap"
TRICORE_tlbflush_a:      "TLB-A Flush"
TRICORE_tlbflush_b:      "TLB-B Flush"
TRICORE_tlbmap:          "TLB Map"
TRICORE_tlbprobe_a:      "TLB Probe Address"
TRICORE_tlbprobe_i:      "TLB Probe Index"
TRICORE_trapsv:          "Trap on Sticky Overflow"
TRICORE_trapv:           "Trap on Overflow"
TRICORE_unpack:          "Unpack Floating Point"
TRICORE_xnor:            "Bitwise XNOR"
TRICORE_xnor_t:          "Bit Logical XNOR"
TRICORE_xor_eq:          "Equal Accumulating"
TRICORE_xor_ge:          "Greater Than or Equal Accumulating"
TRICORE_xor_ge_u:        "Greater Than or Equal Accumulating Unsigned"
TRICORE_xor_lt:          "Less Than Accumulating"
TRICORE_xor_lt_u:        "Less Than Accumulating Unsigned"
TRICORE_xor_ne:          "Not Equal Accumulating"
TRICORE_xor_t:           "Bit Logical XOR"
TRICORE_xor16:           "Bitwise XOR"
TRICORE_xor32:           "Bitwise XOR"
TRICORE_add_f:           "Add Float"
TRICORE_cmp_f:           "Compare Float"
TRICORE_div_f:           "Divide Float"
TRICORE_ftoi:            "Float to Integer"
TRICORE_ftoq31:          "Float to Fraction"
TRICORE_ftou:            "Float to Unsigned"
TRICORE_itof:            "Integer to Float"
TRICORE_madd_f:          "Multiply Add Float"
TRICORE_msub_f:          "Multiply Subtract Float"
TRICORE_mul_f:           "Multiply Float"
TRICORE_q31tof:          "Fraction to Floating-point"
TRICORE_qseed_f:         "Inverse Square Root Seed"
TRICORE_sub_f:           "Subtract Float"
TRICORE_updfl:           "Update Flags"
TRICORE_utof:            "Unsigned to Floating-point"
TRICORE_cachei_i:        "Cache Index, Invalidate"
TRICORE_cachei_w:        "Cache Index, Writeback"
TRICORE_cachei_wi:       "Cache Index, Writeback and Invalidate"
TRICORE_div:             "Divide"
TRICORE_div_u:           "Divide Unsigned"
TRICORE_fcall:           "Fast Call"
TRICORE_fcalla:          "Fast Call Absolute"
TRICORE_fcalli:          "Fast Call Indirect"
TRICORE_fret16:          "Return from Fast Call"
TRICORE_fret32:          "Return from Fast Call"
TRICORE_ftoiz:           "Float to Integer, Round towards Zero"
TRICORE_ftoq31z:         "Float to Fraction, Round towards Zero"
TRICORE_ftouz:           "Float to Unsigned, Round towards Zero"
TRICORE_restore:         "Restore the Interrupt Enable bit"
TRICORE_crc32:           "Calculate CRC32"
TRICORE_wait:            "Suspend execution until the next enabled interrupt or asynchronous trap event"
TRICORE_cmpswap_w:       "Compare and swap"
TRICORE_swapmsk_w:       "Swap under mask"

// new v1.6.2 instructions
TRICORE_crc32_b:         "CRC32 for big endian data"
TRICORE_crc32l_w:        "CRC32 for little endian data"
TRICORE_crcn:            "Arbitrary width and polynomial CRC calculation"
TRICORE_shuffle:         "Reorder bytes within word"
TRICORE_popcnt_w:        "Count number of bits set in word"
TRICORE_lha:             "Load high bits of address value"
