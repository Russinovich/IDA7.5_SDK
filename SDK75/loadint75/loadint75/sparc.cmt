
// SPARC V9 instructions

SPARC_add:           "Add"
SPARC_addcc:         "Add and modify condition codes"
SPARC_addc:          "Add with carry"
SPARC_addccc:        "Add with carry and modify condition codes"
SPARC_and:           "And"
SPARC_andcc:         "And and modify condition codes"
SPARC_andn:          "And not"
SPARC_andncc:        "And not (and modify condition codes)"
SPARC_b:             "Branch on integer condition codes"
SPARC_bp:            "Branch on integer condition codes with prediction"
SPARC_bpr:           "Branch on contents of integer register with prediction"
SPARC_call:          "Call and link"
SPARC_casa:          "Compare and swap word in alternate space"
SPARC_casxa:         "Compare and swap doubleword in alternate space"
SPARC_done:          "Return from trap"
SPARC_fabs:          "Floating-point absolute value"
SPARC_fadd:          "Floating-point add"
SPARC_fbp:           "Branch on floating-point condition codes with prediction"
SPARC_fb:            "Branch on floating-point condition codes"
SPARC_fcmp:          "Floating-point compare"
SPARC_fcmpe:         "Floating-point compare (exception if unordered)"
SPARC_fdiv:          "Floating-point divide"
SPARC_fdmulq:        "Floating-point multiply double to quad"
SPARC_flush:         "Flush instruction memory"
SPARC_flushw:        "Flush register windows"
SPARC_fmov:          "Floating-point move"
SPARC_fmovcc:        "Conditional floating-point move"
SPARC_fmovr:         "Move floating-point register if integer register contents satisfy condition"
SPARC_fmul:          "Floating-point multiply"
SPARC_fneg:          "Floating-point negate"
SPARC_fsmuld:        "Floating-point multiply single to double"
SPARC_fsqrt:         "Floating-point square root"
SPARC_fsub:          "Floating-point subtract"
SPARC_fstox:         "Convert single floating point to 64-bit integer"
SPARC_fdtox:         "Convert doublee floating point to 64-bit integer"
SPARC_fqtox:         "Convert quad floating point to 64-bit integer"
SPARC_fxtos:         "Convert 64-bit integer to single floating point"
SPARC_fxtod:         "Convert 64-bit integer to double floating point"
SPARC_fxtoq:         "Convert 64-bit integer to quad floating point"
SPARC_fitos:         "Convert 32-bit integer to single floating point"
SPARC_fdtos:         "Convert single floating point to single floating point"
SPARC_fqtos:         "Convert quade floating point to single floating point"
SPARC_fitod:         "Convert 32-bit integer to double floating point"
SPARC_fstod:         "Convert single floating point to double floating point"
SPARC_fqtod:         "Convert quade floating point to double floating point"
SPARC_fitoq:         "Convert 32-bit integer to quad floating point"
SPARC_fstoq:         "Convert single floating point to quad floating point"
SPARC_fdtoq:         "Convert quade floating point to quad floating point"
SPARC_fstoi:         "Convert single floating point to 32-bit integer"
SPARC_fdtoi:         "Convert doublee floating point to 32-bit integer"
SPARC_fqtoi:         "Convert quad floating point to 32-bit integer"
SPARC_illtrap:       "Illegal instruction"
SPARC_impdep1:       "Implementation-dependent instruction"
SPARC_impdep2:       "Implementation-dependent instruction"
SPARC_jmpl:          "Jump and link"
SPARC_ldd:           "Load doubleword"
SPARC_ldda:          "Load doubleword from alternate space"
SPARC_lddf:          "Load double floating-point"
SPARC_lddfa:         "Load double floating-point from alternate space"
SPARC_ldf:           "Load floating-point"
SPARC_ldfa:          "Load floating-point from alternate space"
SPARC_ldfsr:         "Load floating-point state register lower"
SPARC_ldqf:          "Load quad floating-point"
SPARC_ldqfa:         "Load quad floating-point from alternate space"
SPARC_ldsb:          "Load signed byte"
SPARC_ldsba:         "Load signed byte from alternate space"
SPARC_ldsh:          "Load signed halfword"
SPARC_ldsha:         "Load signed halfword from alternate space"
SPARC_ldstub:        "Load-store unsigned byte"
SPARC_ldstuba:       "Load-store unsigned byte in alternate space"
SPARC_ldsw:          "Load signed word"
SPARC_ldswa:         "Load signed word from alternate space"
SPARC_ldub:          "Load unsigned byte"
SPARC_lduba:         "Load unsigned byte from alternate space"
SPARC_lduh:          "Load unsigned halfword"
SPARC_lduha:         "Load unsigned halfword from alternate space"
SPARC_lduw:          "Load unsigned word"
SPARC_lduwa:         "Load unsigned word from alternate space"
SPARC_ldx:           "Load extended"
SPARC_ldxa:          "Load extended from alternate space"
SPARC_ldxfsr:        "Load extended floating-point state register"
SPARC_membar:        "Memory barrier"
SPARC_mov:           "Move integer register if condition is satisfied"
SPARC_movr:          "Move integer register on contents of integer register"
SPARC_mulscc:        "Multiply step and modify condition codes"
SPARC_mulx:          "Multiply 64-bit integers"
SPARC_nop:           "No operation"
SPARC_or:            "Inclusive-or"
SPARC_orcc:          "Inclusive-or (and modify condition codes)"
SPARC_orn:           "Inclusive-or not"
SPARC_orncc:         "Inclusive-or not (and modify condition codes)"
SPARC_popc:          "Population count"
SPARC_prefetch:      "Prefetch data"
SPARC_prefetcha:     "Prefetch data from alternate space"
SPARC_rd:            "Read state register"
SPARC_rdpr:          "Read privileged register"
SPARC_restore:       "Restore caller's window"
SPARC_restored:      "Window has been restored"
SPARC_retry:         "Return from trap and retry"
SPARC_return:        "Return"
SPARC_save:          "Save caller's window"
SPARC_saved:         "Window has been saved"
SPARC_sdiv:          "32-bit signed integer divide"
SPARC_sdivcc:        "32-bit signed integer divide and modify condition codes"
SPARC_sdivx:         "64-bit signed integer divide"
SPARC_sethi:         "Set high 22 bits of low word of integer register"
SPARC_sir:           "Software-initiated reset"
SPARC_sll:           "Shift left logical"
SPARC_sllx:          "Shift left logical: extended"
SPARC_smul:          "Signed integer multiply"
SPARC_smulcc:        "Signed integer multiply (and modify condition codes)"
SPARC_sra:           "Shift right arithmetic"
SPARC_srax:          "Shift right arithmetic: extended"
SPARC_srl:           "Shift right logical"
SPARC_srlx:          "Shift right logical: extended"
SPARC_stb:           "Store byte"
SPARC_stba:          "Store byte into alternate space"
SPARC_stbar:         "Store barrier"
SPARC_std:           "Store doubleword"
SPARC_stda:          "Store doubleword into alternate space"
SPARC_stdf:          "Store double floating-point"
SPARC_stdfa:         "Store double floating-point into alternate space"
SPARC_stf:           "Store floating-point"
SPARC_stfa:          "Store floating-point into alternate space"
SPARC_stfsr:         "Store floating-point state register"
SPARC_sth:           "Store halfword"
SPARC_stha:          "Store halfword into alternate space"
SPARC_stqf:          "Store quad floating-point"
SPARC_stqfa:         "Store quad floating-point into alternate space"
SPARC_stw:           "Store word"
SPARC_stwa:          "Store word into alternate space"
SPARC_stx:           "Store extended"
SPARC_stxa:          "Store extended into alternate space"
SPARC_stxfsr:        "Store extended floating-point state register"
SPARC_sub:           "Subtract"
SPARC_subcc:         "Subtract and modify condition codes"
SPARC_subc:          "Subtract with carry"
SPARC_subccc:        "Subtract with carry and modify condition codes"
SPARC_swap:          "Swap integer register with memory"
SPARC_swapa:         "Swap integer register with memory in alternate space"
SPARC_taddcc:        "Tagged add and modify condition codes"
SPARC_taddcctv:      "Tagged add and modify condition codes (trap on overflow)"
SPARC_tsubcc:        "Tagged subtract and modify condition codes"
SPARC_tsubcctv:      "Tagged subtract and modify condition codes (trap on overflow)"
SPARC_t:             "Trap on integer condition codes"
SPARC_udiv:          "Unsigned integer divide"
SPARC_udivcc:        "Unsigned integer divide and modify condition codes"
SPARC_udivx:         "64-bit unsigned integer divide"
SPARC_umul:          "Unsigned integer multiply"
SPARC_umulcc:        "Unsigned integer multiply and modify condition codes"
SPARC_wr:            "Write Y register"
SPARC_wrpr:          "Write privileged register"
SPARC_xnor:          "Exclusive-nor"
SPARC_xnorcc:        "Exclusive-nor (and modify condition codes)"
SPARC_xor:           "Exclusive-or"
SPARC_xorcc:         "Exclusive-or (and modify condition codes)"

// Synthetic instructions

SPARC_cmp:           "Compare"
SPARC_jmp:           "Jump"
SPARC_iprefetch:     "Instruction prefetch"
SPARC_tst:           "Test"
SPARC_ret:           "Return from subroutine"
SPARC_retl:          "Return from leaf subroutine"
SPARC_setuw:         "Load unsigned constant"
SPARC_setsw:         "Load signed constant"
SPARC_setx:          "Load 64-bit constant"
SPARC_signx:         "Sign-extend 32-bit value to 64 bits"
SPARC_not:           "One's complement"
SPARC_neg:           "Two's complement"
SPARC_cas:           "Compare and swap"
SPARC_casl:          "Compare and swap: little endian"
SPARC_casx:          "Compare and swap extended"
SPARC_casxl:         "Compare and swap extended, little endian"
SPARC_inc:           "Increment"
SPARC_inccc:         "Increment and modify condition codes"
SPARC_dec:           "Decrement"
SPARC_deccc:         "Decrement and modify condition codes"
SPARC_btst:          "Bit test"
SPARC_bset:          "Bit set"
SPARC_bclr:          "Bit clear"
SPARC_btog:          "Bit toggle"
SPARC_clr:           "Clear"
SPARC_clrb:          "Clear byte"
SPARC_clrh:          "Clear halfword"
SPARC_clrx:          "Clear extended word"
SPARC_clruw:         "Clear upper word"
SPARC_pseudo_mov:    "Move register"

// UtlraSPARC II extensions

SPARC_alignaddress:  "Calculate address for misaligned data access"
SPARC_array:         "3-D address to blocked byte address conversion"
SPARC_edge:          "Edge boundary processing {little-endian}"
SPARC_faligndata:    "Perform data alignment for misaligned data"
SPARC_fandnot1:      "Negated src1 AND src2 (single precision)"
SPARC_fandnot2:      "src1 AND negated src2 (single precision)"
SPARC_fand:          "Logical AND (single precision)"
SPARC_fcmpeq:        "Four 16-bit/two 32-bit compare; set integer dest if src1 = src2"
SPARC_fcmpgt:        "Four 16-bit/two 32-bit compare; set integer dest if src1 > src2"
SPARC_fcmple:        "Four 16-bit/two 32-bit compare; set integer dest if src1 <= src2"
SPARC_fcmpne:        "Four 16-bit/two 32-bit compare; set integer dest if src1 != src2"
SPARC_fexpand:       "Four 8-bit to 16-bit expands"
SPARC_fmul8sux16:    "Signed upper 8/16-bit partitioned product of corresponding components"
SPARC_fmul8ulx16:    "Unsigned lower 8/16-bit partitioned product of corresponding components"
SPARC_fmul8x16:      "8/16-bit partitioned product of corresponding components"
SPARC_fmul8x16al:    "8/16-bit lower a partitioned product of 4 components"
SPARC_fmul8x16au:    "8/16-bit upper a partitioned product of 4 components"
SPARC_fmuld8sux16:   "Signed upper 8/16-bit multiply -> 32-bit partitioned product of components"
SPARC_fmuld8ulx16:   "Unsigned lower 8/16-bit multiply -> 32-bit partitioned product of components"
SPARC_fnand:         "Logical NAND (single precision)"
SPARC_fnor:          "Logical NOR (single precision)"
SPARC_fnot1:         "Negate (1's complement) src1 (single precision)"
SPARC_fnot2:         "Negate (1's complement) src2 (single precision)"
SPARC_fone:          "One fill (single precision)"
SPARC_fornot1:       "Negated src1 OR src2 (single precision)"
SPARC_fornot2:       "src1 OR negated src2 (single precision)"
SPARC_for:           "Logical OR (single precision)"
SPARC_fpackfix:      "Two 32-bit to 16-bit fixed pack"
SPARC_fpack:         "Four 16-bit/two 32-bit pixel pack"
SPARC_fpadd:         "Four 16-bit/two 32-bit partitioned add (single precision)"
SPARC_fpmerge:       "Two 32-bit pixel to 64-bit pixel merge"
SPARC_fpsub:         "Four 16-bit/two 32-bit partitioned subtract (single precision)"
SPARC_fsrc1:         "Copy src1 (single precision)"
SPARC_fsrc2:         "Copy src2 (single precision)"
SPARC_fxnor:         "Logical XNOR (single precision)"
SPARC_fxor:          "Logical XOR (single precision)"
SPARC_fzero:         "Zero fill (single precision)"
SPARC_pdist:         "Distance between 8 8-bit components"
SPARC_shutdown:      "Power-down support"

// V8 only instructions
SPARC_rett:          "Return from trap"

// UA 2005 instructions
SPARC_bmask:         "Byte Mask"
SPARC_bshuffle:      "Byte Shuffle"
SPARC_edgen:         "Edge boundary processing (no CC) {little-endian}"
SPARC_rdhpr:         "Read Hyperprivileged Register"
SPARC_wrhpr:         "Write Hyperprivileged Register"
SPARC_siam:          "Set Interval Arithmetic Mode"
