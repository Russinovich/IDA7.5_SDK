  mc8_aba:      "Add b to a"
  mc8_ab:       "Add b to index register"
  mc8_adc:      "Add with carry"
  mc8_add:      "Add without carry"
  mc8_addd:     "Add 16-bit to D"
  mc8_ais:      "Add immediate value to stack pointer"
  mc8_aix:      "Add immediate value to index register (H:X)"
  mc8_and:      "Logical AND"
  mc8_andcc:    "Logical AND immdiate with CCR"
  mc8_asr:      "Ariphmetic shift right"
  mc8_bcc:      "Branch if carry bit clear"
  mc8_bclr:     "Clear bit in memory"
  mc8_bcs:      "Branch if carry bit set"
  mc8_beq:      "Branch if equal"
  mc8_bge:      "Branch if >= (signed)"
  mc8_bgt:      "Branch if > (signed)"
  mc8_bhcc:     "Branch if half carry bit clear"
  mc8_bhcs:     "Branch if half carry bit set"
  mc8_bhi:      "Branch if > (unsigned)"
  mc8_bhs:      "Branch if >= (unsigned)"
  mc8_bih:      "Branch if IRQ pin high"
  mc8_bil:      "Branch if IRQ pin low"
  mc8_bit:      "Bit test"
  mc8_ble:      "Branch if <= (signed)"
  mc8_blo:      "Branch if < (unsigned)"
  mc8_bls:      "Branch if <= (unsigned)"
  mc8_blt:      "Branch if < (signed)"
  mc8_bmc:      "Branch if interrupt mask clear"
  mc8_bmi:      "Branch if minus"
  mc8_bms:      "Branch if interrupt mask set"
  mc8_bne:      "Branch if not equal"
  mc8_bpl:      "Branch if plus"
  mc8_bra:      "Branch always"
  mc8_brclr:    "Branch if bit (n) in memory clear"
  mc8_brn:      "Branch never"
  mc8_brset:    "Branch if bit (n) in memory set"
  mc8_bset:     "Set bit in memory"
  mc8_bsr:      "Branch to subroutine"
  mc8_bvc:      "Branch if overflow clear"
  mc8_bvs:      "Branch if overflow set"
  mc8_cba:      "Compare A to B"
  mc8_cbeq:     "Compare and branch if equal"
  mc8_clc:      "Clear carry bit"
  mc8_cli:      "Clear interrupt mask"
  mc8_clr:      "Clear"
  mc8_clv:      "Clear overflow bit"
  mc8_cmp:      "Compare accumulator with memory"
  mc8_com:      "Complement"
  mc8_cp:       "Compare index register 16 bit"
  mc8_cpd:      "Compare D 16 bit"
  mc8_cphx:     "Compare index register with memory"
  mc8_cpx:      "Compare X (index register low) with memory"
  mc8_cwai:     "Clear CC bits and wait for interrupt"
  mc8_daa:      "Decimal adjust accumulator"
  mc8_dbnz:     "Decrement and branch if not equal"
  mc8_de:       "Decrement index register"
  mc8_dec:      "Decrement"
  mc8_des:      "Decrement stack pointer"
  mc8_div:      "Divide"
  mc8_eor:      "Excusive OR memory with accumulator"
  mc8_exg:      "Exchange register"
  mc8_fdiv:     "Fractional divide 16 by 16"
  mc8_idiv:     "Integer divide 16 by 16"
  mc8_in:       "Increment index register"
  mc8_inc:      "Increment"
  mc8_ins:      "Increment stack pointer"
  mc8_jmp:      "Jump"
  mc8_jsr:      "Jump to subroutine"
  mc8_ld:       "Load index register from memory"
  mc8_lda:      "Load accumulator from memory"
  mc8_ldd:      "Load double accumulator"
  mc8_ldhx:     "Load index register from memory"
  mc8_lds:      "Load stack pointer"
  mc8_ldx:      "Load X (index register low) from memory"
  mc8_lea:      "Load register from memory"
  mc8_lsl:      "Logical (or Ariphmetic) shift left"
  mc8_lsld:     "Logical (or Ariphmetic) shift left double"
  mc8_lsr:      "Logical shift right"
  mc8_lsrd:     "Logical shift right double"
  mc8_mov:      "Move"
  mc8_mul:      "Unsigned multiply"
  mc8_neg:      "Negate"
  mc8_nop:      "No Operation"
  mc8_nsa:      "Nibble swap accumulator"
  mc8_ora:      "Inclusive OR memory with accumulator"
  mc8_orcc:     "Inclusive OR immediate with CCR"
  mc8_psh:      "Push index register into stack (low first)"
  mc8_psha:     "Push accumulator A into stack"
  mc8_pshb:     "Push accumulator B into stack"
  mc8_pshh:     "Push H (index register high) into stack"
  mc8_pshx:     "Push X (index register low) into stack"
  mc8_pul:      "Pull index register from stack (hi first)"
  mc8_pula:     "Pull accumulator A from stack"
  mc8_pulb:     "Pull accumulator B from stack"
  mc8_pulh:     "Pull H (index register high) from stack"
  mc8_pulx:     "Pull X (index register low) from stack"
  mc8_rol:      "Rotate left trough carry"
  mc8_ror:      "Rotate right trough carry"
  mc8_rsp:      "Reset stack pointer"
  mc8_rti:      "Reset from interrupt"
  mc8_rts:      "Return from subroutine"
  mc8_sba:      "Subtract B to A"
  mc8_sbc:      "Subtract with carry"
  mc8_sec:      "Set carry bit"
  mc8_sei:      "Set interrupt mask bit"
  mc8_sev:      "Set overflow flag"
  mc8_sex:      "Sign extended"
  mc8_slp:      "Sleep"
  mc8_st:       "Store index register in memory"
  mc8_sta:      "Store accumulator in memory"
  mc8_std:      "Store accumulators in memory"
  mc8_sthx:     "Store H:X (index reg)"
  mc8_stop:     "Enable IRQ pin. Stop oscillator"
  mc8_sts:      "Store stack pointer in memory"
  mc8_stx:      "Store X (index register low) in memory"
  mc8_sub:      "Subtract"
  mc8_subd:     "Subtract 16 bit"
  mc8_swi:      "Software interrupt"
  mc8_sync:     "Syncronisation with interrupt"
  mc8_tab:      "Transfer A to B"
  mc8_tap:      "Transfer A to CCR"
  mc8_tax:      "Transfer A to X (index register low)"
  mc8_tba:      "Transfer B to A"
  mc8_test:     "Address Bus Counts (in test mode)"
  mc8_tfr:      "Transfer register to register"
  mc8_tpa:      "Transfer CCR to A"
  mc8_ts:       "Transfer SP to index reg"
  mc8_tst:      "Test for negative or zero"
  mc8_tsx:      "Transfer SP to index reg X"
  mc8_txa:      "Transfer X (index reg low) to A"
  mc8_txs:      "Transfer index reg X to SP"
  mc8_tys:      "Transfer index reg Y to SP"
  mc8_wai:      "Wait for interrupt"
  mc8_wait:     "Enable interrupt. Stop processor"
  mc8_xgd:      "Exchange D with index register"
  mc8_1:        "Special testing command 1"
  mc8_2:        "Special testing command 2"
  mc8_os9: { op1 ?
// OS9 call codes:
        0x00: "F$Link   Link to Module"
        0x01: "F$Load   Load Module from File"
        0x02: "F$UnLink Unlink Module"
        0x03: "F$Fork   Start New Process"
        0x04: "F$Wait   Wait for Child Process to Die"
        0x05: "F$Chain  Chain Process to New Module"
        0x06: "F$Exit   Terminate Process"
        0x07: "F$Mem    Set Memory Size"
        0x08: "F$Send   Send Signal to Process"
        0x09: "F$Icpt   Set Signal Intercept"
        0x0A: "F$Sleep  Suspend Process"
        0x0B: "F$SSpd   Suspend Process"
        0x0C: "F$ID     Return Process ID"
        0x0D: "F$SPrior Set Process Priority"
        0x0E: "F$SSWI   Set Software Interrupt"
        0x0F: "F$PErr   Print Error"
        0x10: "F$PrsNam Parse Pathlist Name"
        0x11: "F$CmpNam Compare Two Names"
        0x12: "F$SchBit Search Bit Map"
        0x13: "F$AllBit Allocate in Bit Map"
        0x14: "F$DelBit Deallocate in Bit Map"
        0x15: "F$Time   Get Current Time"
        0x16: "F$STime  Set Current Time"
        0x17: "F$CRC    Generate CRC"
        0x18: "F$GPrDsc get Process Descriptor copy"
        0x19: "F$GBlkMp get System Block Map copy"
        0x1A: "F$GModDr get Module Directory copy"
        0x1B: "F$CpyMem Copy External Memory"
        0x1C: "F$SUser  Set User ID number"
        0x1D: "F$UnLoad Unlink Module by name"
        0x1E: "F$Ctime  Com-Trol clock read"
        0x1F: "F$Cstime Com-Trol set time"
        0x20: "F$CTswi2 Com-Trol double postbyte swi2"
        0x25: "F$TPS    Return System's Ticks Per Second"
        0x26: "F$TimAlm COCO individual process alarm call"
        0x27: "F$VIRQ   Install/Delete Virtual IRQ"
        0x28: "F$SRqMem System Memory Request"
        0x29: "F$SRtMem System Memory Return"
        0x2A: "F$IRQ    Enter IRQ Polling Table"
        0x2B: "F$IOQu   Enter I/O Queue"
        0x2C: "F$AProc  Enter Active Process Queue"
        0x2D: "F$NProc  Start Next Process"
        0x2E: "F$VModul Validate Module"
        0x2F: "F$Find64 Find Process/Path Descriptor"
        0x30: "F$All64  Allocate Process/Path Descriptor"
        0x31: "F$Ret64  Return Process/Path Descriptor"
        0x32: "F$SSvc   Service Request Table Initialization"
        0x33: "F$IODel  Delete I/O Module"
        0x34: "F$SLink  System Link"
        0x35: "F$Boot   Bootstrap System"
        0x36: "F$BtMem  Bootstrap Memory Request"
        0x37: "F$GProcP Get Process ptr"
        0x38: "F$Move   Move Data (low bound first)"
        0x39: "F$AllRAM Allocate RAM blocks"
        0x3A: "F$AllImg Allocate Image RAM blocks"
        0x3B: "F$DelImg Deallocate Image RAM blocks"
        0x3C: "F$SetImg Set Process DAT Image"
        0x3D: "F$FreeLB Get Free Low Block"
        0x3E: "F$FreeHB Get Free High Block"
        0x3F: "F$AllTsk Allocate Process Task number"
        0x40: "F$DelTsk Deallocate Process Task number"
        0x41: "F$SetTsk Set Process Task DAT registers"
        0x42: "F$ResTsk Reserve Task number"
        0x43: "F$RelTsk Release Task number"
        0x44: "F$DATLog Convert DAT Block/Offset to Logical"
        0x45: "F$DATTmp Make temporary DAT image"
        0x46: "F$LDAXY  Load A [X,[Y]]"
        0x47: "F$LDAXYP Load A [X+,[Y]]"
        0x48: "F$LDDDXY Load D [D+X,[Y]]"
        0x49: "F$LDABX  Load A from 0,X in task B"
        0x4A: "F$STABX  Store A at 0,X in task B"
        0x4B: "F$AllPrc Allocate Process Descriptor"
        0x4C: "F$DelPrc Deallocate Process Descriptor"
        0x4D: "F$ELink  Link using Module Directory Entry"
        0x4E: "F$FModul Find Module Directory Entry"
        0x4F: "F$MapBlk Map Specific Block"
        0x50: "F$ClrBlk Clear Specific Block"
        0x51: "F$DelRAM Deallocate RAM blocks"
        0x52: "F$GCMDir Pack module directory"
        0x53: "F$AlHRam Allocate HIGH RAM Blocks"
//* NitrOS9 additions
//* F$ReBoot is unimplemented at this time
        0x54: "F$ReBoot reboot machine (reload OS9Boot) or drop to RSDOS"
        0x55: "F$CRCMod CRC mode, toggle or report current status"
        0x56: "F$XTime  Get Extended time packet from RTC (fractions of second)"
// * Alan DeKok's NitrOS-9 additions here
        0x57: "F$VBlock Verify modules in a block of memory, add to module directory"
// * Numbers $70 through $7F are reserved for user definitions
        0x70: "F$RegDmp Ron Lammardo's debugging register dump call"
        0x71: "F$NVRAM  Non Volatile RAM (RTC battery backed static) read/write"
        0x72: "F$Timer  GIME timer IRQ setup"
        0x80: "I$Attach Attach I/O Device"
        0x81: "I$Detach Detach I/O Device"
        0x82: "I$Dup    Duplicate Path"
        0x83: "I$Create Create New File"
        0x84: "I$Open   Open Existing File"
        0x85: "I$MakDir Make Directory File"
        0x86: "I$ChgDir Change Default Directory"
        0x87: "I$Delete Delete File"
        0x88: "I$Seek   Change Current Position"
        0x89: "I$Read   Read Data"
        0x8A: "I$Write  Write Data"
        0x8B: "I$ReadLn Read Line of ASCII Data"
        0x8C: "I$WritLn Write Line of ASCII Data"
        0x8D: "I$GetStt Get Path Status"
        0x8E: "I$SetStt Set Path Status"
        0x8F: "I$Close  Close Path"
        0x90: "I$DeletX Delete from current exec dir"
// MC6800:
        0x6800: { op2 ?
          0x8004: "ACCIA"
          0xA012: "SWIJMP"
          0xA080: "IB"
          0xA840: "SYSFCB"
          0xAC00: "TTYSETBS"
          0xAC01: "TTYSETDE"
          0xAC02: "TTYSETEL"
          0xAC03: "TTYSETDP"
          0xAC04: "TTYSETWD"
          0xAC05: "TTYSETNU"
          0xAC06: "TTYSETTB"
          0xAC07: "TTYSETBE"
          0xAC08: "TTYSETEC"
          0xAC09: "TTYSETPS"
          0xAC0A: "TTYSETES"
          0xAC0B: "SYSDRV"
          0xAC0C: "WRKDRV"
          0xAC0D: "SCRATCH1"
          0xAC0E: "MONTH"
          0xAC0F: "DAY"
          0xAC10: "YEAR"
          0xAC11: "LASTTERM"
          0xAC12: "UCTADDR"
          0xAC14: "LINPTR"
          0xAC16: "ESCRETAD"
          0xAC18: "CURCHR"
          0xAC19: "PRVCHR"
          0xAC1A: "CURLNUM"
          0xAC1B: "LDOFFSET"
          0xAC1D: "TRANFLAG"
          0xAC1E: "TRANADDR"
          0xAC20: "ERRTYPE"
          0xAC21: "SPCIOFLG"
          0xAC22: "OUTSWTCH"
          0xAC23: "INPSWTCH"
          0xAC24: "FOFCBADR"
          0xAC26: "FIFCBADR"
          0xAC28: "CMDFLAG"
          0xAC29: "CURCOL"
          0xAC2A: "SCRATCH2"
          0xAC2B: "MEMEND"
          0xAC2D: "ERRNAME"
          0xAC2F: "FIECHOFL"
          0xAC30: "SCRATCH3"
          0xAC31: "SCRATCH4"
          0xAC32: "SCRATCH5"
          0xAC33: "CPUFLAG"
          0xAC35: "RPAPTR"
          0xAC37: "RPALEN"
          0xAC39: "RPADEV"
          0xACC0: "PINIT"
          0xACD8: "PCHK"
          0xACE4: "POUT"
          0xAD00: "COLDS"
          0xAD03: "WARMS"
          0xAD06: "RENTER"
          0xAD09: "INCH"
          0xAD0C: "INCH2"
          0xAD0F: "OUTCH"
          0xAD12: "OUTCH2"
          0xAD15: "GETCHR"
          0xAD18: "PUTCHR"
          0xAD1B: "INBUFF"
          0xAD1E: "PSTRNG"
          0xAD21: "CLASS"
          0xAD24: "PCRLF"
          0xAD27: "NXTCH"
          0xAD2A: "RSTRIO"
          0xAD2D: "GETFIL"
          0xAD30: "LOAD"
          0xAD33: "SETEXT"
          0xAD36: "ADDBX"
          0xAD39: "OUTDEC"
          0xAD3C: "OUTHEX"
          0xAD3F: "RPTERR"
          0xAD42: "GETHEX"
          0xAD45: "OUTADR"
          0xAD48: "INDEC"
          0xAD4B: "DOCMND"
          0xAD4E: "STAT"
          0xB400: "FMSINT"
          0xB403: "FMSCLS"
          0xB406: "FMS"
          0xBE80: "DREAD"
          0xBE83: "DWRITE"
          0xBE86: "DVERIFY"
          0xBE89: "DRESTORE"
          0xBE8C: "DSELECT"
          0xBE8F: "DREADY"
          0xBE92: "DQCHECK"
          0xE07E: "PDATA1"
          0xE124: "SFE1"
          0xE1AC: "INCHR"
          0xE1D1: "OUTCHR"
        }  
// MC6809:
        0x6809: { op2 ?
          0xE004: "ACCIA"
          0xC012: "SWIJMP"
          0xC080: "IB"
          0xC840: "SYSFCB"
          0xCC00: "TTYSETBS"
          0xCC01: "TTYSETDE"
          0xCC02: "TTYSETEL"
          0xCC03: "TTYSETDP"
          0xCC04: "TTYSETWD"
          0xCC05: "TTYSETNU"
          0xCC06: "TTYSETTB"
          0xCC07: "TTYSETBE"
          0xCC08: "TTYSETEC"
          0xCC09: "TTYSETPS"
          0xCC0A: "TTYSETES"
          0xCC0B: "SYSDRV"
          0xCC0C: "WRKDRV"
          0xCC0D: "SCRATCH1"
          0xCC0E: "MONTH"
          0xCC0F: "DAY"
          0xCC10: "YEAR"
          0xCC11: "LASTTERM"
          0xCC12: "UCTADDR"
          0xCC14: "LINPTR"
          0xCC16: "ESCRETAD"
          0xCC18: "CURCHR"
          0xCC19: "PRVCHR"
          0xCC1A: "CURLNUM"
          0xCC1B: "LDOFFSET"
          0xCC1D: "TRANFLAG"
          0xCC1E: "TRANADDR"
          0xCC20: "ERRTYPE"
          0xCC21: "SPCIOFLG"
          0xCC22: "OUTSWTCH"
          0xCC23: "INPSWTCH"
          0xCC24: "FOFCBADR"
          0xCC26: "FIFCBADR"
          0xCC28: "CMDFLAG"
          0xCC29: "CURCOL"
          0xCC2A: "SCRATCH2"
          0xCC2B: "MEMEND"
          0xCC2D: "ERRNAME"
          0xCC2F: "FIECHOFL"
          0xCC30: "SCRATCH3"
          0xCC31: "SCRATCH4"
          0xCC32: "SCRATCH5"
          0xCC33: "CPUFLAG"
          0xCC35: "RPAPTR"
          0xCC37: "RPALEN"
          0xCC39: "RPADEV"
          0xCCC0: "PINIT"
          0xCCD8: "PCHK"
          0xCCE4: "POUT"
          0xCD00: "COLDS"
          0xCD03: "WARMS"
          0xCD06: "RENTER"
          0xCD09: "INCH"
          0xCD0C: "INCH2"
          0xCD0F: "OUTCH"
          0xCD12: "OUTCH2"
          0xCD15: "GETCHR"
          0xCD18: "PUTCHR"
          0xCD1B: "INBUFF"
          0xCD1E: "PSTRNG"
          0xCD21: "CLASS"
          0xCD24: "PCRLF"
          0xCD27: "NXTCH"
          0xCD2A: "RSTRIO"
          0xCD2D: "GETFIL"
          0xCD30: "LOAD"
          0xCD33: "SETEXT"
          0xCD36: "ADDBX"
          0xCD39: "OUTDEC"
          0xCD3C: "OUTHEX"
          0xCD3F: "RPTERR"
          0xCD42: "GETHEX"
          0xCD45: "OUTADR"
          0xCD48: "INDEC"
          0xCD4B: "DOCMND"
          0xCD4E: "STAT"
          0xD400: "FMSINT"
          0xD403: "FMSCLS"
          0xD406: "FMS"
          0xDE80: "DREAD"
          0xDE83: "DWRITE"
          0xDE86: "DVERIFY"
          0xDE89: "DRESTORE"
          0xDE8C: "DSELECT"
          0xDE8F: "DREADY"
          0xDE92: "DQCHECK"
        }  
  }
  mc8_aim:      "And immediate"
  mc8_oim:      "Or immediate"
  mc8_eim:      "Xor immediate"
  mc8_tim:      "Test immediate"
  mc8_bgnd:     "Enter active background debug mode"
  mc8_skip1:    "Skip the following byte in the code"
  mc8_skip2:    "Skip the following two bytes in the code"
