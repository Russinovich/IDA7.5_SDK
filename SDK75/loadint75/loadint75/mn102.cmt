mn102_add:      "Addition"
mn102_addc:     "Addition with carry"
mn102_addnf:    "Addition without flag change"
mn102_and:      "Logical AND"
mn102_asr:      "Arithmetic right shift"
mn102_bcc:      "Conditional branch (PC relative)"
mn102_bccx:     "Conditional branch according to the extension flag (PC relative)"
mn102_bclr:     "Bit test and clear (byte processing)"
mn102_bcs:      "Conditional branch (PC relative)"
mn102_bcsx:     "Conditional branch according to the extension flag (PC relative)"
mn102_beq:      "Conditional branch (PC relative)"
mn102_beqx:     "Conditional branch according to the extension flag (PC relative)"
mn102_bge:      "Conditional branch (PC relative)"
mn102_bgex:     "Conditional branch according to the extension flag (PC relative)"
mn102_bgt:      "Conditional branch (PC relative)"
mn102_bgtx:     "Conditional branch according to the extension flag (PC relative)"
mn102_bhi:      "Conditional branch (PC relative)"
mn102_bhix:     "Conditional branch according to the extension flag (PC relative)"
mn102_ble:      "Conditional branch (PC relative)"
mn102_blex:     "Conditional branch according to the extension flag (PC relative)"
mn102_bls:      "Conditional branch (PC relative)"
mn102_blsx:     "Conditional branch according to the extension flag (PC relative)"
mn102_blt:      "Conditional branch (PC relative)"
mn102_bltx:     "Conditional branch according to the extension flag (PC relative)"
mn102_bnc:      "Conditional branch (PC relative)"
mn102_bncx:     "Conditional branch according to the extension flag (PC relative)"
mn102_bne:      "Conditional branch (PC relative)"
mn102_bnex:     "Conditional branch according to the extension flag (PC relative)"
mn102_bns:      "Conditional branch (PC relative)"
mn102_bnsx:     "Conditional branch according to the extension flag (PC relative)"
mn102_bra:      "Branch"
mn102_bset:     "Bit test and set (byte processing)"
mn102_btst:     "Bit test"
mn102_bvc:      "Conditional branch (PC relative)"
mn102_bvcx:     "Conditional branch according to the extension flag (PC relative)"
mn102_bvs:      "Conditional branch (PC relative)"
mn102_bvsx:     "Conditional branch according to the extension flag (PC relative)"
mn102_cmp:      "Compare"
mn102_divu:     "Unsigned division"
mn102_ext:      "32-bit signed extension from word data"
mn102_extx:     "Signed extension from word data to pointer type data"
mn102_extxb:    "Signed extension from byte data to pointer type data"
mn102_extxbu:   "Zero extension from byte data to pointer type data"
mn102_extxu:    "Zero extension from word data to pointer type data"
mn102_jmp:      "Unconditional branch (PC relative, register indirect)"
mn102_jsr:      "Branch to subroutine (PC relative, register indirect)"
mn102_lsr:      "Logical right shift"
mn102_mov:      "Move data"
mn102_movb:     "Byte data transfer for memory (signed expansion)"
mn102_movbu:    "Byte data transfer for memory (zero expansion)"
mn102_movx:     "Pointer type data transfer between a data register and memory"
mn102_mul:      "Signed multiplication"
mn102_mulq:     "High-speed signed multiplication (16 bits x 16 bits = 32 bits)"
mn102_mulqh:    "High-speed signed multiplication (16 bits x 16 bits = 32 bits only the upper 16 bits of the 32 bits are valid.)"
mn102_mulql:    "High-speed signed multiplication (16 bits x 16 bits = 24 bits)"
mn102_mulu:     "Unsigned multiplication"
mn102_nop:      "No operation"
mn102_not:      "Not (one's complement)"
mn102_or:       "Logical OR"
mn102_pxst:     "Control instruction of saturation operation flag"
mn102_rol:      "Left rotate"
mn102_ror:      "Right rotate"
mn102_rti:      "Return from interrupt"
mn102_rts:      "Return from subroutine"
mn102_sub:      "Subtraction"
mn102_subc:     "Subtraction with borrow"
mn102_tbnz:     "Bit test & conditional branch (Zero)"
mn102_tbz:      "Bit test & conditional branch (NoZero)"
mn102_xor:      "Exclusive logical OR"
