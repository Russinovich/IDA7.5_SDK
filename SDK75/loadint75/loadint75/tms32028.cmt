TMS28_aborti:     "Abort interrupt"
TMS28_abs:        "Absolute value of accumulator"
TMS28_abstc:      "Absolute value of accumulator and load TC"
TMS28_add:        "Add value"
TMS28_addb:       "Add immediate byte value"
TMS28_addcl:      "Add 32-bit value plus carry to accumulator"
TMS28_addcu:      "Add unsigned value plus carry to accumulator"
TMS28_addl:       "Add 32-bit value"
TMS28_addu:       "Add unsigned value to accumulator"
TMS28_addul:      "Add 32-bit Unsigned Value"
TMS28_adrk:       "Add to current auxiliary register"
TMS28_and:        "Bitwise AND"
TMS28_andb:       "Bitwise AND"
TMS28_asp:        "Align stack pointer"
TMS28_asr:        "Arithmetic shift right"
TMS28_asr64:      "Arithmetic shift right of 64-bit value"
TMS28_asrl:       "Arithmetic shift right of accumulator"
TMS28_b:          "Branch"
TMS28_banz:       "Branch if auxiliary register not equal to zero"
TMS28_bar:        "Branch on Auxiliary Register Comparison"
TMS28_bf:         "Branch Fast"
TMS28_c27map:     "Set the M0M1MAP bit"
TMS28_c27obj:     "Clear the OBJMODE bit"
TMS28_c28addr:    "Clear the AMODE status bit"
TMS28_c28map:     "Set the M0M1MAP bit"
TMS28_c28obj:     "Set the OBJMODE bit"
TMS28_clrc:       "Clear status bits"
TMS28_cmp:        "Compare"
TMS28_cmp64:      "Compare 64-bit value"
TMS28_cmpb:       "Compare 8-bit value"
TMS28_cmpl:       "Compare 32-bit value"
TMS28_cmpr:       "Compare auxiliary registers"
TMS28_csb:        "Count sign bits"
TMS28_dec:        "Decrement by 1"
TMS28_dint:       "Disable maskable interrupts (set INTM bit)"
TMS28_dmac:       "16-Bit dual multiply and accumulate"
TMS28_dmov:       "Data move contents of 16-bit location"
TMS28_eallow:     "Enable write access to protected space"
TMS28_edis:       "Disable write access to protected registers"
TMS28_eint:       "Enable maskable interrupts (clear INTM bit)"
TMS28_estop0:     "Emulation stop 0"
TMS28_estop1:     "Emulation stop 1"
TMS28_ffc:        "Fast function call"
TMS28_flip:       "Flip order of bits in AX register"
TMS28_iack:       "Interrupt acknowledge"
TMS28_idle:       "Put processor in idle mode"
TMS28_imacl:      "Signed 32 X 32-bit multiply and accumulate (lower half)"
TMS28_impyal:     "Signed 32-bit multiply (lower half) and add previous P"
TMS28_impyl:      "Signed 32 X 32-bit multiply (lower half)"
TMS28_impysl:     "Signed 32-bit multiply (low half) and subtract P"
TMS28_impyxul:    "Signed 32 X unsigned 32-bit multiply (lower half)"
TMS28_in:         "Input data from port"
TMS28_inc:        "Increment by 1"
TMS28_intr:       "Emulate hardware interrupt"
TMS28_iret:       "Interrupt return"
TMS28_lb:         "Long branch (indirect)"
TMS28_lc:         "Long call (indirect)"
TMS28_lcr:        "Long call using RPC"
TMS28_loopnz:     "Loop while not zero"
TMS28_loopz:      "Loop while zero"
TMS28_lpaddr:     "Set the AMODE bit"
TMS28_lret:       "Long return"
TMS28_lrete:      "Long return and enable interrupts"
TMS28_lretr:      "Long return using RPC"
TMS28_lsl:        "Logical shift left"
TMS28_lsl64:      "Logical shift left"
TMS28_lsll:       "Logical shift left"
TMS28_lsr:        "Logical shift right"
TMS28_lsr64:      "Logical shift right"
TMS28_lsrl:       "Logical shift right"
TMS28_mac:        "Multiply and accumulate"
TMS28_max:        "Find the maximum"
TMS28_maxcul:     "Conditionally find the unsigned maximum"
TMS28_maxl:       "Find the 32-bit maximum"
TMS28_min:        "Find the minimum"
TMS28_mincul:     "Conditionally find the unsigned minimum"
TMS28_minl:       "Find the 32-bit minimum"
TMS28_mov:        "Load/Store value"
TMS28_mova:       "Load T register and add previous product"
TMS28_movad:      "Load T register"
TMS28_movb:       "Load/Save byte value"
TMS28_movdl:      "Store XT and load new XT"
TMS28_movh:       "Load/Save high word"
TMS28_movl:       "Load/Store 32-bit value"
TMS28_movp:       "Load the T register and store P in the accumulator"
TMS28_movs:       "Load T and subtract P from the accumulator"
TMS28_movu:       "Load/Store unsigned word"
TMS28_movw:       "Load the entire data page"
TMS28_movx:       "Load lower half of XT with sign extension"
TMS28_movz:       "Load (lower half of XARn)|(data page) and clear upper half"
TMS28_mpy:        "16 X 16-Bit multiply"
TMS28_mpya:       "16 X 16-Bit multiply and add previous product"
TMS28_mpyb:       "Multiply by 8-bit Constant"
TMS28_mpys:       "16 X 16-bit multiply and subtract"
TMS28_mpyu:       "Unsigned 16 X 16 multiply"
TMS28_mpyxu:      "Multiply signed value by unsigned value"
TMS28_nasp:       "Unalign stack pointer"
TMS28_neg:        "Negate accumulator"
TMS28_neg64:      "Negate accumulator register and product register"
TMS28_negtc:      "If TC is equivalent to 1, negate ACC"
TMS28_nop:        "No operation with optional indirect address modification"
TMS28_norm:       "Normalize ACC and modify selected auxiliary register"
TMS28_not:        "Complement value"
TMS28_or:         "Bitwise OR"
TMS28_orb:        "Bitwise OR immediate byte value"
TMS28_out:        "Output data to port"
TMS28_pop:        "Pop top of stack"
TMS28_pread:      "Read from program memory"
TMS28_push:       "Push onto stack"
TMS28_pwrite:     "Write to program memory"
TMS28_qmacl:      "Signed 32 X 32-bit multiply and accumulate (upper half)"
TMS28_qmpyal:     "Signed 32-bit multiply (upper half) and add previous P"
TMS28_qmpyl:      "Signed 32 X 32-bit multiply (upper half)"
TMS28_qmpysl:     "Signed 32-bit multiply (upper half) and subtract previous P"
TMS28_qmpyul:     "Unsigned 32 X 32-bit multiply (upper half)"
TMS28_qmpyxul:    "Signed X unsigned 32-bit multiply (upper half)"
TMS28_rol:        "Rotate accumulator left"
TMS28_ror:        "Rotate accumulator right"
TMS28_rpt:        "Repeat next instruction"
TMS28_sat:        "Saturate accumulator"
TMS28_sat64:      "Saturate 64-bit value ACC:P"
TMS28_sb:         "Short conditional branch"
TMS28_sbbu:       "Subtract unsigned value plus inverse borrow"
TMS28_sbf:        "Short branch fast"
TMS28_sbrk:       "Subtract from current auxiliary register"
TMS28_setc:       "Set multiple status bits"
TMS28_sfr:        "Shift accumulator right"
TMS28_spm:        "Set product mode shift bits"
TMS28_sqra:       "Square value and add P to ACC"
TMS28_sqrs:       "Square value and subtract P from ACC"
TMS28_sub:        "Subtract value"
TMS28_subb:       "Subtraot immediate byte value"
TMS28_subbl:      "Subtract 32-bit value plus inverse borrow"
TMS28_subcu:      "Subtract conditional 16 bits"
TMS28_subcul:     "Subtract Conditional 32 Bits"
TMS28_subl:       "Subtract 32-bit value"
TMS28_subr:       "Reverse-subtract specified location from AX"
TMS28_subrl:      "Reverse-subtract specified location from ACC"
TMS28_subu:       "Subtract unsigned 16-bit value"
TMS28_subul:      "Subtract unsigned 32-bit value"
TMS28_sxtb:       "Sign extend LSB of AX reg into MSB"
TMS28_tbit:       "Test specified bit"
TMS28_tclr:       "Test and clear specified bit"
TMS28_test:       "Test and set specified bit"
TMS28_trap:       "Software trap"
TMS28_tset:       "Test and set specified bit"
TMS28_uout:       "Unprotected output data to I/O port"
TMS28_xb:         "C2xLP source-compatible indirect branch"
TMS28_xbanz:      "C2xLP source-compatible branch if ARn is not zero"
TMS28_xcall:      "C2xLP source-compatible function call"
TMS28_xmac:       "C2xLP source-compatible multiply and accumulate"
TMS28_xmacd:      "C2xLP source-compatible multiply and accumulate with data move"
TMS28_xor:        "Bitwise exclusive OR"
TMS28_xorb:       "Bitwise exclusive OR 8-bit value"
TMS28_xpread:     "C2xLP source-compatible program read"
TMS28_xpwrite:    "C2xLP source-compatible program write"
TMS28_xret:       "C2xLP source-compatible conditional return"
TMS28_xretc:      "C2xLP source-compatible conditional return"
TMS28_zalr:       "Zero AL and load AH with rounding"
TMS28_zap:        "Clear overflow counter"
TMS28_zapa:       "Zero accumulator and P register"
