
cmd ?			// switch by instruction

NN_in: {		// "input from port" instruction
#include "portin.cmt"
}

NN_out: {		// "output to port" instruction
#include "portout.cmt"
}

NN_int: {			// Interrupts
//  filetype ?
//  f_EXE || f_COM || f_BIN || f_DRV || f_WIN || f_OMF || f_LE || f_PE: {
#include "int.cmt"
//  }
}

NN_aaa:                 "ASCII Adjust after Addition"
NN_aad:                 "ASCII Adjust AX before Division"
NN_aam:                 "ASCII Adjust AX after Multiply"
NN_aas:                 "ASCII Adjust AL after Subtraction"
NN_adc:                 "Add with Carry"
NN_add:                 "Add"
NN_and:                 "Logical AND"
NN_arpl:                "Adjust RPL Field of Selector"
NN_bound:               "Check Array Index Against Bounds"
NN_bsf:                 "Bit Scan Forward"
NN_bsr:                 "Bit Scan Reverse"
NN_bt:                  "Bit Test"
NN_btc:                 "Bit Test and Complement"
NN_btr:                 "Bit Test and Reset"
NN_bts:                 "Bit Test and Set"
NN_call:                "Call Procedure"
NN_callfi:              "Indirect Call Far Procedure"
NN_callni:              "Indirect Call Near Procedure"
NN_cbw:                 "AL -> AX (with sign)"
NN_cwde:                "AX -> EAX (with sign)"
NN_cdqe:                "EAX -> RAX (with sign)"
NN_clc:                 "Clear Carry Flag"
NN_cld:                 "Clear Direction Flag"
NN_cli:                 "Clear Interrupt Flag"
NN_clts:                "Clear Task-Switched Flag in CR0"
NN_cmc:                 "Complement Carry Flag"
NN_cmp:                 "Compare Two Operands"
NN_cmps:                "Compare Strings"
NN_cwd:                 "AX -> DX:AX (with sign)"
NN_cdq:                 "EAX -> EDX:EAX (with sign)"
NN_cqo:                 "RAX -> RDX:RAX (with sign)"
NN_daa:                 "Decimal Adjust AL after Addition"
NN_das:                 "Decimal Adjust AL after Subtraction"
NN_dec:                 "Decrement by 1"
NN_div:                 "Unsigned Divide"
NN_enterw:              "Make Stack Frame for Procedure Parameters"
NN_enter:               "Make Stack Frame for Procedure Parameters"
NN_enterd:              "Make Stack Frame for Procedure Parameters"
NN_enterq:              "Make Stack Frame for Procedure Parameters"
NN_hlt:                 "Halt"
NN_idiv:                "Signed Divide"
NN_imul:                "Signed Multiply"
NN_inc:                 "Increment by 1"
NN_ins:                 "Input Byte(s) from Port to String"
NN_into:                "Call to Interrupt Procedure if Overflow Flag = 1"
NN_int3:                "Trap to Debugger"
NN_iretw:               "Interrupt Return"
NN_iret:                "Interrupt Return"
NN_iretd:               "Interrupt Return (use32)"
NN_iretq:               "Interrupt Return (use64)"
NN_ja:                  "Jump if Above (CF=0 & ZF=0)"
NN_jae:                 "Jump if Above or Equal (CF=0)"
NN_jb:                  "Jump if Below (CF=1)"
NN_jbe:                 "Jump if Below or Equal (CF=1 | ZF=1)"
NN_jc:                  "Jump if Carry (CF=1)"
NN_jcxz:                "Jump if CX is 0"
NN_jecxz:               "Jump if ECX is 0"
NN_jrcxz:               "Jump if RCX is 0"
NN_je:                  "Jump if Equal (ZF=1)"
NN_jg:                  "Jump if Greater (ZF=0 & SF=OF)"
NN_jge:                 "Jump if Greater or Equal (SF=OF)"
NN_jl:                  "Jump if Less (SF!=OF)"
NN_jle:                 "Jump if Less or Equal (ZF=1 | SF!=OF)"
NN_jna:                 "Jump if Not Above (CF=1 | ZF=1)"
NN_jnae:                "Jump if Not Above or Equal (CF=1)"
NN_jnb:                 "Jump if Not Below (CF=0)"
NN_jnbe:                "Jump if Not Below or Equal (CF=0 & ZF=0)"
NN_jnc:                 "Jump if Not Carry (CF=0)"
NN_jne:                 "Jump if Not Equal (ZF=0)"
NN_jng:                 "Jump if Not Greater (ZF=1 | SF!=OF)"
NN_jnge:                "Jump if Not Greater or Equal (ZF=1)"
NN_jnl:                 "Jump if Not Less (SF=OF)"
NN_jnle:                "Jump if Not Less or Equal (ZF=0 & SF=OF)"
NN_jno:                 "Jump if Not Overflow (OF=0)"
NN_jnp:                 "Jump if Not Parity (PF=0)"
NN_jns:                 "Jump if Not Sign (SF=0)"
NN_jnz:                 "Jump if Not Zero (ZF=0)"
NN_jo:                  "Jump if Overflow (OF=1)"
NN_jp:                  "Jump if Parity (PF=1)"
NN_jpe:                 "Jump if Parity Even (PF=1)"
NN_jpo:                 "Jump if Parity Odd  (PF=0)"
NN_js:                  "Jump if Sign (SF=1)"
NN_jz:                  "Jump if Zero (ZF=1)"
NN_jmp:                 "Jump"
NN_jmpfi:               "Indirect Far Jump"
NN_jmpni:               "Indirect Near Jump"
NN_jmpshort:            "Jump Short"
NN_lahf:                "Load Flags into AH Register"
NN_lar:                 "Load Access Right Byte"
NN_lea:                 "Load Effective Address"
NN_leavew:              "High Level Procedure Exit"
NN_leave:               "High Level Procedure Exit"
NN_leaved:              "High Level Procedure Exit"
NN_leaveq:              "High Level Procedure Exit"
NN_lgdt:                "Load Global Descriptor Table Register"
NN_lidt:                "Load Interrupt Descriptor Table Register"
NN_lgs:                 "Load Full Pointer to GS:xx"
NN_lss:                 "Load Full Pointer to SS:xx"
NN_lds:                 "Load Full Pointer to DS:xx"
NN_les:                 "Load Full Pointer to ES:xx"
NN_lfs:                 "Load Full Pointer to FS:xx"
NN_lldt:                "Load Local Descriptor Table Register"
NN_lmsw:                "Load Machine Status Word"
NN_lock:                "Assert LOCK# Signal Prefix"
NN_lods:                "Load String"
NN_loopw:               "Loop while ECX != 0"
NN_loop:                "Loop while CX != 0"
NN_loopd:               "Loop while ECX != 0"
NN_loopq:               "Loop while RCX != 0"
NN_loopwe:              "Loop while CX != 0 and ZF=1"
NN_loope:               "Loop while rCX != 0 and ZF=1"
NN_loopde:              "Loop while ECX != 0 and ZF=1"
NN_loopqe:              "Loop while RCX != 0 and ZF=1"
NN_loopwne:             "Loop while CX != 0 and ZF=0"
NN_loopne:              "Loop while rCX != 0 and ZF=0"
NN_loopdne:             "Loop while ECX != 0 and ZF=0"
NN_loopqne:             "Loop while RCX != 0 and ZF=0"
NN_lsl:                 "Load Segment Limit"
NN_ltr:                 "Load Task Register"
//NN_mov:                 "Move Data"
NN_movsp:               "Move to/from Special Registers"
NN_movs:                "Move Byte(s) from String to String"
NN_movsx:               "Move with Sign-Extend"
NN_movzx:               "Move with Zero-Extend"
NN_mul:                 "Unsigned Multiplication of AL or AX"
NN_neg:                 "Two's Complement Negation"
NN_nop:                 "No Operation"
NN_not:                 "One's Complement Negation"
NN_or:                  "Logical Inclusive OR"
NN_outs:                "Output Byte(s) to Port"
//NN_pop:                 "Pop a word from the Stack"
NN_popaw:               "Pop all General Registers"
NN_popa:                "Pop all General Registers"
NN_popad:               "Pop all General Registers (use32)"
NN_popaq:               "Pop all General Registers (use64)"
NN_popfw:               "Pop Stack into Flags Register"
NN_popf:                "Pop Stack into Flags Register"
NN_popfd:               "Pop Stack into Eflags Register"
NN_popfq:               "Pop Stack into Rflags Register"
//NN_push:                "Push Operand onto the Stack"
NN_pushaw:              "Push all General Registers"
NN_pusha:               "Push all General Registers"
NN_pushad:              "Push all General Registers (use32)"
NN_pushaq:              "Push all General Registers (use64)"
NN_pushfw:              "Push Flags Register onto the Stack"
NN_pushf:               "Push Flags Register onto the Stack"
NN_pushfd:              "Push Flags Register onto the Stack (use32)"
NN_pushfq:              "Push Flags Register onto the Stack (use64)"
NN_rcl:                 "Rotate Through Carry Left"
NN_rcr:                 "Rotate Through Carry Right"
NN_rol:                 "Rotate Left"
NN_ror:                 "Rotate Right"
NN_rep:                 "Repeat String Operation"
NN_repe:                "Repeat String Operation while ZF=1"
NN_repne:               "Repeat String Operation while ZF=0"
NN_retn:                "Return Near from Procedure"
NN_retf:                "Return Far from Procedure"
NN_sahf:                "Store AH into Flags Register"
NN_sal:                 "Shift Arithmetic Left"
NN_sar:                 "Shift Arithmetic Right"
NN_shl:                 "Shift Logical Left"
NN_shr:                 "Shift Logical Right"
NN_sbb:                 "Integer Subtraction with Borrow"
NN_scas:                "Compare String"
NN_seta:                "Set Byte if Above (CF=0 & ZF=0)"
NN_setae:               "Set Byte if Above or Equal (CF=0)"
NN_setb:                "Set Byte if Below (CF=1)"
NN_setbe:               "Set Byte if Below or Equal (CF=1 | ZF=1)"
NN_setc:                "Set Byte if Carry (CF=1)"
NN_sete:                "Set Byte if Equal (ZF=1)"
NN_setg:                "Set Byte if Greater (ZF=0 & SF=OF)"
NN_setge:               "Set Byte if Greater or Equal (SF=OF)"
NN_setl:                "Set Byte if Less (SF!=OF)"
NN_setle:               "Set Byte if Less or Equal (ZF=1 | SF!=OF)"
NN_setna:               "Set Byte if Not Above (CF=1 | ZF=1)"
NN_setnae:              "Set Byte if Not Above or Equal (CF=1)"
NN_setnb:               "Set Byte if Not Below (CF=0)"
NN_setnbe:              "Set Byte if Not Below or Equal (CF=0 & ZF=0)"
NN_setnc:               "Set Byte if Not Carry (CF=0)"
NN_setne:               "Set Byte if Not Equal (ZF=0)"
NN_setng:               "Set Byte if Not Greater (ZF=1 | SF!=OF)"
NN_setnge:              "Set Byte if Not Greater or Equal (ZF=1)"
NN_setnl:               "Set Byte if Not Less (SF=OF)"
NN_setnle:              "Set Byte if Not Less or Equal (ZF=0 & SF=OF)"
NN_setno:               "Set Byte if Not Overflow (OF=0)"
NN_setnp:               "Set Byte if Not Parity (PF=0)"
NN_setns:               "Set Byte if Not Sign (SF=0)"
NN_setnz:               "Set Byte if Not Zero (ZF=0)"
NN_seto:                "Set Byte if Overflow (OF=1)"
NN_setp:                "Set Byte if Parity (PF=1)"
NN_setpe:               "Set Byte if Parity Even (PF=1)"
NN_setpo:               "Set Byte if Parity Odd  (PF=0)"
NN_sets:                "Set Byte if Sign (SF=1)"
NN_setz:                "Set Byte if Zero (ZF=1)"
NN_sgdt:                "Store Global Descriptor Table Register"
NN_sidt:                "Store Interrupt Descriptor Table Register"
NN_shld:                "Double Precision Shift Left"
NN_shrd:                "Double Precision Shift Right"
NN_sldt:                "Store Local Descriptor Table Register"
NN_smsw:                "Store Machine Status Word"
NN_stc:                 "Set Carry Flag"
NN_std:                 "Set Direction Flag"
NN_sti:                 "Set Interrupt Flag"
NN_stos:                "Store String"
NN_str:                 "Store Task Register"
NN_sub:                 "Integer Subtraction"
NN_test:                "Logical Compare"
NN_verr:                "Verify a Segment for Reading"
NN_verw:                "Verify a Segment for Writing"
NN_wait:                "Wait until BUSY# Pin is Inactive (HIGH)"
NN_xchg:                "Exchange Register/Memory with Register"
NN_xlat:                "Table Lookup Translation"
NN_xor:                 "Logical Exclusive OR"

//
//      486 instructions
//

NN_cmpxchg:             "Compare and Exchange"
NN_bswap:               "Swap bytes"
NN_xadd:                "t<-dest; dest<-src+dest; src<-t"
NN_invd:                "Invalidate Data Cache"
NN_wbinvd:              "Invalidate Data Cache (write changes)"
NN_invlpg:              "Invalidate TLB entry"

//
//      Pentium instructions
//

NN_rdmsr:               "Read Machine Status Register"
NN_wrmsr:               "Write Machine Status Register"
NN_cpuid:               "Get CPU ID"
NN_cmpxchg8b:           "Compare and Exchange Eight Bytes"
NN_rdtsc:               "Read Time Stamp Counter"
NN_rsm:                 "Resume from System Management Mode"

//
//      Pentium Pro instructions
//

NN_cmova:               "Move if Above (CF=0 & ZF=0)"
NN_cmovb:               "Move if Below (CF=1)"
NN_cmovbe:              "Move if Below or Equal (CF=1 | ZF=1)"
NN_cmovg:               "Move if Greater (ZF=0 & SF=OF)"
NN_cmovge:              "Move if Greater or Equal (SF=OF)"
NN_cmovl:               "Move if Less (SF!=OF)"
NN_cmovle:              "Move if Less or Equal (ZF=1 | SF!=OF)"
NN_cmovnb:              "Move if Not Below (CF=0)"
NN_cmovno:              "Move if Not Overflow (OF=0)"
NN_cmovnp:              "Move if Not Parity (PF=0)"
NN_cmovns:              "Move if Not Sign (SF=0)"
NN_cmovnz:              "Move if Not Zero (ZF=0)"
NN_cmovo:               "Move if Overflow (OF=1)"
NN_cmovp:               "Move if Parity (PF=1)"
NN_cmovs:               "Move if Sign (SF=1)"
NN_cmovz:               "Move if Zero (ZF=1)"
NN_fcmovb:              "Floating Move if Below"
NN_fcmove:              "Floating Move if Equal"
NN_fcmovbe:             "Floating Move if Below or Equal"
NN_fcmovu:              "Floating Move if Unordered"
NN_fcmovnb:             "Floating Move if Not Below"
NN_fcmovne:             "Floating Move if Not Equal"
NN_fcmovnbe:            "Floating Move if Not Below or Equal"
NN_fcmovnu:             "Floating Move if Not Unordered"
NN_fcomi:               "FP Compare, result in EFLAGS"
NN_fucomi:              "FP Unordered Compare, result in EFLAGS"
NN_fcomip:              "FP Compare, result in EFLAGS, pop stack"
NN_fucomip:             "FP Unordered Compare, result in EFLAGS, pop stack"
NN_rdpmc:               "Read Performance Monitor Counter"

//
//      FPP instructuions
//

NN_fld:                 "Load Real"
NN_fst:                 "Store Real"
NN_fstp:                "Store Real and Pop"
NN_fxch:                "Exchange Registers"
NN_fild:                "Load Integer"
NN_fist:                "Store Integer"
NN_fistp:               "Store Integer and Pop"
NN_fbld:                "Load BCD"
NN_fbstp:               "Store BCD and Pop"
NN_fadd:                "Add Real"
NN_faddp:               "Add Real and Pop"
NN_fiadd:               "Add Integer"
NN_fsub:                "Subtract Real"
NN_fsubp:               "Subtract Real and Pop"
NN_fisub:               "Subtract Integer"
NN_fsubr:               "Subtract Real Reversed"
NN_fsubrp:              "Subtract Real Reversed and Pop"
NN_fisubr:              "Subtract Integer Reversed"
NN_fmul:                "Multiply Real"
NN_fmulp:               "Multiply Real and Pop"
NN_fimul:               "Multiply Integer"
NN_fdiv:                "Divide Real"
NN_fdivp:               "Divide Real and Pop"
NN_fidiv:               "Divide Integer"
NN_fdivr:               "Divide Real Reversed"
NN_fdivrp:              "Divide Real Reversed and Pop"
NN_fidivr:              "Divide Integer Reversed"
NN_fsqrt:               "Square Root"
NN_fscale:              "Scale:  st(0) <- st(0) * 2^st(1)"
NN_fprem:               "Partial Remainder"
NN_frndint:             "Round to Integer"
NN_fxtract:             "Extract exponent and significand"
NN_fabs:                "Absolute value"
NN_fchs:                "Change Sign"
NN_fcom:                "Compare Real"
NN_fcomp:               "Compare Real and Pop"
NN_fcompp:              "Compare Real and Pop Twice"
NN_ficom:               "Compare Integer"
NN_ficomp:              "Compare Integer and Pop"
NN_ftst:                "Test"
NN_fxam:                "Examine"
NN_fptan:               "Partial tangent"
NN_fpatan:              "Partial arctangent"
NN_f2xm1:               "2^x - 1"
NN_fyl2x:               "Y * lg2(X)"
NN_fyl2xp1:             "Y * lg2(X+1)"
NN_fldz:                "Load +0.0"
NN_fld1:                "Load +1.0"
NN_fldpi:               "Load PI=3.14..."
NN_fldl2t:              "Load lg2(10)"
NN_fldl2e:              "Load lg2(e)"
NN_fldlg2:              "Load lg10(2)"
NN_fldln2:              "Load ln(2)"
NN_finit:               "Initialize Processor"
NN_fninit:              "Initialize Processor (no wait)"
NN_fsetpm:              "Set Protected Mode"
NN_fldcw:               "Load Control Word"
NN_fstcw:               "Store Control Word"
NN_fnstcw:              "Store Control Word (no wait)"
NN_fstsw:               "Store Status Word"
NN_fnstsw:              "Store Status Word (no wait)"
NN_fclex:               "Clear Exceptions"
NN_fnclex:              "Clear Exceptions (no wait)"
NN_fstenv:              "Store Environment"
NN_fnstenv:             "Store Environment (no wait)"
NN_fldenv:              "Load Environment"
NN_fsave:               "Save State"
NN_fnsave:              "Save State (no wait)"
NN_frstor:              "Restore State"
NN_fincstp:             "Increment Stack Pointer"
NN_fdecstp:             "Decrement Stack Pointer"
NN_ffree:               "Free Register"
NN_fnop:                "No Operation"
NN_feni:                "(8087 only)"
NN_fneni:               "(no wait) (8087 only)"
NN_fdisi:               "(8087 only)"
NN_fndisi:              "(no wait) (8087 only)"

//
//      80387 instructions
//

NN_fprem1:              "Partial Remainder ( < half )"
NN_fsincos:             "t<-cos(st); st<-sin(st); push t"
NN_fsin:                "Sine"
NN_fcos:                "Cosine"
NN_fucom:               "Compare Unordered Real"
NN_fucomp:              "Compare Unordered Real and Pop"
NN_fucompp:             "Compare Unordered Real and Pop Twice"

//
//      Instructions added 28.02.96
//

NN_setalc:              "Set AL to Carry Flag"
NN_svdc:                "Save Register and Descriptor"
NN_rsdc:                "Restore Register and Descriptor"
NN_svldt:               "Save LDTR and Descriptor"
NN_rsldt:               "Restore LDTR and Descriptor"
NN_svts:                "Save TR and Descriptor"
NN_rsts:                "Restore TR and Descriptor"
NN_icebp:               "ICE Break Point"
NN_loadall:             "Load the entire CPU state from ES:EDI"

//
//      MMX instructions
//

NN_emms:                "Empty MMX state"
NN_movd:                "Move 32 bits"
NN_movq:                "Move 64 bits"
NN_packsswb:            "Pack with Signed Saturation (Word->Byte)"
NN_packssdw:            "Pack with Signed Saturation (Dword->Word)"
NN_packuswb:            "Pack with Unsigned Saturation (Word->Byte)"
NN_paddb:               "Packed Add Byte"
NN_paddw:               "Packed Add Word"
NN_paddd:               "Packed Add Dword"
NN_paddsb:              "Packed Add with Saturation (Byte)"
NN_paddsw:              "Packed Add with Saturation (Word)"
NN_paddusb:             "Packed Add Unsigned with Saturation (Byte)"
NN_paddusw:             "Packed Add Unsigned with Saturation (Word)"
NN_pand:                "Bitwise Logical And"
NN_pandn:               "Bitwise Logical And Not"
NN_pcmpeqb:             "Packed Compare for Equal (Byte)"
NN_pcmpeqw:             "Packed Compare for Equal (Word)"
NN_pcmpeqd:             "Packed Compare for Equal (Dword)"
NN_pcmpgtb:             "Packed Compare for Greater Than (Byte)"
NN_pcmpgtw:             "Packed Compare for Greater Than (Word)"
NN_pcmpgtd:             "Packed Compare for Greater Than (Dword)"
NN_pmaddwd:             "Packed Multiply and Add"
NN_pmulhw:              "Packed Multiply High"
NN_pmullw:              "Packed Multiply Low"
NN_por:                 "Bitwise Logical Or"
NN_psllw:               "Packed Shift Left Logical (Word)"
NN_pslld:               "Packed Shift Left Logical (Dword)"
NN_psllq:               "Packed Shift Left Logical (Qword)"
NN_psraw:               "Packed Shift Right Arithmetic (Word)"
NN_psrad:               "Packed Shift Right Arithmetic (Dword)"
NN_psrlw:               "Packed Shift Right Logical (Word)"
NN_psrld:               "Packed Shift Right Logical (Dword)"
NN_psrlq:               "Packed Shift Right Logical (Qword)"
NN_psubb:               "Packed Subtract Byte"
NN_psubw:               "Packed Subtract Word"
NN_psubd:               "Packed Subtract Dword"
NN_psubsb:              "Packed Subtract with Saturation (Byte)"
NN_psubsw:              "Packed Subtract with Saturation (Word)"
NN_psubusb:             "Packed Subtract Unsigned with Saturation (Byte)"
NN_psubusw:             "Packed Subtract Unsigned with Saturation (Word)"
NN_punpckhbw:           "Unpack High Packed Data (Byte->Word)"
NN_punpckhwd:           "Unpack High Packed Data (Word->Dword)"
NN_punpckhdq:           "Unpack High Packed Data (Dword->Qword)"
NN_punpcklbw:           "Unpack Low Packed Data (Byte->Word)"
NN_punpcklwd:           "Unpack Low Packed Data (Word->Dword)"
NN_punpckldq:           "Unpack Low Packed Data (Dword->Qword)"
NN_pxor:                "Bitwise Logical Exclusive Or"

//
//      Undocumented Deschutes processor instructions
//

NN_fxsave:              "Fast save FP context"
NN_fxrstor:             "Fast restore FP context"

//      Pentium II instructions

NN_sysenter:            "Fast Transition to System Call Entry Point"
NN_sysexit:             "Fast Transition from System Call Entry Point"

//      3DNow! instructions

NN_pavgusb:             "Packed 8-bit Unsigned Integer Averaging"
NN_pfadd:               "Packed Floating-Point Addition"
NN_pfsub:               "Packed Floating-Point Subtraction"
NN_pfsubr:              "Packed Floating-Point Reverse Subtraction"
NN_pfacc:               "Packed Floating-Point Accumulate"
NN_pfcmpge:             "Packed Floating-Point Comparison, Greater or Equal"
NN_pfcmpgt:             "Packed Floating-Point Comparison, Greater"
NN_pfcmpeq:             "Packed Floating-Point Comparison, Equal"
NN_pfmin:               "Packed Floating-Point Minimum"
NN_pfmax:               "Packed Floating-Point Maximum"
NN_pi2fd:               "Packed 32-bit Integer to Floating-Point"
NN_pf2id:               "Packed Floating-Point to 32-bit Integer"
NN_pfrcp:               "Packed Floating-Point Reciprocal Approximation"
NN_pfrsqrt:             "Packed Floating-Point Reciprocal Square Root Approximation"
NN_pfmul:               "Packed Floating-Point Multiplication"
NN_pfrcpit1:            "Packed Floating-Point Reciprocal First Iteration Step"
NN_pfrsqit1:            "Packed Floating-Point Reciprocal Square Root First Iteration Step"
NN_pfrcpit2:            "Packed Floating-Point Reciprocal Second Iteration Step"
NN_pmulhrw:             "Packed Floating-Point 16-bit Integer Multiply with rounding"
NN_femms:               "Faster entry/exit of the MMX or floating-point state"
NN_prefetch:            "Prefetch at least a 32-byte line into L1 data cache"
NN_prefetchw:           "Prefetch processor cache line into L1 data cache (mark as modified)"


//      Pentium III instructions

NN_addps:               "Packed Single-FP Add"
NN_addss:               "Scalar Single-FP Add"
NN_andnps:              "Bitwise Logical And Not for Single-FP"
NN_andps:               "Bitwise Logical And for Single-FP"
NN_cmpps:               "Packed Single-FP Compare"
NN_cmpss:               "Scalar Single-FP Compare"
NN_comiss:              "Scalar Ordered Single-FP Compare and Set EFLAGS"
NN_cvtpi2ps:            "Packed signed INT32 to Packed Single-FP conversion"
NN_cvtps2pi:            "Packed Single-FP to Packed INT32 conversion"
NN_cvtsi2ss:            "Scalar signed INT32 to Single-FP conversion"
NN_cvtss2si:            "Scalar Single-FP to signed INT32 conversion"
NN_cvttps2pi:           "Packed Single-FP to Packed INT32 conversion (truncate)"
NN_cvttss2si:           "Scalar Single-FP to signed INT32 conversion (truncate)"
NN_divps:               "Packed Single-FP Divide"
NN_divss:               "Scalar Single-FP Divide"
NN_ldmxcsr:             "Load Streaming SIMD Extensions Technology Control/Status Register"
NN_maxps:               "Packed Single-FP Maximum"
NN_maxss:               "Scalar Single-FP Maximum"
NN_minps:               "Packed Single-FP Minimum"
NN_minss:               "Scalar Single-FP Minimum"
NN_movaps:              "Move Aligned Four Packed Single-FP"
NN_movhlps:             "Move High to Low Packed Single-FP"
NN_movhps:              "Move High Packed Single-FP"
NN_movlhps:             "Move Low to High Packed Single-FP"
NN_movlps:              "Move Low Packed Single-FP"
NN_movmskps:            "Move Mask to Register"
NN_movss:               "Move Scalar Single-FP"
NN_movups:              "Move Unaligned Four Packed Single-FP"
NN_mulps:               "Packed Single-FP Multiply"
NN_mulss:               "Scalar Single-FP Multiply"
NN_orps:                "Bitwise Logical OR for Single-FP Data"
NN_rcpps:               "Packed Single-FP Reciprocal"
NN_rcpss:               "Scalar Single-FP Reciprocal"
NN_rsqrtps:             "Packed Single-FP Square Root Reciprocal"
NN_rsqrtss:             "Scalar Single-FP Square Root Reciprocal"
NN_shufps:              "Shuffle Single-FP"
NN_sqrtps:              "Packed Single-FP Square Root"
NN_sqrtss:              "Scalar Single-FP Square Root"
NN_stmxcsr:             "Store Streaming SIMD Extensions Technology Control/Status Register"
NN_subps:               "Packed Single-FP Subtract"
NN_subss:               "Scalar Single-FP Subtract"
NN_ucomiss:             "Scalar Unordered Single-FP Compare and Set EFLAGS"
NN_unpckhps:            "Unpack High Packed Single-FP Data"
NN_unpcklps:            "Unpack Low Packed Single-FP Data"
NN_xorps:               "Bitwise Logical XOR for Single-FP Data"
NN_pavgb:               "Packed Average (Byte)"
NN_pavgw:               "Packed Average (Word)"
NN_pextrw:              "Extract Word"
NN_pinsrw:              "Insert Word"
NN_pmaxsw:              "Packed Signed Integer Word Maximum"
NN_pmaxub:              "Packed Unsigned Integer Byte Maximum"
NN_pminsw:              "Packed Signed Integer Word Minimum"
NN_pminub:              "Packed Unsigned Integer Byte Minimum"
NN_pmovmskb:            "Move Byte Mask to Integer"
NN_pmulhuw:             "Packed Multiply High Unsigned"
NN_psadbw:              "Packed Sum of Absolute Differences"
NN_pshufw:              "Packed Shuffle Word"
NN_maskmovq:            "Byte Mask write"
NN_movntps:             "Move Aligned Four Packed Single-FP Non Temporal"
NN_movntq:              "Move 64 Bits Non Temporal"
NN_prefetcht0:          "Prefetch to all cache levels"
NN_prefetcht1:          "Prefetch to all cache levels"
NN_prefetcht2:          "Prefetch to L2 cache"
NN_prefetchnta:         "Prefetch to L1 cache"
NN_sfence:              "Store Fence"

// Pentium III Pseudo instructions

NN_cmpeqps:             "Packed Single-FP Compare EQ"
NN_cmpltps:             "Packed Single-FP Compare LT"
NN_cmpleps:             "Packed Single-FP Compare LE"
NN_cmpunordps:          "Packed Single-FP Compare UNORD"
NN_cmpneqps:            "Packed Single-FP Compare NOT EQ"
NN_cmpnltps:            "Packed Single-FP Compare NOT LT"
NN_cmpnleps:            "Packed Single-FP Compare NOT LE"
NN_cmpordps:            "Packed Single-FP Compare ORDERED"
NN_cmpeqss:             "Scalar Single-FP Compare EQ"
NN_cmpltss:             "Scalar Single-FP Compare LT"
NN_cmpless:             "Scalar Single-FP Compare LE"
NN_cmpunordss:          "Scalar Single-FP Compare UNORD"
NN_cmpneqss:            "Scalar Single-FP Compare NOT EQ"
NN_cmpnltss:            "Scalar Single-FP Compare NOT LT"
NN_cmpnless:            "Scalar Single-FP Compare NOT LE"
NN_cmpordss:            "Scalar Single-FP Compare ORDERED"

// AMD K7 instructions

NN_pf2iw:               "Packed Floating-Point to Integer with Sign Extend"
NN_pfnacc:              "Packed Floating-Point Negative Accumulate"
NN_pfpnacc:             "Packed Floating-Point Mixed Positive-Negative Accumulate"
NN_pi2fw:               "Packed 16-bit Integer to Floating-Point"
NN_pswapd:              "Packed Swap Double Word"

// Undocumented FP instructions (thanks to norbert.juffa@amd.com)

NN_fstp1:               "Alias of Store Real and Pop"
NN_fcom2:               "Alias of Compare Real"
NN_fcomp3:              "Alias of Compare Real and Pop"
NN_fxch4:               "Alias of Exchange Registers"
NN_fcomp5:              "Alias of Compare Real and Pop"
NN_ffreep:              "Free Register and Pop"
NN_fxch7:               "Alias of Exchange Registers"
NN_fstp8:               "Alias of Store Real and Pop"
NN_fstp9:               "Alias of Store Real and Pop"

// Pentium 4 instructions

NN_addpd:               "Add Packed Double-Precision Floating-Point Values"
NN_addsd:               "Add Scalar Double-Precision Floating-Point Values"
NN_andnpd:              "Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values"
NN_andpd:               "Bitwise Logical AND of Packed Double-Precision Floating-Point Values"
NN_clflush:             "Flush Cache Line"
NN_cmppd:               "Compare Packed Double-Precision Floating-Point Values"
NN_cmpsd:               "Compare Scalar Double-Precision Floating-Point Values"
NN_comisd:              "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS"
NN_cvtdq2pd:            "Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values"
NN_cvtdq2ps:            "Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values"
NN_cvtpd2dq:            "Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers"
NN_cvtpd2pi:            "Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers"
NN_cvtpd2ps:            "Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values"
NN_cvtpi2pd:            "Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values"
NN_cvtps2dq:            "Convert Packed Single-Precision Floating-Point Values to Packed Doubleword Integers"
NN_cvtps2pd:            "Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values"
NN_cvtsd2si:            "Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer"
NN_cvtsd2ss:            "Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value"
NN_cvtsi2sd:            "Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value"
NN_cvtss2sd:            "Covert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value"
NN_cvttpd2dq:           "Convert With Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers"
NN_cvttpd2pi:           "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers"
NN_cvttps2dq:           "Convert With Truncation Packed Single-Precision Floating-Point Values to Packed Doubleword Integers"
NN_cvttsd2si:           "Convert with Truncation Scalar Double-Precision Floating-Point Value to Doubleword Integer"
NN_divpd:               "Divide Packed Double-Precision Floating-Point Values"
NN_divsd:               "Divide Scalar Double-Precision Floating-Point Values"
NN_lfence:              "Load Fence"
NN_maskmovdqu:          "Store Selected Bytes of Double Quadword"
NN_maxpd:               "Return Maximum Packed Double-Precision Floating-Point Values"
NN_maxsd:               "Return Maximum Scalar Double-Precision Floating-Point Value"
NN_mfence:              "Memory Fence"
NN_minpd:               "Return Minimum Packed Double-Precision Floating-Point Values"
NN_minsd:               "Return Minimum Scalar Double-Precision Floating-Point Value"
NN_movapd:              "Move Aligned Packed Double-Precision Floating-Point Values"
NN_movdq2q:             "Move Quadword from XMM to MMX Register"
NN_movdqa:              "Move Aligned Double Quadword"
NN_movdqu:              "Move Unaligned Double Quadword"
NN_movhpd:              "Move High Packed Double-Precision Floating-Point Values"
NN_movlpd:              "Move Low Packed Double-Precision Floating-Point Values"
NN_movmskpd:            "Extract Packed Double-Precision Floating-Point Sign Mask"
NN_movntdq:             "Store Double Quadword Using Non-Temporal Hint"
NN_movnti:              "Store Doubleword Using Non-Temporal Hint"
NN_movntpd:             "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint"
NN_movq2dq:             "Move Quadword from MMX to XMM Register"
NN_movsd:               "Move Scalar Double-Precision Floating-Point Values"
NN_movupd:              "Move Unaligned Packed Double-Precision Floating-Point Values"
NN_mulpd:               "Multiply Packed Double-Precision Floating-Point Values"
NN_mulsd:               "Multiply Scalar Double-Precision Floating-Point Values"
NN_orpd:                "Bitwise Logical OR of Double-Precision Floating-Point Values"
NN_paddq:               "Add Packed Quadword Integers"
NN_pause:               "Spin Loop Hint"
NN_pmuludq:             "Multiply Packed Unsigned Doubleword Integers"
NN_pshufd:              "Shuffle Packed Doublewords"
NN_pshufhw:             "Shuffle Packed High Words"
NN_pshuflw:             "Shuffle Packed Low Words"
NN_pslldq:              "Shift Double Quadword Left Logical"
NN_psrldq:              "Shift Double Quadword Right Logical"
NN_psubq:               "Subtract Packed Quadword Integers"
NN_punpckhqdq:          "Unpack High Data"
NN_punpcklqdq:          "Unpack Low Data"
NN_shufpd:              "Shuffle Packed Double-Precision Floating-Point Values"
NN_sqrtpd:              "Compute Square Roots of Packed Double-Precision Floating-Point Values"
NN_sqrtsd:              "Compute Square Rootof Scalar Double-Precision Floating-Point Value"
NN_subpd:               "Subtract Packed Double-Precision Floating-Point Values"
NN_subsd:               "Subtract Scalar Double-Precision Floating-Point Values"
NN_ucomisd:             "Unordered Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS"
NN_unpckhpd:            "Unpack and Interleave High Packed Double-Precision Floating-Point Values"
NN_unpcklpd:            "Unpack and Interleave Low Packed Double-Precision Floating-Point Values"
NN_xorpd:               "Bitwise Logical OR of Double-Precision Floating-Point Values"

// AMD syscall/sysret instructions
NN_syscall: {                   // x64 syscalls
    filetype ?
    f_ELF :
#include "linux64.cmt"
    other:  "Low latency system call"
}
NN_sysret:              "Return from system call"

// AMD64 instructions

NN_swapgs:              "Exchange GS base with KernelGSBase MSR"

// New Pentium instructions

NN_movddup:             "Move One Double-FP and Duplicate"
NN_movshdup:            "Move Packed Single-FP High and Duplicate"
NN_movsldup:            "Move Packed Single-FP Low and Duplicate"

// Missing AMD64 instructions

NN_movsxd:              "Move with Sign-Extend Doubleword"
NN_cmpxchg16b:          "Compare and Exchange 16 Bytes"

// SSE3 instructions

NN_addsubpd:            "Add /Sub packed DP FP numbers"
NN_addsubps:            "Add /Sub packed SP FP numbers"
NN_haddpd:              "Add horizontally packed DP FP numbers"
NN_haddps:              "Add horizontally packed SP FP numbers"
NN_hsubpd:              "Sub horizontally packed DP FP numbers"
NN_hsubps:              "Sub horizontally packed SP FP numbers"
NN_monitor:             "Set up a linear address range to be monitored by hardware"
NN_mwait:               "Wait until write-back store performed within the range\n"
                        "specified by the MONITOR instruction"
NN_fisttp:              "Store ST in intXX (chop) and pop"
NN_lddqu:               "Load unaligned integer 128-bit"

// SSSE3 instructions

NN_psignb:              "Packed SIGN Byte"
NN_psignw:              "Packed SIGN Word"
NN_psignd:              "Packed SIGN Doubleword"
NN_pshufb:              "Packed Shuffle Bytes"
NN_pmulhrsw:            "Packed Multiply High with Round and Scale"
NN_pmaddubsw:           "Multiply and Add Packed Signed and Unsigned Bytes"
NN_phsubsw:             "Packed Horizontal Subtract and Saturate"
NN_phaddsw:             "Packed Horizontal Add and Saturate"
NN_phaddw:              "Packed Horizontal Add Word"
NN_phaddd:              "Packed Horizontal Add Doubleword"
NN_phsubw:              "Packed Horizontal Subtract Word"
NN_phsubd:              "Packed Horizontal Subtract Doubleword"
NN_palignr:             "Packed Align Right"
NN_pabsb:               "Packed Absolute Value Byte"
NN_pabsw:               "Packed Absolute Value Word"
NN_pabsd:               "Packed Absolute Value Doubleword"

// VMX instructions

NN_vmcall:              "Call to VM Monitor"
NN_vmclear:             "Clear Virtual Machine Control Structure"
NN_vmlaunch:            "Launch Virtual Machine"
NN_vmresume:            "Resume Virtual Machine"
NN_vmptrld:             "Load Pointer to Virtual Machine Control Structure"
NN_vmptrst:             "Store Pointer to Virtual Machine Control Structure"
NN_vmread:              "Read Field from Virtual Machine Control Structure"
NN_vmwrite:             "Write Field from Virtual Machine Control Structure"
NN_vmxoff:              "Leave VMX Operation"
NN_vmxon:               "Enter VMX Operation"

NN_ud2:                 "Undefined Instruction"

// Added with x86-64

NN_rdtscp:              "Read Time-Stamp Counter and Processor ID"

// Geode LX 3DNow! extensions

NN_pfrcpv:              "Reciprocal Approximation for a Pair of 32-bit Floats"
NN_pfrsqrtv:            "Reciprocal Square Root Approximation for a Pair of 32-bit Floats "

// SSE2 pseudoinstructions

NN_cmpeqpd:             "Packed Double-FP Compare EQ"
NN_cmpltpd:             "Packed Double-FP Compare LT"
NN_cmplepd:             "Packed Double-FP Compare LE"
NN_cmpunordpd:          "Packed Double-FP Compare UNORD"
NN_cmpneqpd:            "Packed Double-FP Compare NOT EQ"
NN_cmpnltpd:            "Packed Double-FP Compare NOT LT"
NN_cmpnlepd:            "Packed Double-FP Compare NOT LE"
NN_cmpordpd:            "Packed Double-FP Compare ORDERED"
NN_cmpeqsd:             "Scalar Double-FP Compare EQ"
NN_cmpltsd:             "Scalar Double-FP Compare LT"
NN_cmplesd:             "Scalar Double-FP Compare LE"
NN_cmpunordsd:          "Scalar Double-FP Compare UNORD"
NN_cmpneqsd:            "Scalar Double-FP Compare NOT EQ"
NN_cmpnltsd:            "Scalar Double-FP Compare NOT LT"
NN_cmpnlesd:            "Scalar Double-FP Compare NOT LE"
NN_cmpordsd:            "Scalar Double-FP Compare ORDERED"

// SSSE4.1 instructions

NN_blendpd:             "Blend Packed Double Precision Floating-Point Values"
NN_blendps:             "Blend Packed Single Precision Floating-Point Values"
NN_blendvpd:            "Variable Blend Packed Double Precision Floating-Point Values"
NN_blendvps:            "Variable Blend Packed Single Precision Floating-Point Values"
NN_dppd:                "Dot Product of Packed Double Precision Floating-Point Values"
NN_dpps:                "Dot Product of Packed Single Precision Floating-Point Values"
NN_extractps:           "Extract Packed Single Precision Floating-Point Value"
NN_insertps:            "Insert Packed Single Precision Floating-Point Value"
NN_movntdqa:            "Load Double Quadword Non-Temporal Aligned Hint"
NN_mpsadbw:             "Compute Multiple Packed Sums of Absolute Difference"
NN_packusdw:            "Pack with Unsigned Saturation"
NN_pblendvb:            "Variable Blend Packed Bytes"
NN_pblendw:             "Blend Packed Words"
NN_pcmpeqq:             "Compare Packed Qword Data for Equal"
NN_pextrb:              "Extract Byte"
NN_pextrd:              "Extract Dword"
NN_pextrq:              "Extract Qword"
//NN_pextrw:              "Extract Word"
NN_phminposuw:          "Packed Horizontal Word Minimum"
NN_pinsrb:              "Insert Byte"
NN_pinsrd:              "Insert Dword"
NN_pinsrq:              "Insert Qword"
NN_pmaxsb:              "Maximum of Packed Signed Byte Integers"
NN_pmaxsd:              "Maximum of Packed Signed Dword Integers"
NN_pmaxud:              "Maximum of Packed Unsigned Dword Integers"
NN_pmaxuw:              "Maximum of Packed Word Integers"
NN_pminsb:              "Minimum of Packed Signed Byte Integers"
NN_pminsd:              "Minimum of Packed Signed Dword Integers"
NN_pminud:              "Minimum of Packed Unsigned Dword Integers"
NN_pminuw:              "Minimum of Packed Word Integers"
NN_pmovsxbw:            "Packed Move with Sign Extend"
NN_pmovsxbd:            "Packed Move with Sign Extend"
NN_pmovsxbq:            "Packed Move with Sign Extend"
NN_pmovsxwd:            "Packed Move with Sign Extend"
NN_pmovsxwq:            "Packed Move with Sign Extend"
NN_pmovsxdq:            "Packed Move with Sign Extend"
NN_pmovzxbw:            "Packed Move with Zero Extend"
NN_pmovzxbd:            "Packed Move with Zero Extend"
NN_pmovzxbq:            "Packed Move with Zero Extend"
NN_pmovzxwd:            "Packed Move with Zero Extend"
NN_pmovzxwq:            "Packed Move with Zero Extend"
NN_pmovzxdq:            "Packed Move with Zero Extend"
NN_pmuldq:              "Multiply Packed Signed Dword Integers"
NN_pmulld:              "Multiply Packed Signed Dword Integers and Store Low Result"
NN_ptest:               "Logical Compare"
NN_roundpd:             "Round Packed Double Precision Floating-Point Values"
NN_roundps:             "Round Packed Single Precision Floating-Point Values"
NN_roundsd:             "Round Scalar Double Precision Floating-Point Values"
NN_roundss:             "Round Scalar Single Precision Floating-Point Values"

// SSSE4.2 instructions

NN_crc32:               "Accumulate CRC32 Value"
NN_pcmpestri:           "Packed Compare Explicit Length Strings, Return Index"
NN_pcmpestrm:           "Packed Compare Explicit Length Strings, Return Mask"
NN_pcmpistri:           "Packed Compare Implicit Length Strings, Return Index"
NN_pcmpistrm:           "Packed Compare Implicit Length Strings, Return Mask"
NN_pcmpgtq:             "Compare Packed Data for Greater Than"
NN_popcnt:              "Return the Count of Number of Bits Set to 1"

// AMD SSE4a instructions

NN_extrq:                "Extract Field From Register"
NN_insertq:              "Insert Field"
NN_movntsd:              "Move Non-Temporal Scalar Double-Precision Floating-Point"
NN_movntss:              "Move Non-Temporal Scalar Single-Precision Floating-Point"
NN_lzcnt:                "Leading Zero Count"

// xsave/xrstor instructions

NN_xgetbv:               "Get Value of Extended Control Register"
NN_xrstor:               "Restore Processor Extended States"
NN_xsave:                "Save Processor Extended States"
NN_xsetbv:               "Set Value of Extended Control Register"

// Intel Safer Mode Extensions (SMX)

NN_getsec: "Safer Mode Extensions (SMX) Instruction" {
  #include "getsec.cmt"
}
// AMD-V Virtualization ISA Extension

NN_clgi:                 "Clear Global Interrupt Flag "
NN_invlpga:              "Invalidate TLB Entry in a Specified ASID "
NN_skinit:               "Secure Init and Jump with Attestation "
NN_stgi:                 "Set Global Interrupt Flag "
NN_vmexit:               "Stop Executing Guest, Begin Executing Host "
NN_vmload:               "Load State from VMCB "
NN_vmmcall:              "Call VMM "
NN_vmrun:                "Run Virtual Machine "
NN_vmsave:               "Save State to VMCB"

// VMX+ instructions

NN_invept:               "Invalidate Translations Derived from EPT"
NN_invvpid:              "Invalidate Translations Based on VPID"

// Intel Atom instructions

NN_movbe:                "Move Data After Swapping Bytes"

// Intel AES instructions

NN_aesenc:               "Perform One Round of an AES Encryption Flow"
NN_aesenclast:           "Perform the Last Round of an AES Encryption Flow "
NN_aesdec:               "Perform One Round of an AES Decryption Flow"
NN_aesdeclast:           "Perform the Last Round of an AES Decryption Flow "
NN_aesimc:               "Perform the AES InvMixColumn Transformation"
NN_aeskeygenassist:      "AES Round Key Generation Assist"

// Carryless multiplication

NN_pclmulqdq:            "Carry-Less Multiplication Quadword"

// Returns modifies by operand size prefixes

NN_retnw:               "Return Near from Procedure (use16)"
NN_retnd:               "Return Near from Procedure (use32)"
NN_retnq:               "Return Near from Procedure (use64)"
NN_retfw:               "Return Far from Procedure (use16)"
NN_retfd:               "Return Far from Procedure (use32)"
NN_retfq:               "Return Far from Procedure (use64)"

// RDRAND support

NN_rdrand:              "Read Random Number"

// new GPR instructions

NN_adcx:                 "Unsigned Integer Addition of Two Operands with Carry Flag"
NN_adox:                 "Unsigned Integer Addition of Two Operands with Overflow Flag"
NN_andn:                 "Logical AND NOT"
NN_bextr:                "Bit Field Extract"
NN_blsi:                 "Extract Lowest Set Isolated Bit"
NN_blsmsk:               "Get Mask Up to Lowest Set Bit"
NN_blsr:                 "Reset Lowest Set Bit"
NN_bzhi:                 "Zero High Bits Starting with Specified Bit Position"
NN_clac:                 "Clear AC Flag in EFLAGS Register"
NN_mulx:                 "Unsigned Multiply Without Affecting Flags"
NN_pdep:                 "Parallel Bits Deposit"
NN_pext:                 "Parallel Bits Extract"
NN_rorx:                 "Rotate Right Logical Without Affecting Flags"
NN_sarx:                 "Shift Arithmetically Right Without Affecting Flags"
NN_shlx:                 "Shift Logically Left Without Affecting Flags"
NN_shrx:                 "Shift Logically Right Without Affecting Flags"
NN_stac:                 "Set AC Flag in EFLAGS Register"
NN_tzcnt:                "Count the Number of Trailing Zero Bits"
NN_xsaveopt:             "Save Processor Extended States Optimized"
NN_invpcid:              "Invalidate Processor Context ID"
NN_rdseed:               "Read Random Seed"
NN_rdfsbase:             "Read FS Segment Base"
NN_rdgsbase:             "Read GS Segment Base"
NN_wrfsbase:             "Write FS Segment Base"
NN_wrgsbase:             "Write GS Segment Base"

// new AVX instructions

NN_vaddpd:               "Add Packed Double-Precision Floating-Point Values"
NN_vaddps:               "Packed Single-FP Add"
NN_vaddsd:               "Add Scalar Double-Precision Floating-Point Values"
NN_vaddss:               "Scalar Single-FP Add"
NN_vaddsubpd:            "Add /Sub packed DP FP numbers"
NN_vaddsubps:            "Add /Sub packed SP FP numbers"
NN_vaesdec:              "Perform One Round of an AES Decryption Flow"
NN_vaesdeclast:          "Perform the Last Round of an AES Decryption Flow"
NN_vaesenc:              "Perform One Round of an AES Encryption Flow"
NN_vaesenclast:          "Perform the Last Round of an AES Encryption Flow"
NN_vaesimc:              "Perform the AES InvMixColumn Transformation"
NN_vaeskeygenassist:     "AES Round Key Generation Assist"
NN_vandnpd:              "Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values"
NN_vandnps:              "Bitwise Logical And NOT of Packed Single-Precision Floating-Point Values"
NN_vandpd:               "Bitwise Logical AND of Packed Double-Precision Floating-Point Values"
NN_vandps:               "Bitwise Logical And of Packed Single-Precision Floating-Point Values"
NN_vblendpd:             "Blend Packed Double Precision Floating-Point Values"
NN_vblendps:             "Blend Packed Single Precision Floating-Point Values"
NN_vblendvpd:            "Variable Blend Packed Double Precision Floating-Point Values"
NN_vblendvps:            "Variable Blend Packed Single Precision Floating-Point Values"
NN_vbroadcastf128:       "Broadcast 128 Bits of Floating-Point Data"
NN_vbroadcasti128:       "Broadcast 128 Bits of Integer Data"
NN_vbroadcastsd:         "Broadcast Double-Precision Floating-Point Element"
NN_vbroadcastss:         "Broadcast Single-Precision Floating-Point Element"
NN_vcmppd:               "Compare Packed Double-Precision Floating-Point Values"
NN_vcmpps:               "Packed Single-FP Compare"
NN_vcmpsd:               "Compare Scalar Double-Precision Floating-Point Values"
NN_vcmpss:               "Scalar Single-FP Compare"
NN_vcomisd:              "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS"
NN_vcomiss:              "Scalar Ordered Single-FP Compare and Set EFLAGS"
NN_vcvtdq2pd:            "Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values"
NN_vcvtdq2ps:            "Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values"
NN_vcvtpd2dq:            "Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers"
NN_vcvtpd2ps:            "Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values"
NN_vcvtph2ps:            "Convert 16-bit FP Values to Single-Precision FP Values"
NN_vcvtps2dq:            "Convert Packed Single-Precision Floating-Point Values to Packed Doubleword Integers"
NN_vcvtps2pd:            "Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values"
NN_vcvtps2ph:            "Convert Single-Precision FP value to 16-bit FP value"
NN_vcvtsd2si:            "Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer"
NN_vcvtsd2ss:            "Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value"
NN_vcvtsi2sd:            "Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value"
NN_vcvtsi2ss:            "Scalar signed INT32 to Single-FP conversion"
NN_vcvtss2sd:            "Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value"
NN_vcvtss2si:            "Scalar Single-FP to signed INT32 conversion"
NN_vcvttpd2dq:           "Convert With Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers"
NN_vcvttps2dq:           "Convert With Truncation Packed Single-Precision Floating-Point Values to Packed Doubleword Integers"
NN_vcvttsd2si:           "Convert with Truncation Scalar Double-Precision Floating-Point Value to Doubleword Integer"
NN_vcvttss2si:           "Scalar Single-FP to signed INT32 conversion (truncate)"
NN_vdivpd:               "Divide Packed Double-Precision Floating-Point Values"
NN_vdivps:               "Packed Single-FP Divide"
NN_vdivsd:               "Divide Scalar Double-Precision Floating-Point Values"
NN_vdivss:               "Scalar Single-FP Divide"
NN_vdppd:                "Dot Product of Packed Double Precision Floating-Point Values"
NN_vdpps:                "Dot Product of Packed Single Precision Floating-Point Values"
NN_vextractf128:         "Extract Packed Floating-Point Values"
NN_vextracti128:         "Extract Packed Integer Values"
NN_vextractps:           "Extract Packed Floating-Point Values"
NN_vfmadd132pd:          "Fused Multiply-Add of Packed Double-Precision Floating-Point Values"
NN_vfmadd132ps:          "Fused Multiply-Add of Packed Single-Precision Floating-Point Values"
NN_vfmadd132sd:          "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values"
NN_vfmadd132ss:          "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values"
NN_vfmadd213pd:          "Fused Multiply-Add of Packed Double-Precision Floating-Point Values"
NN_vfmadd213ps:          "Fused Multiply-Add of Packed Single-Precision Floating-Point Values"
NN_vfmadd213sd:          "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values"
NN_vfmadd213ss:          "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values"
NN_vfmadd231pd:          "Fused Multiply-Add of Packed Double-Precision Floating-Point Values"
NN_vfmadd231ps:          "Fused Multiply-Add of Packed Single-Precision Floating-Point Values"
NN_vfmadd231sd:          "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values"
NN_vfmadd231ss:          "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values"
NN_vfmaddsub132pd:       "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values"
NN_vfmaddsub132ps:       "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values"
NN_vfmaddsub213pd:       "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values"
NN_vfmaddsub213ps:       "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values"
NN_vfmaddsub231pd:       "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values"
NN_vfmaddsub231ps:       "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values"
NN_vfmsub132pd:          "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values"
NN_vfmsub132ps:          "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values"
NN_vfmsub132sd:          "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values"
NN_vfmsub132ss:          "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values"
NN_vfmsub213pd:          "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values"
NN_vfmsub213ps:          "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values"
NN_vfmsub213sd:          "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values"
NN_vfmsub213ss:          "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values"
NN_vfmsub231pd:          "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values"
NN_vfmsub231ps:          "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values"
NN_vfmsub231sd:          "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values"
NN_vfmsub231ss:          "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values"
NN_vfmsubadd132pd:       "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values"
NN_vfmsubadd132ps:       "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values"
NN_vfmsubadd213pd:       "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values"
NN_vfmsubadd213ps:       "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values"
NN_vfmsubadd231pd:       "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values"
NN_vfmsubadd231ps:       "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values"
NN_vfnmadd132pd:         "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values"
NN_vfnmadd132ps:         "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values"
NN_vfnmadd132sd:         "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values"
NN_vfnmadd132ss:         "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values"
NN_vfnmadd213pd:         "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values"
NN_vfnmadd213ps:         "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values"
NN_vfnmadd213sd:         "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values"
NN_vfnmadd213ss:         "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values"
NN_vfnmadd231pd:         "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values"
NN_vfnmadd231ps:         "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values"
NN_vfnmadd231sd:         "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values"
NN_vfnmadd231ss:         "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values"
NN_vfnmsub132pd:         "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values"
NN_vfnmsub132ps:         "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values"
NN_vfnmsub132sd:         "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values"
NN_vfnmsub132ss:         "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values"
NN_vfnmsub213pd:         "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values"
NN_vfnmsub213ps:         "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values"
NN_vfnmsub213sd:         "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values"
NN_vfnmsub213ss:         "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values"
NN_vfnmsub231pd:         "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values"
NN_vfnmsub231ps:         "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values"
NN_vfnmsub231sd:         "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values"
NN_vfnmsub231ss:         "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values"
NN_vgatherdps:           "Gather Packed SP FP Values Using Signed Dword Indices"
NN_vgatherdpd:           "Gather Packed DP FP Values Using Signed Dword Indices"
NN_vgatherqps:           "Gather Packed SP FP Values Using Signed Qword Indices"
NN_vgatherqpd:           "Gather Packed DP FP Values Using Signed Qword Indices"
NN_vhaddpd:              "Add horizontally packed DP FP numbers"
NN_vhaddps:              "Add horizontally packed SP FP numbers"
NN_vhsubpd:              "Sub horizontally packed DP FP numbers"
NN_vhsubps:              "Sub horizontally packed SP FP numbers"
NN_vinsertf128:          "Insert Packed Floating-Point Values"
NN_vinserti128:          "Insert Packed Integer Values"
NN_vinsertps:            "Insert Packed Single Precision Floating-Point Value"
NN_vlddqu:               "Load Unaligned Packed Integer Values"
NN_vldmxcsr:             "Load Streaming SIMD Extensions Technology Control/Status Register"
NN_vmaskmovdqu:          "Store Selected Bytes of Double Quadword with NT Hint"
NN_vmaskmovpd:           "Conditionally Load Packed Double-Precision Floating-Point Values"
NN_vmaskmovps:           "Conditionally Load Packed Single-Precision Floating-Point Values"
NN_vmaxpd:               "Return Maximum Packed Double-Precision Floating-Point Values"
NN_vmaxps:               "Packed Single-FP Maximum"
NN_vmaxsd:               "Return Maximum Scalar Double-Precision Floating-Point Value"
NN_vmaxss:               "Scalar Single-FP Maximum"
NN_vminpd:               "Return Minimum Packed Double-Precision Floating-Point Values"
NN_vminps:               "Packed Single-FP Minimum"
NN_vminsd:               "Return Minimum Scalar Double-Precision Floating-Point Value"
NN_vminss:               "Scalar Single-FP Minimum"
NN_vmovapd:              "Move Aligned Packed Double-Precision Floating-Point Values"
NN_vmovaps:              "Move Aligned Four Packed Single-FP"
NN_vmovd:                "Move 32 bits"
NN_vmovddup:             "Move One Double-FP and Duplicate"
NN_vmovdqa:              "Move Aligned Double Quadword"
NN_vmovdqu:              "Move Unaligned Double Quadword"
NN_vmovhlps:             "Move High to Low Packed Single-FP"
NN_vmovhpd:              "Move High Packed Double-Precision Floating-Point Values"
NN_vmovhps:              "Move High Packed Single-FP"
NN_vmovlhps:             "Move Low to High Packed Single-FP"
NN_vmovlpd:              "Move Low Packed Double-Precision Floating-Point Values"
NN_vmovlps:              "Move Low Packed Single-FP"
NN_vmovmskpd:            "Extract Packed Double-Precision Floating-Point Sign Mask"
NN_vmovmskps:            "Move Mask to Register"
NN_vmovntdq:             "Store Double Quadword Using Non-Temporal Hint"
NN_vmovntdqa:            "Load Double Quadword Non-Temporal Aligned Hint"
NN_vmovntpd:             "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint"
NN_vmovntps:             "Move Aligned Four Packed Single-FP Non Temporal"
NN_vmovq:                "Move 64 bits"
NN_vmovsd:               "Move Scalar Double-Precision Floating-Point Values"
NN_vmovshdup:            "Move Packed Single-FP High and Duplicate"
NN_vmovsldup:            "Move Packed Single-FP Low and Duplicate"
NN_vmovss:               "Move Scalar Single-FP"
NN_vmovupd:              "Move Unaligned Packed Double-Precision Floating-Point Values"
NN_vmovups:              "Move Unaligned Four Packed Single-FP"
NN_vmpsadbw:             "Compute Multiple Packed Sums of Absolute Difference"
NN_vmulpd:               "Multiply Packed Double-Precision Floating-Point Values"
NN_vmulps:               "Packed Single-FP Multiply"
NN_vmulsd:               "Multiply Scalar Double-Precision Floating-Point Values"
NN_vmulss:               "Scalar Single-FP Multiply"
NN_vorpd:                "Bitwise Logical OR of Double-Precision Floating-Point Values"
NN_vorps:                "Bitwise Logical OR for Single-FP Data"
NN_vpabsb:               "Packed Absolute Value Byte"
NN_vpabsd:               "Packed Absolute Value Doubleword"
NN_vpabsw:               "Packed Absolute Value Word"
NN_vpackssdw:            "Pack with Signed Saturation (Dword->Word)"
NN_vpacksswb:            "Pack with Signed Saturation (Word->Byte)"
NN_vpackusdw:            "Pack with Unsigned Saturation"
NN_vpackuswb:            "Pack with Unsigned Saturation (Word->Byte)"
NN_vpaddb:               "Packed Add Byte"
NN_vpaddd:               "Packed Add Dword"
NN_vpaddq:               "Add Packed Quadword Integers"
NN_vpaddsb:              "Packed Add with Saturation (Byte)"
NN_vpaddsw:              "Packed Add with Saturation (Word)"
NN_vpaddusb:             "Packed Add Unsigned with Saturation (Byte)"
NN_vpaddusw:             "Packed Add Unsigned with Saturation (Word)"
NN_vpaddw:               "Packed Add Word"
NN_vpalignr:             "Packed Align Right"
NN_vpand:                "Bitwise Logical And"
NN_vpandn:               "Bitwise Logical And Not"
NN_vpavgb:               "Packed Average (Byte)"
NN_vpavgw:               "Packed Average (Word)"
NN_vpblendd:             "Blend Packed Dwords"
NN_vpblendvb:            "Variable Blend Packed Bytes"
NN_vpblendw:             "Blend Packed Words"
NN_vpbroadcastb:         "Broadcast a Byte Integer"
NN_vpbroadcastd:         "Broadcast a Dword Integer"
NN_vpbroadcastq:         "Broadcast a Qword Integer"
NN_vpbroadcastw:         "Broadcast a Word Integer"
NN_vpclmulqdq:           "Carry-Less Multiplication Quadword"
NN_vpcmpeqb:             "Packed Compare for Equal (Byte)"
NN_vpcmpeqd:             "Packed Compare for Equal (Dword)"
NN_vpcmpeqq:             "Compare Packed Qword Data for Equal"
NN_vpcmpeqw:             "Packed Compare for Equal (Word)"
NN_vpcmpestri:           "Packed Compare Explicit Length Strings, Return Index"
NN_vpcmpestrm:           "Packed Compare Explicit Length Strings, Return Mask"
NN_vpcmpgtb:             "Packed Compare for Greater Than (Byte)"
NN_vpcmpgtd:             "Packed Compare for Greater Than (Dword)"
NN_vpcmpgtq:             "Compare Packed Data for Greater Than"
NN_vpcmpgtw:             "Packed Compare for Greater Than (Word)"
NN_vpcmpistri:           "Packed Compare Implicit Length Strings, Return Index"
NN_vpcmpistrm:           "Packed Compare Implicit Length Strings, Return Mask"
NN_vperm2f128:           "Permute Floating-Point Values"
NN_vperm2i128:           "Permute Integer Values"
NN_vpermd:               "Full Doublewords Element Permutation"
NN_vpermilpd:            "Permute Double-Precision Floating-Point Values"
NN_vpermilps:            "Permute Single-Precision Floating-Point Values"
NN_vpermpd:              "Permute Double-Precision Floating-Point Elements"
NN_vpermps:              "Permute Single-Precision Floating-Point Elements"
NN_vpermq:               "Qwords Element Permutation"
NN_vpextrb:              "Extract Byte"
NN_vpextrd:              "Extract Dword"
NN_vpextrq:              "Extract Qword"
NN_vpextrw:              "Extract Word"
NN_vpgatherdd:           "Gather Packed Dword Values Using Signed Dword Indices"
NN_vpgatherdq:           "Gather Packed Qword Values Using Signed Dword Indices"
NN_vpgatherqd:           "Gather Packed Dword Values Using Signed Qword Indices"
NN_vpgatherqq:           "Gather Packed Qword Values Using Signed Qword Indices"
NN_vphaddd:              "Packed Horizontal Add Doubleword"
NN_vphaddsw:             "Packed Horizontal Add and Saturate"
NN_vphaddw:              "Packed Horizontal Add Word"
NN_vphminposuw:          "Packed Horizontal Word Minimum"
NN_vphsubd:              "Packed Horizontal Subtract Doubleword"
NN_vphsubsw:             "Packed Horizontal Subtract and Saturate"
NN_vphsubw:              "Packed Horizontal Subtract Word"
NN_vpinsrb:              "Insert Byte"
NN_vpinsrd:              "Insert Dword"
NN_vpinsrq:              "Insert Qword"
NN_vpinsrw:              "Insert Word"
NN_vpmaddubsw:           "Multiply and Add Packed Signed and Unsigned Bytes"
NN_vpmaddwd:             "Packed Multiply and Add"
NN_vpmaskmovd:           "Conditionally Store Dword Values Using Mask"
NN_vpmaskmovq:           "Conditionally Store Qword Values Using Mask"
NN_vpmaxsb:              "Maximum of Packed Signed Byte Integers"
NN_vpmaxsd:              "Maximum of Packed Signed Dword Integers"
NN_vpmaxsw:              "Packed Signed Integer Word Maximum"
NN_vpmaxub:              "Packed Unsigned Integer Byte Maximum"
NN_vpmaxud:              "Maximum of Packed Unsigned Dword Integers"
NN_vpmaxuw:              "Maximum of Packed Word Integers"
NN_vpminsb:              "Minimum of Packed Signed Byte Integers"
NN_vpminsd:              "Minimum of Packed Signed Dword Integers"
NN_vpminsw:              "Packed Signed Integer Word Minimum"
NN_vpminub:              "Packed Unsigned Integer Byte Minimum"
NN_vpminud:              "Minimum of Packed Unsigned Dword Integers"
NN_vpminuw:              "Minimum of Packed Word Integers"
NN_vpmovmskb:            "Move Byte Mask to Integer"
NN_vpmovsxbd:            "Packed Move with Sign Extend"
NN_vpmovsxbq:            "Packed Move with Sign Extend"
NN_vpmovsxbw:            "Packed Move with Sign Extend"
NN_vpmovsxdq:            "Packed Move with Sign Extend"
NN_vpmovsxwd:            "Packed Move with Sign Extend"
NN_vpmovsxwq:            "Packed Move with Sign Extend"
NN_vpmovzxbd:            "Packed Move with Zero Extend"
NN_vpmovzxbq:            "Packed Move with Zero Extend"
NN_vpmovzxbw:            "Packed Move with Zero Extend"
NN_vpmovzxdq:            "Packed Move with Zero Extend"
NN_vpmovzxwd:            "Packed Move with Zero Extend"
NN_vpmovzxwq:            "Packed Move with Zero Extend"
NN_vpmuldq:              "Multiply Packed Signed Dword Integers"
NN_vpmulhrsw:            "Packed Multiply High with Round and Scale"
NN_vpmulhuw:             "Packed Multiply High Unsigned"
NN_vpmulhw:              "Packed Multiply High"
NN_vpmulld:              "Multiply Packed Signed Dword Integers and Store Low Result"
NN_vpmullw:              "Packed Multiply Low"
NN_vpmuludq:             "Multiply Packed Unsigned Doubleword Integers"
NN_vpor:                 "Bitwise Logical Or"
NN_vpsadbw:              "Packed Sum of Absolute Differences"
NN_vpshufb:              "Packed Shuffle Bytes"
NN_vpshufd:              "Shuffle Packed Doublewords"
NN_vpshufhw:             "Shuffle Packed High Words"
NN_vpshuflw:             "Shuffle Packed Low Words"
NN_vpsignb:              "Packed SIGN Byte"
NN_vpsignd:              "Packed SIGN Doubleword"
NN_vpsignw:              "Packed SIGN Word"
NN_vpslld:               "Packed Shift Left Logical (Dword)"
NN_vpslldq:              "Shift Double Quadword Left Logical"
NN_vpsllq:               "Packed Shift Left Logical (Qword)"
NN_vpsllvd:              "Variable Bit Shift Left Logical (Dword)"
NN_vpsllvq:              "Variable Bit Shift Left Logical (Qword)"
NN_vpsllw:               "Packed Shift Left Logical (Word)"
NN_vpsrad:               "Packed Shift Right Arithmetic (Dword)"
NN_vpsravd:              "Variable Bit Shift Right Arithmetic"
NN_vpsraw:               "Packed Shift Right Arithmetic (Word)"
NN_vpsrld:               "Packed Shift Right Logical (Dword)"
NN_vpsrldq:              "Shift Double Quadword Right Logical (Qword)"
NN_vpsrlq:               "Packed Shift Right Logical (Qword)"
NN_vpsrlvd:              "Variable Bit Shift Right Logical (Dword)"
NN_vpsrlvq:              "Variable Bit Shift Right Logical (Qword)"
NN_vpsrlw:               "Packed Shift Right Logical (Word)"
NN_vpsubb:               "Packed Subtract Byte"
NN_vpsubd:               "Packed Subtract Dword"
NN_vpsubq:               "Subtract Packed Quadword Integers"
NN_vpsubsb:              "Packed Subtract with Saturation (Byte)"
NN_vpsubsw:              "Packed Subtract with Saturation (Word)"
NN_vpsubusb:             "Packed Subtract Unsigned with Saturation (Byte)"
NN_vpsubusw:             "Packed Subtract Unsigned with Saturation (Word)"
NN_vpsubw:               "Packed Subtract Word"
NN_vptest:               "Logical Compare"
NN_vpunpckhbw:           "Unpack High Packed Data (Byte->Word)"
NN_vpunpckhdq:           "Unpack High Packed Data (Dword->Qword)"
NN_vpunpckhqdq:          "Unpack High Packed Data (Qword->Xmmword)"
NN_vpunpckhwd:           "Unpack High Packed Data (Word->Dword)"
NN_vpunpcklbw:           "Unpack Low Packed Data (Byte->Word)"
NN_vpunpckldq:           "Unpack Low Packed Data (Dword->Qword)"
NN_vpunpcklqdq:          "Unpack Low Packed Data (Qword->Xmmword)"
NN_vpunpcklwd:           "Unpack Low Packed Data (Word->Dword)"
NN_vpxor:                "Bitwise Logical Exclusive Or"
NN_vrcpps:               "Packed Single-FP Reciprocal"
NN_vrcpss:               "Scalar Single-FP Reciprocal"
NN_vroundpd:             "Round Packed Double Precision Floating-Point Values"
NN_vroundps:             "Round Packed Single Precision Floating-Point Values"
NN_vroundsd:             "Round Scalar Double Precision Floating-Point Values"
NN_vroundss:             "Round Scalar Single Precision Floating-Point Values"
NN_vrsqrtps:             "Packed Single-FP Square Root Reciprocal"
NN_vrsqrtss:             "Scalar Single-FP Square Root Reciprocal"
NN_vshufpd:              "Shuffle Packed Double-Precision Floating-Point Values"
NN_vshufps:              "Shuffle Single-FP"
NN_vsqrtpd:              "Compute Square Roots of Packed Double-Precision Floating-Point Values"
NN_vsqrtps:              "Packed Single-FP Square Root"
NN_vsqrtsd:              "Compute Square Rootof Scalar Double-Precision Floating-Point Value"
NN_vsqrtss:              "Scalar Single-FP Square Root"
NN_vstmxcsr:             "Store Streaming SIMD Extensions Technology Control/Status Register"
NN_vsubpd:               "Subtract Packed Double-Precision Floating-Point Values"
NN_vsubps:               "Packed Single-FP Subtract"
NN_vsubsd:               "Subtract Scalar Double-Precision Floating-Point Values"
NN_vsubss:               "Scalar Single-FP Subtract"
NN_vtestpd:              "Packed Double-Precision Floating-Point Bit Test"
NN_vtestps:              "Packed Single-Precision Floating-Point Bit Test"
NN_vucomisd:             "Unordered Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS"
NN_vucomiss:             "Scalar Unordered Single-FP Compare and Set EFLAGS"
NN_vunpckhpd:            "Unpack and Interleave High Packed Double-Precision Floating-Point Values"
NN_vunpckhps:            "Unpack High Packed Single-FP Data"
NN_vunpcklpd:            "Unpack and Interleave Low Packed Double-Precision Floating-Point Values"
NN_vunpcklps:            "Unpack Low Packed Single-FP Data"
NN_vxorpd:               "Bitwise Logical OR of Double-Precision Floating-Point Values"
NN_vxorps:               "Bitwise Logical XOR for Single-FP Data"
NN_vzeroall:             "Zero All YMM Registers"
NN_vzeroupper:           "Zero Upper Bits of YMM Registers"

// Transactional Synchronization Extensions
NN_xabort:               "Transaction Abort"
NN_xbegin:               "Transaction Begin"
NN_xend:                 "Transaction End"
NN_xtest:                "Test If In Transactional Execution"

// Virtual PC synthetic instructions

NN_vmgetinfo:            "Virtual PC - Get VM Information"
NN_vmsetinfo:            "Virtual PC - Set VM Information"
NN_vmdxdsbl:             "Virtual PC - Disable Direct Execution"
NN_vmdxenbl:             "Virtual PC - Enable Direct Execution"
NN_vmcpuid:              "Virtual PC - Virtualized CPU Information"
NN_vmhlt:                "Virtual PC - Halt"
NN_vmsplaf:              "Virtual PC - Spin Lock Acquisition Failed"
NN_vmpushfd:             "Virtual PC - Push virtualized flags register"
NN_vmpopfd:              "Virtual PC - Pop virtualized flags register"
NN_vmcli:                "Virtual PC - Clear Interrupt Flag"
NN_vmsti:                "Virtual PC - Set Interrupt Flag"
NN_vmiretd:              "Virtual PC - Return From Interrupt"
NN_vmsgdt:               "Virtual PC - Store Global Descriptor Table"
NN_vmsidt:               "Virtual PC - Store Interrupt Descriptor Table"
NN_vmsldt:               "Virtual PC - Store Local Descriptor Table"
NN_vmstr:                "Virtual PC - Store Task Register"
NN_vmsdte:               "Virtual PC - Store to Descriptor Table Entry"
NN_vpcext:               "Virtual PC - ISA extension"

// AMD FMA4

NN_vfmaddsubps:          "Multiply with Alternating Add/Subtract of Packed Single-Precision Floating-Point"
NN_vfmaddsubpd:          "Multiply with Alternating Add/Subtract of Packed Double-Precision Floating-Point"
NN_vfmsubaddps:          "Multiply with Alternating Subtract/Add of Packed Single-Precision Floating-Point"
NN_vfmsubaddpd:          "Multiply with Alternating Subtract/Add of Packed Double-Precision Floating-Point"
NN_vfmaddps:             "Multiply and Add Packed Single-Precision Floating-Point"
NN_vfmaddpd:             "Multiply and Add Packed Double-Precision Floating-Point"
NN_vfmaddss:             "Multiply and Add Scalar Single-Precision Floating-Point"
NN_vfmaddsd:             "Multiply and Add Scalar Double-Precision Floating-Point"
NN_vfmsubps:             "Multiply and Subtract Packed Single-Precision Floating-Point"
NN_vfmsubpd:             "Multiply and Subtract Packed Double-Precision Floating-Point"
NN_vfmsubss:             "Multiply and Subtract Scalar Single-Precision Floating-Point"
NN_vfmsubsd:             "Multiply and Subtract Scalar Double-Precision Floating-Point"
NN_vfnmaddps:            "Negative Multiply and Add Packed Single-Precision Floating-Point"
NN_vfnmaddpd:            "Negative Multiply and Add Packed Double-Precision Floating-Point"
NN_vfnmaddss:            "Negative Multiply and Add Scalar Single-Precision Floating-Point"
NN_vfnmaddsd:            "Negative Multiply and Add Double Single-Precision Floating-Point"
NN_vfnmsubps:            "Negative Multiply and Subtract Packed Single-Precision Floating-Point"
NN_vfnmsubpd:            "Negative Multiply and Subtract Packed Double-Precision Floating-Point"
NN_vfnmsubss:            "Negative Multiply and Subtract Scalar Single-Precision Floating-Point"
NN_vfnmsubsd:            "Negative Multiply and Subtract Double Single-Precision Floating-Point"

// Intel Memory Protection Extensions (MPX)

NN_bndmk:                "Make Bounds"
NN_bndcl:                "Check Lower Bound"
NN_bndcu:                "Check Upper Bound"
NN_bndcn:                "Check Upper Bound"
NN_bndmov:               "Move Bounds"
NN_bndldx:               "Load Extended Bounds Using Address Translation"
NN_bndstx:               "Store Extended Bounds Using Address Translation"

// New xstate instructions

NN_xrstors:              "Restore Processor Extended States Supervisor"
NN_xsavec:               "Save Processor Extended States with Compaction"
NN_xsaves:               "Save Processor Extended States Supervisor"

// PREFETCHWT1 support

NN_prefetchwt1:          "Prefetch Vector Data Into Caches with Intent to Write and T1 Hint"

// Memory instructions

NN_clflushopt:           "Flush a Cache Line Optimized"
NN_clwb:                 "Cache Line Write Back"
NN_pcommit:              "Persistent Commit"

// Protection Key Rights for User Pages

NN_rdpkru:               "Read Protection Key Rights for User Pages"
NN_wrpkru:               "Write Data to User Page Key Register"

// AVX comparison pseudo-ops

NN_vcmpeqpd:             "Compare Packed Double-Precision Floating-Point Values - Equal (ordered, non-signaling)"
NN_vcmpltpd:             "Compare Packed Double-Precision Floating-Point Values - Less-than (ordered, signaling)"
NN_vcmplepd:             "Compare Packed Double-Precision Floating-Point Values - Less-than-or-equal (ordered, signaling)"
NN_vcmpunordpd:          "Compare Packed Double-Precision Floating-Point Values - Unordered (non-signaling)"
NN_vcmpneqpd:            "Compare Packed Double-Precision Floating-Point Values - Not-equal (unordered, non-signaling)"
NN_vcmpnltpd:            "Compare Packed Double-Precision Floating-Point Values - Not-less-than (unordered, signaling)"
NN_vcmpnlepd:            "Compare Packed Double-Precision Floating-Point Values - Not-less-than-or-equal (unordered, signaling)"
NN_vcmpordpd:            "Compare Packed Double-Precision Floating-Point Values - Ordered (non-signaling)"
NN_vcmpeq_uqpd:          "Compare Packed Double-Precision Floating-Point Values - Equal (unordered, non-signaling)"
NN_vcmpngepd:            "Compare Packed Double-Precision Floating-Point Values - Not-greater-than-or-equal (unordered, signaling)"
NN_vcmpngtpd:            "Compare Packed Double-Precision Floating-Point Values - Not-greater-than (unordered, signaling)"
NN_vcmpfalsepd:          "Compare Packed Double-Precision Floating-Point Values - False (ordered, non-signaling)"
NN_vcmpneq_oqpd:         "Compare Packed Double-Precision Floating-Point Values - Not-equal (ordered, non-signaling)"
NN_vcmpgepd:             "Compare Packed Double-Precision Floating-Point Values - Greater-than-or-equal (ordered, signaling)"
NN_vcmpgtpd:             "Compare Packed Double-Precision Floating-Point Values - Greater-than (ordered, signaling)"
NN_vcmptruepd:           "Compare Packed Double-Precision Floating-Point Values - True (unordered, non-signaling)"
NN_vcmpeq_ospd:          "Compare Packed Double-Precision Floating-Point Values - Equal (ordered, signaling)"
NN_vcmplt_oqpd:          "Compare Packed Double-Precision Floating-Point Values - Less-than (ordered, non-signaling)"
NN_vcmple_oqpd:          "Compare Packed Double-Precision Floating-Point Values - Less-than-or-equal (ordered, non-signaling)"
NN_vcmpunord_spd:        "Compare Packed Double-Precision Floating-Point Values - Unordered (signaling)"
NN_vcmpneq_uspd:         "Compare Packed Double-Precision Floating-Point Values - Not-equal (unordered, signaling)"
NN_vcmpnlt_uqpd:         "Compare Packed Double-Precision Floating-Point Values - Not-less-than (unordered, non-signaling)"
NN_vcmpnle_uqpd:         "Compare Packed Double-Precision Floating-Point Values - Not-less-than-or-equal (unordered, non-signaling)"
NN_vcmpord_spd:          "Compare Packed Double-Precision Floating-Point Values - Ordered (signaling)"
NN_vcmpeq_uspd:          "Compare Packed Double-Precision Floating-Point Values - Equal (unordered, signaling)"
NN_vcmpnge_uqpd:         "Compare Packed Double-Precision Floating-Point Values - Not-greater-than-or-equal (unordered, non-signaling)"
NN_vcmpngt_uqpd:         "Compare Packed Double-Precision Floating-Point Values - Not-greater-than (unordered, non-signaling)"
NN_vcmpfalse_ospd:       "Compare Packed Double-Precision Floating-Point Values - False (ordered, signaling)"
NN_vcmpneq_ospd:         "Compare Packed Double-Precision Floating-Point Values - Not-equal (ordered, signaling)"
NN_vcmpge_oqpd:          "Compare Packed Double-Precision Floating-Point Values - Greater-than-or-equal (ordered, non-signaling)"
NN_vcmpgt_oqpd:          "Compare Packed Double-Precision Floating-Point Values - Greater-than (ordered, non-signaling)"
NN_vcmptrue_uspd:        "Compare Packed Double-Precision Floating-Point Values - True (unordered, signaling)"

NN_vcmpeqps:             "Packed Single-FP Compare - Equal (ordered, non-signaling)"
NN_vcmpltps:             "Packed Single-FP Compare - Less-than (ordered, signaling)"
NN_vcmpleps:             "Packed Single-FP Compare - Less-than-or-equal (ordered, signaling)"
NN_vcmpunordps:          "Packed Single-FP Compare - Unordered (non-signaling)"
NN_vcmpneqps:            "Packed Single-FP Compare - Not-equal (unordered, non-signaling)"
NN_vcmpnltps:            "Packed Single-FP Compare - Not-less-than (unordered, signaling)"
NN_vcmpnleps:            "Packed Single-FP Compare - Not-less-than-or-equal (unordered, signaling)"
NN_vcmpordps:            "Packed Single-FP Compare - Ordered (non-signaling)"
NN_vcmpeq_uqps:          "Packed Single-FP Compare - Equal (unordered, non-signaling)"
NN_vcmpngeps:            "Packed Single-FP Compare - Not-greater-than-or-equal (unordered, signaling)"
NN_vcmpngtps:            "Packed Single-FP Compare - Not-greater-than (unordered, signaling)"
NN_vcmpfalseps:          "Packed Single-FP Compare - False (ordered, non-signaling)"
NN_vcmpneq_oqps:         "Packed Single-FP Compare - Not-equal (ordered, non-signaling)"
NN_vcmpgeps:             "Packed Single-FP Compare - Greater-than-or-equal (ordered, signaling)"
NN_vcmpgtps:             "Packed Single-FP Compare - Greater-than (ordered, signaling)"
NN_vcmptrueps:           "Packed Single-FP Compare - True (unordered, non-signaling)"
NN_vcmpeq_osps:          "Packed Single-FP Compare - Equal (ordered, signaling)"
NN_vcmplt_oqps:          "Packed Single-FP Compare - Less-than (ordered, non-signaling)"
NN_vcmple_oqps:          "Packed Single-FP Compare - Less-than-or-equal (ordered, non-signaling)"
NN_vcmpunord_sps:        "Packed Single-FP Compare - Unordered (signaling)"
NN_vcmpneq_usps:         "Packed Single-FP Compare - Not-equal (unordered, signaling)"
NN_vcmpnlt_uqps:         "Packed Single-FP Compare - Not-less-than (unordered, non-signaling)"
NN_vcmpnle_uqps:         "Packed Single-FP Compare - Not-less-than-or-equal (unordered, non-signaling)"
NN_vcmpord_sps:          "Packed Single-FP Compare - Ordered (signaling)"
NN_vcmpeq_usps:          "Packed Single-FP Compare - Equal (unordered, signaling)"
NN_vcmpnge_uqps:         "Packed Single-FP Compare - Not-greater-than-or-equal (unordered, non-signaling)"
NN_vcmpngt_uqps:         "Packed Single-FP Compare - Not-greater-than (unordered, non-signaling)"
NN_vcmpfalse_osps:       "Packed Single-FP Compare - False (ordered, signaling)"
NN_vcmpneq_osps:         "Packed Single-FP Compare - Not-equal (ordered, signaling)"
NN_vcmpge_oqps:          "Packed Single-FP Compare - Greater-than-or-equal (ordered, non-signaling)"
NN_vcmpgt_oqps:          "Packed Single-FP Compare - Greater-than (ordered, non-signaling)"
NN_vcmptrue_usps:        "Packed Single-FP Compare - True (unordered, signaling)"

NN_vcmpeqsd:             "Compare Scalar Double-Precision Floating-Point Values - Equal (ordered, non-signaling)"
NN_vcmpltsd:             "Compare Scalar Double-Precision Floating-Point Values - Less-than (ordered, signaling)"
NN_vcmplesd:             "Compare Scalar Double-Precision Floating-Point Values - Less-than-or-equal (ordered, signaling)"
NN_vcmpunordsd:          "Compare Scalar Double-Precision Floating-Point Values - Unordered (non-signaling)"
NN_vcmpneqsd:            "Compare Scalar Double-Precision Floating-Point Values - Not-equal (unordered, non-signaling)"
NN_vcmpnltsd:            "Compare Scalar Double-Precision Floating-Point Values - Not-less-than (unordered, signaling)"
NN_vcmpnlesd:            "Compare Scalar Double-Precision Floating-Point Values - Not-less-than-or-equal (unordered, signaling)"
NN_vcmpordsd:            "Compare Scalar Double-Precision Floating-Point Values - Ordered (non-signaling)"
NN_vcmpeq_uqsd:          "Compare Scalar Double-Precision Floating-Point Values - Equal (unordered, non-signaling)"
NN_vcmpngesd:            "Compare Scalar Double-Precision Floating-Point Values - Not-greater-than-or-equal (unordered, signaling)"
NN_vcmpngtsd:            "Compare Scalar Double-Precision Floating-Point Values - Not-greater-than (unordered, signaling)"
NN_vcmpfalsesd:          "Compare Scalar Double-Precision Floating-Point Values - False (ordered, non-signaling)"
NN_vcmpneq_oqsd:         "Compare Scalar Double-Precision Floating-Point Values - Not-equal (ordered, non-signaling)"
NN_vcmpgesd:             "Compare Scalar Double-Precision Floating-Point Values - Greater-than-or-equal (ordered, signaling)"
NN_vcmpgtsd:             "Compare Scalar Double-Precision Floating-Point Values - Greater-than (ordered, signaling)"
NN_vcmptruesd:           "Compare Scalar Double-Precision Floating-Point Values - True (unordered, non-signaling)"
NN_vcmpeq_ossd:          "Compare Scalar Double-Precision Floating-Point Values - Equal (ordered, signaling)"
NN_vcmplt_oqsd:          "Compare Scalar Double-Precision Floating-Point Values - Less-than (ordered, non-signaling)"
NN_vcmple_oqsd:          "Compare Scalar Double-Precision Floating-Point Values - Less-than-or-equal (ordered, non-signaling)"
NN_vcmpunord_ssd:        "Compare Scalar Double-Precision Floating-Point Values - Unordered (signaling)"
NN_vcmpneq_ussd:         "Compare Scalar Double-Precision Floating-Point Values - Not-equal (unordered, signaling)"
NN_vcmpnlt_uqsd:         "Compare Scalar Double-Precision Floating-Point Values - Not-less-than (unordered, non-signaling)"
NN_vcmpnle_uqsd:         "Compare Scalar Double-Precision Floating-Point Values - Not-less-than-or-equal (unordered, non-signaling)"
NN_vcmpord_ssd:          "Compare Scalar Double-Precision Floating-Point Values - Ordered (signaling)"
NN_vcmpeq_ussd:          "Compare Scalar Double-Precision Floating-Point Values - Equal (unordered, signaling)"
NN_vcmpnge_uqsd:         "Compare Scalar Double-Precision Floating-Point Values - Not-greater-than-or-equal (unordered, non-signaling)"
NN_vcmpngt_uqsd:         "Compare Scalar Double-Precision Floating-Point Values - Not-greater-than (unordered, non-signaling)"
NN_vcmpfalse_ossd:       "Compare Scalar Double-Precision Floating-Point Values - False (ordered, signaling)"
NN_vcmpneq_ossd:         "Compare Scalar Double-Precision Floating-Point Values - Not-equal (ordered, signaling)"
NN_vcmpge_oqsd:          "Compare Scalar Double-Precision Floating-Point Values - Greater-than-or-equal (ordered, non-signaling)"
NN_vcmpgt_oqsd:          "Compare Scalar Double-Precision Floating-Point Values - Greater-than (ordered, non-signaling)"
NN_vcmptrue_ussd:        "Compare Scalar Double-Precision Floating-Point Values - True (unordered, signaling)"

NN_vcmpeqss:             "Scalar Single-FP Compare - Equal (ordered, non-signaling)"
NN_vcmpltss:             "Scalar Single-FP Compare - Less-than (ordered, signaling)"
NN_vcmpless:             "Scalar Single-FP Compare - Less-than-or-equal (ordered, signaling)"
NN_vcmpunordss:          "Scalar Single-FP Compare - Unordered (non-signaling)"
NN_vcmpneqss:            "Scalar Single-FP Compare - Not-equal (unordered, non-signaling)"
NN_vcmpnltss:            "Scalar Single-FP Compare - Not-less-than (unordered, signaling)"
NN_vcmpnless:            "Scalar Single-FP Compare - Not-less-than-or-equal (unordered, signaling)"
NN_vcmpordss:            "Scalar Single-FP Compare - Ordered (non-signaling)"
NN_vcmpeq_uqss:          "Scalar Single-FP Compare - Equal (unordered, non-signaling)"
NN_vcmpngess:            "Scalar Single-FP Compare - Not-greater-than-or-equal (unordered, signaling)"
NN_vcmpngtss:            "Scalar Single-FP Compare - Not-greater-than (unordered, signaling)"
NN_vcmpfalsess:          "Scalar Single-FP Compare - False (ordered, non-signaling)"
NN_vcmpneq_oqss:         "Scalar Single-FP Compare - Not-equal (ordered, non-signaling)"
NN_vcmpgess:             "Scalar Single-FP Compare - Greater-than-or-equal (ordered, signaling)"
NN_vcmpgtss:             "Scalar Single-FP Compare - Greater-than (ordered, signaling)"
NN_vcmptruess:           "Scalar Single-FP Compare - True (unordered, non-signaling)"
NN_vcmpeq_osss:          "Scalar Single-FP Compare - Equal (ordered, signaling)"
NN_vcmplt_oqss:          "Scalar Single-FP Compare - Less-than (ordered, non-signaling)"
NN_vcmple_oqss:          "Scalar Single-FP Compare - Less-than-or-equal (ordered, non-signaling)"
NN_vcmpunord_sss:        "Scalar Single-FP Compare - Unordered (signaling)"
NN_vcmpneq_usss:         "Scalar Single-FP Compare - Not-equal (unordered, signaling)"
NN_vcmpnlt_uqss:         "Scalar Single-FP Compare - Not-less-than (unordered, non-signaling)"
NN_vcmpnle_uqss:         "Scalar Single-FP Compare - Not-less-than-or-equal (unordered, non-signaling)"
NN_vcmpord_sss:          "Scalar Single-FP Compare - Ordered (signaling)"
NN_vcmpeq_usss:          "Scalar Single-FP Compare - Equal (unordered, signaling)"
NN_vcmpnge_uqss:         "Scalar Single-FP Compare - Not-greater-than-or-equal (unordered, non-signaling)"
NN_vcmpngt_uqss:         "Scalar Single-FP Compare - Not-greater-than (unordered, non-signaling)"
NN_vcmpfalse_osss:       "Scalar Single-FP Compare - False (ordered, signaling)"
NN_vcmpneq_osss:         "Scalar Single-FP Compare - Not-equal (ordered, signaling)"
NN_vcmpge_oqss:          "Scalar Single-FP Compare - Greater-than-or-equal (ordered, non-signaling)"
NN_vcmpgt_oqss:          "Scalar Single-FP Compare - Greater-than (ordered, non-signaling)"
NN_vcmptrue_usss:        "Scalar Single-FP Compare - True (unordered, signaling)"

// AVX-512 instructions

NN_valignd:              "Align Doubleword Vectors"
NN_valignq:              "Align Quadword Vectors"
NN_vblendmpd:            "Blend Float64 Vectors Using an OpMask Control"
NN_vblendmps:            "Blend Float32 Vectors Using an OpMask Control"
NN_vpblendmb:            "Blend Byte Vectors Using an Opmask Control"
NN_vpblendmw:            "Blend Word Vectors Using an Opmask Control"
NN_vpblendmd:            "Blend Int32 Vectors Using an OpMask Control"
NN_vpblendmq:            "Blend Int64 Vectors Using an OpMask Control"
NN_vbroadcastf32x2:      "Load with Broadcast Floating-Point Data"
NN_vbroadcastf32x4:      "Load with Broadcast Floating-Point Data"
NN_vbroadcastf64x2:      "Load with Broadcast Floating-Point Data"
NN_vbroadcastf32x8:      "Load with Broadcast Floating-Point Data"
NN_vbroadcastf64x4:      "Load with Broadcast Floating-Point Data"
NN_vbroadcasti32x2:      "Load Integer and Broadcast"
NN_vbroadcasti32x4:      "Load Integer and Broadcast"
NN_vbroadcasti64x2:      "Load Integer and Broadcast"
NN_vbroadcasti32x8:      "Load Integer and Broadcast"
NN_vbroadcasti64x4:      "Load Integer and Broadcast"
NN_vcompresspd:          "Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory"
NN_vcompressps:          "Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory"
NN_vcvtpd2qq:            "Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers"
NN_vcvtpd2udq:           "Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers"
NN_vcvtpd2uqq:           "Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers"
NN_vcvtps2udq:           "Convert Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values"
NN_vcvtps2qq:            "Convert Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values"
NN_vcvtps2uqq:           "Convert Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values"
NN_vcvtqq2pd:            "Convert Packed Quadword Integers to Packed Double-Precision Floating-Point Values"
NN_vcvtqq2ps:            "Convert Packed Quadword Integers to Packed Single-Precision Floating-Point Values"
NN_vcvtsd2usi:           "Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword Integer"
NN_vcvtss2usi:           "Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword Integer"
NN_vcvttpd2qq:           "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Quadword Integers"
NN_vcvttpd2udq:          "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers"
NN_vcvttpd2uqq:          "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers"
NN_vcvttps2udq:          "Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values"
NN_vcvttps2qq:           "Convert with Truncation Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values"
NN_vcvttps2uqq:          "Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values"
NN_vcvttsd2usi:          "Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer"
NN_vcvttss2usi:          "Convert with Truncation Scalar Single-Precision Floating-Point Value to Unsigned Integer"
NN_vcvtudq2pd:           "Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values"
NN_vcvtudq2ps:           "Convert Packed Unsigned Doubleword Integers to Packed Single-Precision Floating-Point Values"
NN_vcvtuqq2pd:           "Convert Packed Unsigned Quadword Integers to Packed Double-Precision Floating-Point Values"
NN_vcvtuqq2ps:           "Convert Packed Unsigned Quadword Integers to Packed Single-Precision Floating-Point Values"
NN_vcvtusi2sd:           "Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value"
NN_vcvtusi2ss:           "Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value"
NN_vdbpsadbw:            "Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes"
NN_vexpandpd:            "Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory"
NN_vexpandps:            "Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory"
NN_vextractf32x4:        "Extract Packed Floating-Point Values"
NN_vextractf64x2:        "Extract Packed Floating-Point Values"
NN_vextractf32x8:        "Extract Packed Floating-Point Values"
NN_vextractf64x4:        "Extract Packed Floating-Point Values"
NN_vextracti32x4:        "Extract packed Integer Values"
NN_vextracti64x2:        "Extract packed Integer Values"
NN_vextracti32x8:        "Extract packed Integer Values"
NN_vextracti64x4:        "Extract packed Integer Values"
NN_vfixupimmpd:          "Fix Up Special Packed Float64 Values"
NN_vfixupimmps:          "Fix Up Special Packed Float32 Values"
NN_vfixupimmsd:          "Fix Up Special Scalar Float64 Value"
NN_vfixupimmss:          "Fix Up Special Scalar Float32 Value"
NN_vfpclasspd:           "Tests Types Of a Packed Float64 Values"
NN_vfpclassps:           "Tests Types Of a Packed Float32 Values"
NN_vfpclasssd:           "Tests Types Of a Scalar Float64 Values"
NN_vfpclassss:           "Tests Types Of a Scalar Float32 Values"
NN_vgetexppd:            "Convert Exponents of Packed DP FP Values to DP FP Values"
NN_vgetexpps:            "Convert Exponents of Packed SP FP Values to SP FP Values"
NN_vgetexpsd:            "Convert Exponents of Scalar DP FP Values to DP FP Value"
NN_vgetexpss:            "Convert Exponents of Scalar SP FP Values to SP FP Value"
NN_vgetmantpd:           "Extract Float64 Vector of Normalized Mantissas from Float64 Vector"
NN_vgetmantps:           "Extract Float32 Vector of Normalized Mantissas from Float32 Vector"
NN_vgetmantsd:           "Extract Float64 of Normalized Mantissas from Float64 Scalar"
NN_vgetmantss:           "Extract Float32 Vector of Normalized Mantissa from Float32 Vector"
NN_vinsertf32x4:         "Insert Packed Floating-Point Values"
NN_vinsertf64x2:         "Insert Packed Floating-Point Values"
NN_vinsertf32x8:         "Insert Packed Floating-Point Values"
NN_vinsertf64x4:         "Insert Packed Floating-Point Values"
NN_vinserti32x4:         "Insert Packed Integer Values"
NN_vinserti64x2:         "Insert Packed Integer Values"
NN_vinserti32x8:         "Insert Packed Integer Values"
NN_vinserti64x4:         "Insert Packed Integer Values"
NN_vmovdqa32:            "Move Aligned Packed Integer Values"
NN_vmovdqa64:            "Move Aligned Packed Integer Values"
NN_vmovdqu8:             "Move Unaligned Packed Integer Values"
NN_vmovdqu16:            "Move Unaligned Packed Integer Values"
NN_vmovdqu32:            "Move Unaligned Packed Integer Values"
NN_vmovdqu64:            "Move Unaligned Packed Integer Values"
NN_vpabsq:               "Packed Absolute Value"
NN_vpandd:               "Logical AND"
NN_vpandq:               "Logical AND"
NN_vpandnd:              "Logical AND NOT"
NN_vpandnq:              "Logical AND NOT"
NN_vpbroadcastmb2q:      "Broadcast Mask to Vector Register"
NN_vpbroadcastmw2d:      "Broadcast Mask to Vector Register"
NN_vpcmpb:               "Compare Packed Byte Values Into Mask"
NN_vpcmpub:              "Compare Packed Byte Values Into Mask"
NN_vpcmpd:               "Compare Packed Integer Values into Mask"
NN_vpcmpud:              "Compare Packed Integer Values into Mask"
NN_vpcmpq:               "Compare Packed Integer Values into Mask"
NN_vpcmpuq:              "Compare Packed Integer Values into Mask"
NN_vpcmpw:               "Compare Packed Word Values Into Mask"
NN_vpcmpuw:              "Compare Packed Word Values Into Mask"
NN_vpcompressd:          "Store Sparse Packed Doubleword Integer Values into Dense Memory/Register"
NN_vpcompressq:          "Store Sparse Packed Quadword Integer Values into Dense Memory/Register"
NN_vpconflictd:          "Detect Conflicts Within a Vector of Packed Dword Values into Dense Memory/Register"
NN_vpconflictq:          "Detect Conflicts Within a Vector of Packed Qword Values into Dense Memory/Register"
NN_vpermb:               "Permute Packed Bytes Elements"
NN_vpermw:               "Permute Packed Words Elements"
NN_vpermi2b:             "Full Permute of Bytes From Two Tables Overwriting the Index"
NN_vpermi2w:             "Full Permute From Two Tables Overwriting the Index"
NN_vpermi2d:             "Full Permute From Two Tables Overwriting the Index"
NN_vpermi2q:             "Full Permute From Two Tables Overwriting the Index"
NN_vpermi2ps:            "Full Permute From Two Tables Overwriting the Index"
NN_vpermi2pd:            "Full Permute From Two Tables Overwriting the Index"
NN_vpermt2b:             "Full Permute of Bytes From Two Tables Overwriting a Table"
NN_vpermt2w:             "Full Permute from Two Tables Overwriting one Table"
NN_vpermt2d:             "Full Permute from Two Tables Overwriting one Table"
NN_vpermt2q:             "Full Permute from Two Tables Overwriting one Table"
NN_vpermt2ps:            "Full Permute from Two Tables Overwriting one Table"
NN_vpermt2pd:            "Full Permute from Two Tables Overwriting one Table"
NN_vpexpandd:            "Load Sparse Packed Doubleword Integer Values from Dense Memory/Register"
NN_vpexpandq:            "Load Sparse Packed Quadword Integer Values from Dense Memory/Register"
NN_vplzcntd:             "Count the Number of Leading Zero Bits for Packed Dword Values"
NN_vplzcntq:             "Count the Number of Leading Zero Bits for Packed Qword Values"
NN_vpmadd52luq:          "Packed Multiply of Unsigned 52-bit Integers and Add the Low 52-bit Products to Qword Accumulators"
NN_vpmadd52huq:          "Packed Multiply of Unsigned 52-bit Unsigned Integers and Add High 52-bit Products to 64-bit Accumulators"
NN_vpmaxsq:              "Maximum of Packed Signed Integers"
NN_vpmaxuq:              "Maximum of Packed Unsigned Integers"
NN_vpminsq:              "Minimum of Packed Signed Integers"
NN_vpminuq:              "Minimum of Packed Unsigned Integers"
NN_vpmovm2b:             "Convert a Mask Register to a Vector Register"
NN_vpmovm2w:             "Convert a Mask Register to a Vector Register"
NN_vpmovm2d:             "Convert a Mask Register to a Vector Register"
NN_vpmovm2q:             "Convert a Mask Register to a Vector Register"
NN_vpmovb2m:             "Convert a Vector Register to a Mask"
NN_vpmovw2m:             "Convert a Vector Register to a Mask"
NN_vpmovd2m:             "Convert a Vector Register to a Mask"
NN_vpmovq2m:             "Convert a Vector Register to a Mask"
NN_vpmovqb:              "Down Convert QWord to Byte"
NN_vpmovsqb:             "Down Convert QWord to Byte"
NN_vpmovusqb:            "Down Convert QWord to Byte"
NN_vpmovqw:              "Down Convert QWord to Word"
NN_vpmovsqw:             "Down Convert QWord to Word"
NN_vpmovusqw:            "Down Convert QWord to Word"
NN_vpmovqd:              "Down Convert QWord to DWord"
NN_vpmovsqd:             "Down Convert QWord to DWord"
NN_vpmovusqd:            "Down Convert QWord to DWord"
NN_vpmovdb:              "Down Convert DWord to Byte"
NN_vpmovsdb:             "Down Convert DWord to Byte"
NN_vpmovusdb:            "Down Convert DWord to Byte"
NN_vpmovdw:              "Down Convert DWord to Word"
NN_vpmovsdw:             "Down Convert DWord to Word"
NN_vpmovusdw:            "Down Convert DWord to Word"
NN_vpmovwb:              "Down Convert Word to Byte"
NN_vpmovswb:             "Down Convert Word to Byte"
NN_vpmovuswb:            "Down Convert Word to Byte"
NN_vpmullq:              "Multiply Packed Integers and Store Low Result"
NN_vpmultishiftqb:       "Select Packed Unaligned Bytes from Quadword Sources"
NN_vpord:                "Bitwise Logical Or"
NN_vporq:                "Bitwise Logical Or"
NN_vprold:               "Bit Rotate Left"
NN_vprolvd:              "Bit Rotate Left"
NN_vprolq:               "Bit Rotate Left"
NN_vprolvq:              "Bit Rotate Left"
NN_vprord:               "Bit Rotate Right"
NN_vprorvd:              "Bit Rotate Right"
NN_vprorq:               "Bit Rotate Right"
NN_vprorvq:              "Bit Rotate Right"
NN_vpscatterdd:          "Scatter Packed Dword with Signed Dword"
NN_vpscatterdq:          "Scatter Packed Qword with Signed Qword Indices"
NN_vpscatterqd:          "Scatter Packed Dword with Signed Dword"
NN_vpscatterqq:          "Scatter Packed Qword with Signed Qword Indices"
NN_vpsraq:               "Bit Shift Arithmetic Right"
NN_vpsllvw:              "Variable Bit Shift Left Logical"
NN_vpsrlvw:              "Variable Bit Shift Right Logical"
NN_vptestnmb:            "Logical NAND and Set"
NN_vptestnmw:            "Logical NAND and Set"
NN_vptestnmd:            "Logical NAND and Set"
NN_vptestnmq:            "Logical NAND and Set"
NN_vshuff32x4:           "Shuffle Packed Values at 128-bit Granularity"
NN_vshuff64x2:           "Shuffle Packed Values at 128-bit Granularity"
NN_vshufi32x4:           "Shuffle Packed Values at 128-bit Granularity"
NN_vshufi64x2:           "Shuffle Packed Values at 128-bit Granularity"
NN_vpternlogd:           "Bitwise Ternary Logic"
NN_vpternlogq:           "Bitwise Ternary Logic"
NN_vptestmb:             "Logical AND and Set Mask"
NN_vptestmw:             "Logical AND and Set Mask"
NN_vptestmd:             "Logical AND and Set Mask"
NN_vptestmq:             "Logical AND and Set Mask"
NN_vpsravw:              "Variable Bit Shift Right Arithmetic"
NN_vpsravq:              "Variable Bit Shift Right Arithmetic"
NN_vpxord:               "Exclusive Or"
NN_vpxorq:               "Exclusive Or"
NN_vrangepd:             "Range Restriction Calculation For Packed Pairs of Float64 Values"
NN_vrangeps:             "Range Restriction Calculation For Packed Pairs of Float32 Values"
NN_vrangesd:             "Range Restriction Calculation From a pair of Scalar Float64 Values"
NN_vrangess:             "Range Restriction Calculation From a Pair of Scalar Float32 Values"
NN_vrcp14pd:             "Compute Approximate Reciprocals of Packed Float64 Values"
NN_vrcp14sd:             "Compute Approximate Reciprocal of Scalar Float64 Value"
NN_vrcp14ps:             "Compute Approximate Reciprocals of Packed Float32 Values"
NN_vrcp14ss:             "Compute Approximate Reciprocal of Scalar Float32 Value"
NN_vreducepd:            "Perform Reduction Transformation on Packed Float64 Values"
NN_vreducesd:            "Perform a Reduction Transformation on a Scalar Float64 Value"
NN_vreduceps:            "Perform Reduction Transformation on Packed Float32 Values"
NN_vreducess:            "Perform a Reduction Transformation on a Scalar Float32 Value"
NN_vrndscalepd:          "Round Packed Float64 Values To Include A Given Number Of Fraction Bits"
NN_vrndscalesd:          "Round Scalar Float64 Value To Include A Given Number Of Fraction Bits"
NN_vrndscaleps:          "Round Packed Float32 Values To Include A Given Number Of Fraction Bits"
NN_vrndscaless:          "Round Scalar Float32 Value To Include A Given Number Of Fraction Bits"
NN_vrsqrt14pd:           "Compute Approximate Reciprocals of Square Roots of Packed Float64 Values"
NN_vrsqrt14sd:           "Compute Approximate Reciprocal of Square Root of Scalar Float64 Value"
NN_vrsqrt14ps:           "Compute Approximate Reciprocals of Square Roots of Packed Float32 Values"
NN_vrsqrt14ss:           "Compute Approximate Reciprocal of Square Root of Scalar Float32 Value"
NN_vscalefpd:            "Scale Packed Float64 Values With Float64 Values"
NN_vscalefsd:            "Scale Scalar Float64 Values With Float64 Values"
NN_vscalefps:            "Scale Packed Float32 Values With Float32 Values"
NN_vscalefss:            "Scale Scalar Float32 Value With Float32 Value"
NN_vscatterdps:          "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices"
NN_vscatterdpd:          "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices"
NN_vscatterqps:          "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices"
NN_vscatterqpd:          "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices"

NN_vexp2pd:              "Approximation to the Exponential 2^x of Packed Double-Precision Floating-Point Values with Less Than 2^-23 Relative Error"
NN_vexp2ps:              "Approximation to the Exponential 2^x of Packed Single-Precision Floating-Point Values with Less Than 2^-23 Relative Error"
NN_vrcp28pd:             "Approximation to the Reciprocal of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error"
NN_vrcp28sd:             "Approximation to the Reciprocal of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error"
NN_vrcp28ps:             "Approximation to the Reciprocal of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error"
NN_vrcp28ss:             "Approximation to the Reciprocal of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error"
NN_vrsqrt28pd:           "Approximation to the Reciprocal Square Root of Packed Double-Precision Floating-Point Values with Less Than 2^-28 Relative Error"
NN_vrsqrt28sd:           "Approximation to the Reciprocal Square Root of Scalar Double-Precision Floating-Point Value with Less Than 2^-28 Relative Error"
NN_vrsqrt28ps:           "Approximation to the Reciprocal Square Root of Packed Single-Precision Floating-Point Values with Less Than 2^-28 Relative Error"
NN_vrsqrt28ss:           "Approximation to the Reciprocal Square Root of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error"

NN_vgatherpf0dps:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint"
NN_vgatherpf0qps:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint"
NN_vgatherpf0dpd:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint"
NN_vgatherpf0qpd:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint"
NN_vgatherpf1dps:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint"
NN_vgatherpf1qps:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint"
NN_vgatherpf1dpd:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint"
NN_vgatherpf1qpd:        "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint"
NN_vscatterpf0dps:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write"
NN_vscatterpf0qps:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write"
NN_vscatterpf0dpd:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write"
NN_vscatterpf0qpd:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T0 Hint with Intent to Write"
NN_vscatterpf1dps:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write"
NN_vscatterpf1qps:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write"
NN_vscatterpf1dpd:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write"
NN_vscatterpf1qpd:       "Sparse Prefetch Packed SP/DP Data Values with Signed Dword, Signed Qword Indices Using T1 Hint with Intent to Write"

// AVX-512 comparison pseudo-ops

NN_vpcmpltd:             "Compare Packed Integer Values into Mask"
NN_vpcmpled:             "Compare Packed Integer Values into Mask"
NN_vpcmpneqd:            "Compare Packed Integer Values into Mask"
NN_vpcmpnltd:            "Compare Packed Integer Values into Mask"
NN_vpcmpnled:            "Compare Packed Integer Values into Mask"

NN_vpcmpequd:            "Compare Packed Integer Values into Mask"
NN_vpcmpltud:            "Compare Packed Integer Values into Mask"
NN_vpcmpleud:            "Compare Packed Integer Values into Mask"
NN_vpcmpnequd:           "Compare Packed Integer Values into Mask"
NN_vpcmpnltud:           "Compare Packed Integer Values into Mask"
NN_vpcmpnleud:           "Compare Packed Integer Values into Mask"

NN_vpcmpltq:             "Compare Packed Integer Values into Mask"
NN_vpcmpleq:             "Compare Packed Integer Values into Mask"
NN_vpcmpneqq:            "Compare Packed Integer Values into Mask"
NN_vpcmpnltq:            "Compare Packed Integer Values into Mask"
NN_vpcmpnleq:            "Compare Packed Integer Values into Mask"

NN_vpcmpequq:            "Compare Packed Integer Values into Mask"
NN_vpcmpltuq:            "Compare Packed Integer Values into Mask"
NN_vpcmpleuq:            "Compare Packed Integer Values into Mask"
NN_vpcmpnequq:           "Compare Packed Integer Values into Mask"
NN_vpcmpnltuq:           "Compare Packed Integer Values into Mask"
NN_vpcmpnleuq:           "Compare Packed Integer Values into Mask"

// Opmask instructions

NN_kaddw:                "ADD Two Masks"
NN_kaddb:                "ADD Two Masks"
NN_kaddq:                "ADD Two Masks"
NN_kaddd:                "ADD Two Masks"
NN_kandw:                "Bitwise Logical AND Masks"
NN_kandb:                "Bitwise Logical AND Masks"
NN_kandq:                "Bitwise Logical AND Masks"
NN_kandd:                "Bitwise Logical AND Masks"
NN_kandnw:               "Bitwise Logical AND NOT Masks"
NN_kandnb:               "Bitwise Logical AND NOT Masks"
NN_kandnq:               "Bitwise Logical AND NOT Masks"
NN_kandnd:               "Bitwise Logical AND NOT Masks"
NN_kmovw:                "Move from and to Mask Registers"
NN_kmovb:                "Move from and to Mask Registers"
NN_kmovq:                "Move from and to Mask Registers"
NN_kmovd:                "Move from and to Mask Registers"
NN_kunpckbw:             "Unpack for Mask Registers"
NN_kunpckwd:             "Unpack for Mask Registers"
NN_kunpckdq:             "Unpack for Mask Registers"
NN_knotw:                "NOT Mask Register"
NN_knotb:                "NOT Mask Register"
NN_knotq:                "NOT Mask Register"
NN_knotd:                "NOT Mask Register"
NN_korw:                 "Bitwise Logical OR Masks"
NN_korb:                 "Bitwise Logical OR Masks"
NN_korq:                 "Bitwise Logical OR Masks"
NN_kord:                 "Bitwise Logical OR Masks"
NN_kortestw:             "OR Masks And Set Flags"
NN_kortestb:             "OR Masks And Set Flags"
NN_kortestq:             "OR Masks And Set Flags"
NN_kortestd:             "OR Masks And Set Flags"
NN_kshiftlw:             "Shift Left Mask Registers"
NN_kshiftlb:             "Shift Left Mask Registers"
NN_kshiftlq:             "Shift Left Mask Registers"
NN_kshiftld:             "Shift Left Mask Registers"
NN_kshiftrw:             "Shift Right Mask Registers"
NN_kshiftrb:             "Shift Right Mask Registers"
NN_kshiftrq:             "Shift Right Mask Registers"
NN_kshiftrd:             "Shift Right Mask Registers"
NN_kxnorw:               "Bitwise Logical XNOR Masks"
NN_kxnorb:               "Bitwise Logical XNOR Masks"
NN_kxnorq:               "Bitwise Logical XNOR Masks"
NN_kxnord:               "Bitwise Logical XNOR Masks"
NN_ktestw:               "Packed Bit Test Masks and Set Flags"
NN_ktestb:               "Packed Bit Test Masks and Set Flags"
NN_ktestq:               "Packed Bit Test Masks and Set Flags"
NN_ktestd:               "Packed Bit Test Masks and Set Flags"
NN_kxorw:                "Bitwise Logical XOR Masks"
NN_kxorb:                "Bitwise Logical XOR Masks"
NN_kxorq:                "Bitwise Logical XOR Masks"
NN_kxord:                "Bitwise Logical XOR Masks"

// SHA Extensions

NN_sha1rnds4:            "Perform Four Rounds of SHA1 Operation"
NN_sha1nexte:            "Calculate SHA1 State Variable E after Four Rounds"
NN_sha1msg1:             "Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords"
NN_sha1msg2:             "Perform a Final Calculation for the Next Four SHA1 Message Dwords"
NN_sha256rnds2:          "Perform Two Rounds of SHA256 Operation"
NN_sha256msg1:           "Perform an Intermediate Calculation for the Next Four SHA256 Message Dwords"
NN_sha256msg2:           "Perform a Final Calculation for the Next Four SHA256 Message Dwords"

// Intel Software Guard Extensions

NN_encls:                "Execute an Enclave System Function of Specified Leaf Number"
NN_enclu:                "Execute an Enclave User Function of Specified Leaf Number"

// AMD XOP

NN_vfrczpd:              "Extract Fraction Packed Double-Precision Floating-Point"
NN_vfrczps:              "Extract Fraction Packed Single-Precision Floating-Point"
NN_vfrczsd:              "Extract Fraction Scalar Double-Precision Floating-Point"
NN_vfrczss:              "Extract Fraction Scalar Single-Precision Floating Point"
NN_vpcmov:               "Vector Conditional Moves"
NN_vpcomb:               "Compare Vector Signed Bytes"
NN_vpcomd:               "Compare Vector Signed Doublewords"
NN_vpcomq:               "Compare Vector Signed Quadwords"
NN_vpcomub:              "Compare Vector Unsigned Bytes"
NN_vpcomud:              "Compare Vector Unsigned Doublewords"
NN_vpcomuq:              "Compare Vector Unsigned Quadwords"
NN_vpcomuw:              "Compare Vector Unsigned Words"
NN_vpcomw:               "Compare Vector Signed Words"
NN_vpermil2pd:           "Permute Two-Source Double-Precision Floating-Point Values"
NN_vpermil2ps:           "Permute Two-Source Single-Precision Floating-Point Values"
NN_vphaddbd:             "Packed Horizontal Add Signed Byte to Signed Doubleword"
NN_vphaddbq:             "Packed Horizontal Add Signed Byte to Signed Quadword"
NN_vphaddbw:             "Packed Horizontal Add Signed Byte to Signed Word"
NN_vphadddq:             "Packed Horizontal Add Signed Doubleword to Signed Quadword"
NN_vphaddubd:            "Packed Horizontal Add Unsigned Byte to Doubleword"
NN_vphaddubq:            "Packed Horizontal Add Unsigned Byte to Quadword"
NN_vphaddubw:            "Packed Horizontal Add Unsigned Byte to Word"
NN_vphaddudq:            "Packed Horizontal Add Unsigned Doubleword to Quadword"
NN_vphadduwd:            "Packed Horizontal Add Unsigned Word to Doubleword"
NN_vphadduwq:            "Packed Horizontal Add Unsigned Word to Quadword"
NN_vphaddwd:             "Packed Horizontal Add Signed Word to Signed Doubleword"
NN_vphaddwq:             "Packed Horizontal Add Signed Word to Signed Quadword"
NN_vphsubbw:             "Packed Horizontal Subtract Signed Byte to Signed Word"
NN_vphsubdq:             "Packed Horizontal Subtract Signed Doubleword to Signed Quadword"
NN_vphsubwd:             "Packed Horizontal Subtract Signed Word to Signed Doubleword"
NN_vpmacsdd:             "Packed Multiply Accumulate Signed Doubleword to Signed Doubleword"
NN_vpmacsdqh:            "Packed Multiply Accumulate Signed High Doubleword to Signed Quadword"
NN_vpmacsdql:            "Packed Multiply Accumulate Signed Low Doubleword to Signed Quadword"
NN_vpmacssdd:            "Packed Multiply Accumulate Signed Doubleword to Signed Doubleword with Saturation"
NN_vpmacssdqh:           "Packed Multiply Accumulate Signed High Doubleword to Signed Quadword with Saturation"
NN_vpmacssdql:           "Packed Multiply Accumulate Signed Low Doubleword to Signed Quadword with Saturation"
NN_vpmacsswd:            "Packed Multiply Accumulate Signed Word to Signed Doubleword with Saturation"
NN_vpmacssww:            "Packed Multiply Accumulate Signed Word to Signed Word with Saturation"
NN_vpmacswd:             "Packed Multiply Accumulate Signed Word to Signed Doubleword"
NN_vpmacsww:             "Packed Multiply Accumulate Signed Word to Signed Word"
NN_vpmadcsswd:           "Packed Multiply, Add and Accumulate Signed Word to Signed Doubleword with Saturation"
NN_vpmadcswd:            "Packed Multiply Add and Accumulate Signed Word to Signed Doubleword"
NN_vpperm:               "Packed Permute Bytes"
NN_vprotb:               "Packed Rotate Bytes"
NN_vprotd:               "Packed Rotate Doublewords"
NN_vprotq:               "Packed Rotate Quadwords"
NN_vprotw:               "Packed Rotate Words"
NN_vpshab:               "Packed Shift Arithmetic Bytes"
NN_vpshad:               "Packed Shift Arithmetic Doublewords"
NN_vpshaq:               "Packed Shift Arithmetic Quadwords"
NN_vpshaw:               "Packed Shift Arithmetic Words"
NN_vpshlb:               "Packed Shift Logical Bytes"
NN_vpshld:               "Packed Shift Logical Doublewords"
NN_vpshlq:               "Packed Shift Logical Quadwords"
NN_vpshlw:               "Packed Shift Logical Words"

// AMD XOP comparison pseudo-ops

NN_vpcomltb:             "Compare Vector Signed Bytes"
NN_vpcomleb:             "Compare Vector Signed Bytes"
NN_vpcomgtb:             "Compare Vector Signed Bytes"
NN_vpcomgeb:             "Compare Vector Signed Bytes"
NN_vpcomeqb:             "Compare Vector Signed Bytes"
NN_vpcomneqb:            "Compare Vector Signed Bytes"
NN_vpcomfalseb:          "Compare Vector Signed Bytes"
NN_vpcomtrueb:           "Compare Vector Signed Bytes"

NN_vpcomltw:             "Compare Vector Signed Words"
NN_vpcomlew:             "Compare Vector Signed Words"
NN_vpcomgtw:             "Compare Vector Signed Words"
NN_vpcomgew:             "Compare Vector Signed Words"
NN_vpcomeqw:             "Compare Vector Signed Words"
NN_vpcomneqw:            "Compare Vector Signed Words"
NN_vpcomfalsew:          "Compare Vector Signed Words"
NN_vpcomtruew:           "Compare Vector Signed Words"

NN_vpcomltd:             "Compare Vector Signed Doublewords"
NN_vpcomled:             "Compare Vector Signed Doublewords"
NN_vpcomgtd:             "Compare Vector Signed Doublewords"
NN_vpcomged:             "Compare Vector Signed Doublewords"
NN_vpcomeqd:             "Compare Vector Signed Doublewords"
NN_vpcomneqd:            "Compare Vector Signed Doublewords"
NN_vpcomfalsed:          "Compare Vector Signed Doublewords"
NN_vpcomtrued:           "Compare Vector Signed Doublewords"

NN_vpcomltq:             "Compare Vector Signed Quadwords"
NN_vpcomleq:             "Compare Vector Signed Quadwords"
NN_vpcomgtq:             "Compare Vector Signed Quadwords"
NN_vpcomgeq:             "Compare Vector Signed Quadwords"
NN_vpcomeqq:             "Compare Vector Signed Quadwords"
NN_vpcomneqq:            "Compare Vector Signed Quadwords"
NN_vpcomfalseq:          "Compare Vector Signed Quadwords"
NN_vpcomtrueq:           "Compare Vector Signed Quadwords"

NN_vpcomltub:            "Compare Vector Unsigned Bytes"
NN_vpcomleub:            "Compare Vector Unsigned Bytes"
NN_vpcomgtub:            "Compare Vector Unsigned Bytes"
NN_vpcomgeub:            "Compare Vector Unsigned Bytes"
NN_vpcomequb:            "Compare Vector Unsigned Bytes"
NN_vpcomnequb:           "Compare Vector Unsigned Bytes"
NN_vpcomfalseub:         "Compare Vector Unsigned Bytes"
NN_vpcomtrueub:          "Compare Vector Unsigned Bytes"

NN_vpcomltuw:            "Compare Vector Unsigned Words"
NN_vpcomleuw:            "Compare Vector Unsigned Words"
NN_vpcomgtuw:            "Compare Vector Unsigned Words"
NN_vpcomgeuw:            "Compare Vector Unsigned Words"
NN_vpcomequw:            "Compare Vector Unsigned Words"
NN_vpcomnequw:           "Compare Vector Unsigned Words"
NN_vpcomfalseuw:         "Compare Vector Unsigned Words"
NN_vpcomtrueuw:          "Compare Vector Unsigned Words"

NN_vpcomltud:            "Compare Vector Unsigned Doublewords"
NN_vpcomleud:            "Compare Vector Unsigned Doublewords"
NN_vpcomgtud:            "Compare Vector Unsigned Doublewords"
NN_vpcomgeud:            "Compare Vector Unsigned Doublewords"
NN_vpcomequd:            "Compare Vector Unsigned Doublewords"
NN_vpcomnequd:           "Compare Vector Unsigned Doublewords"
NN_vpcomfalseud:         "Compare Vector Unsigned Doublewords"
NN_vpcomtrueud:          "Compare Vector Unsigned Doublewords"

NN_vpcomltuq:            "Compare Vector Unsigned Quadwords"
NN_vpcomleuq:            "Compare Vector Unsigned Quadwords"
NN_vpcomgtuq:            "Compare Vector Unsigned Quadwords"
NN_vpcomgeuq:            "Compare Vector Unsigned Quadwords"
NN_vpcomequq:            "Compare Vector Unsigned Quadwords"
NN_vpcomnequq:           "Compare Vector Unsigned Quadwords"
NN_vpcomfalseuq:         "Compare Vector Unsigned Quadwords"
NN_vpcomtrueuq:          "Compare Vector Unsigned Quadwords"

// AMD Excavator

NN_monitorx:             "Setup Monitor Address"
NN_mwaitx:               "Monitor Wait with Timeout"

// AMD Zen

NN_clzero:               "Zero out 64 byte cache"

// Intel Processor Trace

NN_ptwrite:              "Write Data to a Processor Trace Packet"

// new Intel AVX-512 instructions (December 2016)

NN_v4fmaddps:            "Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)"
NN_v4fnmaddps:           "Packed Single-Precision Floating-Point Fused Multiply-Add (4-iterations)"
NN_v4fmaddss:            "Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)"
NN_v4fnmaddss:           "Scalar Single-Precision Floating-Point Fused Multiply-Add (4-iterations)"
NN_vp4dpwssd:            "Dot Product of Signed Words with Dword Accumulation (4-iterations)"
NN_vp4dpwssds:           "Dot Product of Signed Words with Dword Accumulation and Saturation (4-iterations)"
NN_vpopcntd:             "Return the Count of Number of Bits Set to 1 in DWORD"
NN_vpopcntq:             "Return the Count of Number of Bits Set to 1 in QWORD"

// Read Processor ID

NN_rdpid:                "Read Processor ID"

// Invoke VM function

NN_vmfunc:               "Invoke VM function"

// Control-flow Enforcement

NN_incsspd:              "Increment Shadow Stack Pointer (by 4)"
NN_incsspq:              "Increment Shadow Stack Pointer (by 8)"
NN_rdsspd:               "Read (low 32 bits of) Shadow Stack Pointer"
NN_rdsspq:               "Read Shadow Stack Pointer"
NN_saveprevssp:          "Save Previous Shadow Stack Pointer"
NN_rstorssp:             "Restore saved Shadow Stack Pointer"
NN_wrssd:                "Write (4 bytes) to shadow stack"
NN_wrssq:                "Write (8 bytes) to shadow stack"
NN_wrussd:               "Write (4 bytes) to User Shadow Stack"
NN_wrussq:               "Write (8 bytes) to User Shadow Stack"
NN_setssbsy:             "Mark Shadow Stack Busy"
NN_clrssbsy:             "Clear Shadow Stack Busy Flag"
NN_endbr64:              "Terminate an Indirect Branch in 64-bit Mode"
NN_endbr32:              "Terminate an Indirect Branch in 32-bit and Compatibility Mode"

// Undefined Instruction

NN_ud0:                  "Undefined Instruction"
NN_ud1:                  "Undefined Instruction"

// Enqueue Stores
NN_enqcmd:              "Enqueue Command"
NN_enqcmds:             "Enqueue Command Supervisor"

// AMD Zen2

NN_mcommit:             "Commit Stores to Memory"
NN_rdpru:               "Read Processor Register"

// Intel Tremont instructions

NN_cldemote:            "Cache Line Demote"
NN_enclv:               "Execute an Enclave VMM Function of Specified Leaf Number"

// Direct Stores

NN_movdiri:             "Move Doubleword as Direct Store"
NN_movdir64b:           "Move 64 Bytes as Direct Store"

// Intel WAITPKG instructions

NN_tpause:              "Timed PAUSE"
NN_umonitor:            "User Level Set Up Monitor Address"
NN_umwait:              "User Level Monitor Wait"

// Intel Sapphire Rapids instructions

NN_serialize:           "Serialize Instruction Execution"

// Intel TSX

NN_xresldtrk:           "Resume Tracking Load Addresses"
NN_xsusldtrk:           "Suspend Tracking Load Addresses"

0xC000: "Communicate with NT extension DLL:\n"
        "INPUT:  DS:SI - asciiz string of DLL name.\n"
        "        ES:DI - asciiz string of Init Routine in the DLL. (Optional)\n"
        "        DS:BX - asciiz string to Dispatch routine in the DLL.\n"
        "OUTPUT: SUCCESS: AX = Handle (non Zero)\n"
        "        FAILURE: AX = Error Code:\n"
        "           1 - DLL not found; 2 - Dispacth routine not found.\n"
        "           3 - Init Routine Not Found; 4 - Insufficient Memory"
0xC001 ||
0xC002: "Communicate with NT extension DLL:\n"
        "AX - Handle of DLL returned by RegisterModule Call."
0xC003: "Communicate with NT extension DLL:\n"
        "This service causes the simulation of intel instructions\n"
        "to stop and control to return to VDD."

