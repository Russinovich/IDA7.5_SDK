  j_nop:         "Do nothing"
  j_aconst_null: "Push null object reference"
  j_iconst_m1:   "Push integer constant -1 "
  j_iconst_0:    "Push the integer 0"
  j_iconst_1:    "Push the integer 1"
  j_iconst_2:    "Push the integer 2"
  j_iconst_3:    "Push the integer 3"
  j_iconst_4:    "Push the integer 4"
  j_iconst_5:    "Push the integer 5"
  j_lconst_0:    "Push the long integer 0"
  j_lconst_1:    "Push the long integer 1"
  j_fconst_0:    "Push the single-precision foating point 0.0"
  j_fconst_1:    "Push the single-precision foating point 1.0"
  j_fconst_2:    "Push the single-precision foating point 2.0"
  j_dconst_0:    "Push the double-precision foating point 0.0"
  j_dconst_1:    "Push the double-precision foating point 1.0"
  j_bipush:      "Push one-byte signed integer"
  j_sipush:      "Push two-byte signed integer"
  j_ldc:         "Push item from constant pool (i1)"
  j_ldcw:        "Push item from constant pool (i2)"
  j_ldc2w:       "Push long or double from constant pool"
  j_iload:       "$!Push integer value of the local variable"
  j_lload:       "$!Push long value of the local variable"
  j_fload:       "$!Push single float value of the local variable"
  j_dload:       "$!Push double float value of the local variable"
  j_aload:       "$!Push object reference from local variable"
  j_iload_0:     "$!Push integer value of the local variable #0"
  j_iload_1:     "$!Push integer value of the local variable #1"
  j_iload_2:     "$!Push integer value of the local variable #2"
  j_iload_3:     "$!Push integer value of the local variable #3"
  j_lload_0:     "$!Push long value of the local variable #0"
  j_lload_1:     "$!Push long value of the local variable #1"
  j_lload_2:     "$!Push long value of the local variable #2"
  j_lload_3:     "$!Push long value of the local variable #3"
  j_fload_0:     "$!Push single float value of the local variable #0"
  j_fload_1:     "$!Push single float value of the local variable #1"
  j_fload_2:     "$!Push single float value of the local variable #2"
  j_fload_3:     "$!Push single float value of the local variable #3"
  j_dload_0:     "$!Push double float value of the local variable #0"
  j_dload_1:     "$!Push double float value of the local variable #1"
  j_dload_2:     "$!Push double float value of the local variable #2"
  j_dload_3:     "$!Push double float value of the local variable #3"
  j_aload_0:     "$!Push object reference from local variable #0"
  j_aload_1:     "$!Push object reference from local variable #1"
  j_aload_2:     "$!Push object reference from local variable #2"
  j_aload_3:     "$!Push object reference from local variable #3"
  j_iaload:      "Push integer from array"
  j_laload:      "Push long from array"
  j_faload:      "Push single float from array"
  j_daload:      "Push double float from array"
  j_aaload:      "Push object reference from array"
  j_baload:      "Push signed byte from array"
  j_caload:      "Push signed char from array"
  j_saload:      "Push short from array"
  j_istore:      "$!Pop integer value into local variable"
  j_lstore:      "$!Pop long value into local variable"
  j_fstore:      "$!Pop single float value into local variable"
  j_dstore:      "$!Pop double float value into local variable"
  j_astore:      "$!Pop object reference into local variable"
  j_istore_0:    "$!Pop integer value into local variable #0"
  j_istore_1:    "$!Pop integer value into local variable #1"
  j_istore_2:    "$!Pop integer value into local variable #2"
  j_istore_3:    "$!Pop integer value into local variable #3"
  j_lstore_0:    "$!Pop long value into local variable #0"
  j_lstore_1:    "$!Pop long value into local variable #1"
  j_lstore_2:    "$!Pop long value into local variable #2"
  j_lstore_3:    "$!Pop long value into local variable #3"
  j_fstore_0:    "$!Pop single float value into local variable #0"
  j_fstore_1:    "$!Pop single float value into local variable #1"
  j_fstore_2:    "$!Pop single float value into local variable #2"
  j_fstore_3:    "$!Pop single float value into local variable #3"
  j_dstore_0:    "$!Pop double float value into local variable #0"
  j_dstore_1:    "$!Pop double float value into local variable #1"
  j_dstore_2:    "$!Pop double float value into local variable #2"
  j_dstore_3:    "$!Pop double float value into local variable #3"
  j_astore_0:    "$!Pop object reference into local variable #0"
  j_astore_1:    "$!Pop object reference into local variable #1"
  j_astore_2:    "$!Pop object reference into local variable #2"
  j_astore_3:    "$!Pop object reference into local variable #3"
  j_iastore:     "Pop integer from array"
  j_lastore:     "Pop long from array"
  j_fastore:     "Pop single float from array"
  j_dastore:     "Pop double float from array"
  j_aastore:     "Pop object reference from array"
  j_bastore:     "Pop signed byte from array"
  j_castore:     "Pop signed char from array"
  j_sastore:     "Pop short from array"
  j_pop:         "Pop top stack word"
  j_pop2:        "Pop top two stack word"
  j_dup:         "Duplicate top stack word"
  j_dup_x1:      "Duplicate top stack word and put two down"
  j_dup_x2:      "Duplicate top stack word and put three down"
  j_dup2:        "Duplicate top two stack word"
  j_dup2_x1:     "Duplicate top two stack words and put two down"
  j_dup2_x2:     "Duplicate top two stack words and put three down"
  j_swap:        "Swap two top stack words"
  j_iadd:        "Integer add"
  j_ladd:        "Long add"
  j_fadd:        "Single float add"
  j_dadd:        "Double float add"
  j_isub:        "Integer subtract"
  j_lsub:        "Long subtract"
  j_fsub:        "Single float subtract"
  j_dsub:        "Double float subtract"
  j_imul:        "Integer multiply"
  j_lmul:        "Long multiply"
  j_fmul:        "Single float multiply"
  j_dmul:        "Double float multiply"
  j_idiv:        "Integer divide"
  j_ldiv:        "Long divide"
  j_fdiv:        "Single float divide"
  j_ddiv:        "Double float divide"
  j_irem:        "Integer remainder"
  j_lrem:        "Long remainder"
  j_frem:        "Single float remainder"
  j_drem:        "Double float remainder"
  j_ineg:        "Integer negate"
  j_lneg:        "Long negate"
  j_fneg:        "Single float negate"
  j_dneg:        "Double float negate"
  j_ishl:        "Integer shift left"
  j_lshl:        "Long shift left"
  j_ishr:        "Integer logical shift right"
  j_lshr:        "Long logical shift right"
  j_iushr:       "Integer arithmetic shift right"
  j_lushr:        "Long arithmeticshift right"
  j_iand:        "Integer boolean AND"
  j_land:        "Long boolean AND"
  j_ior:         "Integer boolean OR"
  j_lor:         "Long boolean OR"
  j_ixor:        "Integer boolean XOR"
  j_lxor:        "Long boolean XOR"
  j_iinc:        "$!Add 8-bit signed const to local variable"
  j_i2l:         "Integer to Long conversion"
  j_i2f:         "Integer to single float conversion"
  j_i2d:         "Integer to double float conversion"
  j_l2i:         "Long to Integer conversion"
  j_l2f:         "Long to single float conversion"
  j_l2d:         "Long to double float conversion"
  j_f2i:         "Single float to Integer conversion"
  j_f2l:         "Single float to Long conversion"
  j_f2d:         "Single float to double float conversion"
  j_d2i:         "Double float to Integer conversion"
  j_d2l:         "Double float to Long conversion"
  j_d2f:         "Double float to double float conversion"
  j_i2b:         "Integer to signed byte conversion"
  j_i2c:         "Integer to unsigned short conversion"
  j_i2s:         "Integer to signed short conversion"
  j_lcmp:        "Long compare"
  j_fcmpl:       "Single float compare (-1 on NaN)"
  j_fcmpg:       "Single float compare (1 on NaN)"
  j_dcmpl:       "Double float compare (-1 on NaN)"
  j_dcmpg:       "Double float compare (1 on NaN)"
  j_ifeq:        "Branch if equal to 0"
  j_ifne:        "Branch if not equal to 0"
  j_iflt:        "Branch if less then 0"
  j_ifge:        "Branch if greater than or equal to 0"
  j_ifgt:        "Branch if greater than 0"
  j_ifle:        "Branch if less than or equal to 0"
  j_if_icmpeq:   "Branch if integers equal"
  j_if_icmpne:   "Branch if integers not equal"
  j_if_icmplt:   "Branch if integers less than"
  j_if_icmpge:   "Branch if integers grater than or equal to"
  j_if_icmpgt:   "Branch if integers grater than"
  j_if_icmple:   "Branch if integers less than or equal to"
  j_if_acmpeq:   "Branch if object references are equal"
  j_if_acmpne:   "Branch if object references not equal"
  j_goto:        "Branch always"
  j_jsr:         "Jump subroitine"
  j_ret:         "$!Return from subroitine"
  j_tableswitch: "Access jump table by index and jump"
  j_lookupswitch: "Access jump table by key match and jump"
  j_ireturn:     "Return integer from function"
  j_lreturn:     "Return long from function"
  j_freturn:     "Return single floatr from function"
  j_dreturn:     "Return double float from function"
  j_areturn:     "Return object reference from function"
  j_return:      "Return (void) from procedure"
  j_getstatic:   "Set static field from class"
  j_putstatic:   "Set static field in class"
  j_getfield:    "Fetch field from object"
  j_putfield:    "Set field in object"
  j_invokevirtual:    "invoke instance method"
  j_invokespecial:    "invoke instance method (superclass/privare/init)"
  j_invokestatic:     "invoke a class (static) method"
  j_invokeinterface:  "invoke interface method"
  j_invokedynamic:    "invoke instance method (resolve by parameter)"
  j_new:          "Create new object"
  j_newarray:    "Allocate a new array"
  j_anewarray:   "Allocate a new array of references to object"
  j_arraylength: "Get length of array"
  j_athrow:      "Throw exception or error"
  j_checkcast:   "Make sure object is of given type"
  j_instanceof:  "Determine if an object is of given type"
  j_monitorenter: "Enter monitored region of code"
  j_monitorexit: "Exit monitored region of code"
  j_wide:        "WIDE PREFIX. (Abnormal situation!!!)"
  j_multianewarray: "Allocate a new multi-dimensional array"
  j_ifnull:        "Branch if NULL-ptr"
  j_ifnonnull:     "Branch if not NULL-ptr"
  j_goto_w:        "Branch always (wide form)"
  j_jsr_w:         "Jump subroitine (wide foem)"
  j_breakpoint:    "Stop and pass control to breakpoint handler"

//  j_ret_w:         "Return from subroitine (wide form)"

