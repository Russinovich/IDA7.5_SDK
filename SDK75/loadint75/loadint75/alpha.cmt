
ALPHA_addf:         "Add F_floating"
ALPHA_addg:         "Add G_floating"
ALPHA_addl:         "Add longword"
ALPHA_addl_v:       "Add longword with overflow"
ALPHA_addq:         "Add quadword"
ALPHA_addq_v:       "Add quadword with overflow"
ALPHA_adds:         "Add S_floating"
ALPHA_addt:         "Add T_floating"
ALPHA_amask:        "Architecture mask"
ALPHA_and:          "Logical product"
ALPHA_beq:          "Branch if = zero"
ALPHA_bge:          "Branch if >= zero"
ALPHA_bgt:          "Branch if > zero"
ALPHA_bic:          "Bit clear"
ALPHA_bis:          "Logical sum"
ALPHA_blbc:         "Branch if low bit clear"
ALPHA_blbs:         "Branch if low bit set"
ALPHA_ble:          "Branch if <= zero"
ALPHA_blt:          "Branch if < zero"
ALPHA_bne:          "Branch if != zero"
ALPHA_br:           "Unconditional branch"
ALPHA_bsr:          "Branch to subroutine"
ALPHA_call_pal:     "Trap to PALcode"
ALPHA_cmoveq:       "CMOVE if = zero"
ALPHA_cmovge:       "CMOVE if >= zero"
ALPHA_cmovgt:       "CMOVE if > zero"
ALPHA_cmovlbc:      "CMOVE if low bit clear"
ALPHA_cmovlbs:      "CMOVE if low bit set"
ALPHA_cmovle:       "CMOVE if <= zero"
ALPHA_cmovlt:       "CMOVE if < zero"
ALPHA_cmovne:       "CMOVE if != zero"
ALPHA_cmpbge:       "Compare byte"
ALPHA_cmpeq:        "Compare signed quadword equal"
ALPHA_cmpgeq:       "Compare G_floating equal"
ALPHA_cmpgle:       "Compare G_floating less than or equal"
ALPHA_cmpglt:       "Compare G_floating less than"
ALPHA_cmple:        "Compare signed quadword less than or equal"
ALPHA_cmplt:        "Compare signed quadword less than"
ALPHA_cmpteq:       "Compare T_floating equal"
ALPHA_cmptle:       "Compare T_floating less than or equal"
ALPHA_cmptlt:       "Compare T_floating less than"
ALPHA_cmptun:       "Compare T_floating unordered"
ALPHA_cmpule:       "Compare unsigned quadword less than or equal"
ALPHA_cmpult:       "Compare unsigned quadword less than"
ALPHA_cpys:         "Copy sign"
ALPHA_cpyse:        "Copy sign and exponent"
ALPHA_cpysn:        "Copy sign negate"
ALPHA_ctlz:         "Count leading zero"
ALPHA_ctpop:        "Count population"
ALPHA_cttz:         "Count trailing zero"
ALPHA_cvtdg:        "Convert D_floating to G_floating"
ALPHA_cvtgd:        "Convert G_floating to D_floating"
ALPHA_cvtgf:        "Convert G_floating to F_floating"
ALPHA_cvtgq:        "Convert G_floating to quadword"
ALPHA_cvtlq:        "Convert longword to quadword"
ALPHA_cvtqf:        "Convert quadword to F_floating"
ALPHA_cvtqg:        "Convert quadword to G_floating"
ALPHA_cvtql:        "Convert quadword to longword"
ALPHA_cvtqs:        "Convert quadword to S_floating"
ALPHA_cvtqt:        "Convert quadword to T_floating"
ALPHA_cvtst:        "Convert S_floating to T_floating"
ALPHA_cvttq:        "Convert T_floating to quadword"
ALPHA_cvtts:        "Convert T_floating to S_floating"
ALPHA_divf:         "Divide F_floating"
ALPHA_divg:         "Divide G_floating"
ALPHA_divs:         "Divide S_floating"
ALPHA_divt:         "Divide T_floating"
ALPHA_ecb:          "Evict cache block"
ALPHA_eqv:          "Logical equivalence"
ALPHA_excb:         "Exception barrier"
ALPHA_extbl:        "Extract byte low"
ALPHA_extlh:        "Extract longword high"
ALPHA_extll:        "Extract longword low"
ALPHA_extqh:        "Extract quadword high"
ALPHA_extql:        "Extract quadword low"
ALPHA_extwh:        "Extract word high"
ALPHA_extwl:        "Extract word low"
ALPHA_fbeq:         "Floating branch if = zero"
ALPHA_fbge:         "Floating branch if >= zero"
ALPHA_fbgt:         "Floating branch if > zero"
ALPHA_fble:         "Floating branch if <= zero"
ALPHA_fblt:         "Floating branch if < zero"
ALPHA_fbne:         "Floating branch if != zero"
ALPHA_fcmoveq:      "FCMOVE if = zero"
ALPHA_fcmovge:      "FCMOVE if >= zero"
ALPHA_fcmovgt:      "FCMOVE if > zero"
ALPHA_fcmovle:      "FCMOVE if <= zero"
ALPHA_fcmovlt:      "FCMOVE if < zero"
ALPHA_fcmovne:      "FCMOVE if != zero"
ALPHA_fetch:        "Prefetch data"
ALPHA_fetch_m:      "Prefetch data, modify intent"
ALPHA_ftois:        "Floating to integer move, S_floating"
ALPHA_ftoit:        "Floating to integer move, T_floating"
ALPHA_implver:      "Implementation version"
ALPHA_insbl:        "Insert byte low"
ALPHA_inslh:        "Insert longword high"
ALPHA_insll:        "Insert longword low"
ALPHA_insqh:        "Insert quadword high"
ALPHA_insql:        "Insert quadword low"
ALPHA_inswh:        "Insert word high"
ALPHA_inswl:        "Insert word low"
ALPHA_itoff:        "Integer to floating move, F_floating"
ALPHA_itofs:        "Integer to floating move, S_floating"
ALPHA_itoft:        "Integer to floating move, T_floating"
ALPHA_jmp:          "Jump"
ALPHA_jsr:          "Jump to subroutine"
ALPHA_jsr_coroutine:"Jump to subroutine return"
ALPHA_lda:          "Load address"
ALPHA_ldah:         "Load address high"
ALPHA_ldbu:         "Load zero-extended byte"
ALPHA_ldwu:         "Load zero-extended word"
ALPHA_ldf:          "Load F_floating"
ALPHA_ldg:          "Load G_floating"
ALPHA_ldl:          "Load sign-extended longword"
ALPHA_ldl_l:        "Load sign-extended longword locked"
ALPHA_ldq:          "Load quadword"
ALPHA_ldq_l:        "Load quadword locked"
ALPHA_ldq_u:        "Load unaligned quadword"
ALPHA_lds:          "Load S_floating"
ALPHA_ldt:          "Load T_floating"
ALPHA_maxsb8:       "Vector signed byte maximum"
ALPHA_maxsw4:       "Vector signed word maximum"
ALPHA_maxub8:       "Vector unsigned byte maximum"
ALPHA_maxuw4:       "Vector unsigned word maximum"
ALPHA_mb:           "Memory barrier"
ALPHA_mf_fpcr:      "Move from FPCR"
ALPHA_minsb8:       "Vector signed byte minimum"
ALPHA_minsw4:       "Vector signed word minimum"
ALPHA_minub8:       "Vector unsigned byte minimum"
ALPHA_minuw4:       "Vector unsigned word minimum"
ALPHA_mskbl:        "Mask byte low"
ALPHA_msklh:        "Mask longword high"
ALPHA_mskll:        "Mask longword low"
ALPHA_mskqh:        "Mask quadword high"
ALPHA_mskql:        "Mask quadword low"
ALPHA_mskwh:        "Mask word high"
ALPHA_mskwl:        "Mask word low"
ALPHA_mt_fpcr:      "Move to FPCR"
ALPHA_mulf:         "Multiply F_floating"
ALPHA_mulg:         "Multiply G_floating"
ALPHA_mull:         "Multiply longword"
ALPHA_mull_v:       "Multiply longword with overflow"
ALPHA_mulq:         "Multiply quadword"
ALPHA_mulq_v:       "Multiply quadword with overflow"
ALPHA_muls:         "Multiply S_floating"
ALPHA_mult:         "Multiply T_floating"
ALPHA_ornot:        "Logical sum with complement"
ALPHA_perr:         "Pixel error"
ALPHA_pklb:         "Pack longwords to bytes"
ALPHA_pkwb:         "Pack words to bytes"
ALPHA_rc:           "Read and clear"
ALPHA_ret:          "Return from subroutine"
ALPHA_rpcc:         "Read process cycle counter"
ALPHA_rs:           "Read and set"
ALPHA_s4addl:       "Scaled add longword by 4"
ALPHA_s4addq:       "Scaled add quadword by 4"
ALPHA_s4subl:       "Scaled subtract longword by 4"
ALPHA_s4subq:       "Scaled subtract quadword by 4"
ALPHA_s8addl:       "Scaled add longword by 8"
ALPHA_s8addq:       "Scaled add quadword by 8"
ALPHA_s8subl:       "Scaled subtract longword by 8"
ALPHA_s8subq:       "Scaled subtract quadword by 8"
ALPHA_sextb:        "Sign extend byte"
ALPHA_sextw:        "Sign extend word"
ALPHA_sll:          "Shift left logical"
ALPHA_sqrtf:        "Square root F_floating"
ALPHA_sqrtg:        "Square root G_floating"
ALPHA_sqrts:        "Square root S_floating"
ALPHA_sqrtt:        "Square root T_floating"
ALPHA_sra:          "Shift right arithmetic"
ALPHA_srl:          "Shift right logical"
ALPHA_stb:          "Store byte"
ALPHA_stf:          "Store F_floating"
ALPHA_stg:          "Store G_floating"
ALPHA_sts:          "Store S_floating"
ALPHA_stl:          "Store longword"
ALPHA_stl_c:        "Store longword conditional"
ALPHA_stq:          "Store quadword"
ALPHA_stq_c:        "Store quadword conditional"
ALPHA_stq_u:        "Store unaligned quadword"
ALPHA_stt:          "Store T_floating"
ALPHA_stw:          "Store word"
ALPHA_subf:         "Subtract F_floating"
ALPHA_subg:         "Subtract G_floating"
ALPHA_subl:         "Subtract longword"
ALPHA_subl_v:       "Subtract longword with overflow"
ALPHA_subq:         "Subtract quadword"
ALPHA_subq_v:       "Subtract quadword with overflow"
ALPHA_subs:         "Subtract S_floating"
ALPHA_subt:         "Subtract T_floating"
ALPHA_trapb:        "Trap barrier"
ALPHA_umulh:        "Unsigned multiply quadword high"
ALPHA_unpkbl:       "Unpack bytes to longwords"
ALPHA_unpkbw:       "Unpack bytes to words"
ALPHA_wh64:         "Write hint â€” 64 bytes"
ALPHA_wmb:          "Write memory barrier"
ALPHA_xor:          "Logical difference"
ALPHA_zap:          "Zero bytes"
ALPHA_zapnot:       "Zero bytes not"
                              
// Macros

ALPHA_unop:         "Universal NOP"
ALPHA_nop:          "Integer NOP"
ALPHA_fnop:         "Floating point NOP"
ALPHA_clr:          "Clear"
ALPHA_fabs:         "Floating point absolute value"
ALPHA_fclr:         "Floating point clear"
ALPHA_fmov:         "Floating point register move"
ALPHA_fneg:         "Floating point negate"
ALPHA_mov:          "Move to register"
ALPHA_negl:         "Negate longword"
ALPHA_negl_v:       "Negate longword with overflow"
ALPHA_negq:         "Negate quadword"
ALPHA_negq_v:       "Negate quadword with overflow"
ALPHA_negf:         "Negate F_floating"
ALPHA_negg:         "Negate G_floating"
ALPHA_negs:         "Negate S_floating"
ALPHA_negt:         "Negate T_floating"
ALPHA_not:          "Bitwise NOT"
ALPHA_sextl:        "Move sign extended"
ALPHA_or:           "Bitwise OR"
ALPHA_andnot:       "Bit clear"
ALPHA_xornot:       "Logical equivalence"
ALPHA_br0:          "Branch"
