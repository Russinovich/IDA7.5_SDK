s39_a:              "add (32)"
s39_ad:             "add normalized (long HFP)"
s39_adb:            "add (long BFP)"
s39_adbr:           "add (long BFP)"
s39_adr:            "add normalized (long HFP)"
s39_adtr:           "add (long DFP)"
s39_adtra:          "add (long DFP)"
s39_ae:             "add normalized (short HFP)"
s39_aeb:            "add (short BFP)"
s39_aebr:           "add (short BFP)"
s39_aer:            "add normalized (short HFP)"
s39_afi:            "add immediate (32)"
s39_ag:             "add (64)"
s39_agf:            "add (64 <- 32)"
s39_agfi:           "add immediate (64 <- 32)"
s39_agfr:           "add (64 <- 32)"
s39_agh:            "add halfword (64 <- 16)"
s39_aghi:           "add halfword immediate (64 <- 16)"
s39_aghik:          "add immediate (64 <- 16)"
s39_agr:            "add (64)"
s39_agrk:           "add (64)"
s39_agsi:           "add immediate (64 <- 8)"
s39_ah:             "add halfword (32 <- 16)"
s39_ahhhr:          "add high (32)"
s39_ahhlr:          "add high (32)"
s39_ahi:            "add halfword immediate (32 <- 16)"
s39_ahik:           "add immediate (32 <- 16)"
s39_ahy:            "add halfword (32 <- 16)"
s39_aih:            "add immediate high (32)"
s39_al:             "add logical (32)"
s39_alc:            "add logical with carry (32)"
s39_alcg:           "add logical with carry (64)"
s39_alcgr:          "add logical with carry (64)"
s39_alcr:           "add logical with carry (32)"
s39_alfi:           "add logical immediate (32)"
s39_alg:            "add logical (64)"
s39_algf:           "add logical (64 <- 32)"
s39_algfi:          "add logical immediate (64 <- 32)"
s39_algfr:          "add logical (64 <- 32)"
s39_alghsik:        "add logical with signed immediate (64 <- 16)"
s39_algr:           "add logical (64)"
s39_algrk:          "add logical (64)"
s39_algsi:          "add logical with signed immediate (64 <- 8)"
s39_alhhhr:         "add logical high (32)"
s39_alhhlr:         "add logical high (32)"
s39_alhsik:         "add logical with signed immediate (32 <- 16)"
s39_alr:            "add logical (32)"
s39_alrk:           "add logical (32)"
s39_alsi:           "add logical with signed immediate (32 <- 8)"
s39_alsih:          "add logical with signed immediate high (32)"
s39_alsihn:         "add logical with signed immediate high (32)"
s39_aly:            "add logical (32)"
s39_ap:             "add decimal"
s39_ar:             "add (32)"
s39_ark:            "add (32)"
s39_asi:            "add immediate (32 <- 8)"
s39_au:             "add unnormalized (short HFP)"
s39_aur:            "add unnormalized (short HFP)"
s39_aw:             "add unnormalized (long HFP)"
s39_awr:            "add unnormalized (long HFP)"
s39_axbr:           "add (extended BFP)"
s39_axr:            "add normalized (extended HFP)"
s39_axtr:           "add (extended DFP)"
s39_axtra:          "add (extended DFP)"
s39_ay:             "add (32)"
s39_b:              "unconditional branch"
s39_bo:             "branch on condition, jump on overflow / if ones"
s39_bh:             "branch on condition, jump on A high"
s39_bnle:           "branch on condition, jump on not low or equal"
s39_bl:             "branch on condition, jump on A low"
s39_bnhe:           "branch on condition, jump on not high or equal"
s39_blh:            "branch on condition, jump on low or high"
s39_bne:            "branch on condition, jump on A not equal B"
s39_be:             "branch on condition, jump on A equal B"
s39_bnlh:           "branch on condition, jump on not low or high"
s39_bhe:            "branch on condition, jump on high or equal"
s39_bnl:            "branch on condition, jump on A not low"
s39_ble:            "branch on condition, jump on low or equal"
s39_bnh:            "branch on condition, jump on A not high"
s39_bno:            "branch on condition, jump on not overflow / if not ones"
s39_bor:            "branch on condition, jump on overflow / if ones"
s39_bhr:            "branch on condition, jump on A high"
s39_bnler:          "branch on condition, jump on not low or equal"
s39_blr:            "branch on condition, jump on A low"
s39_bnher:          "branch on condition, jump on not high or equal"
s39_blhr:           "branch on condition, jump on low or high"
s39_bner:           "branch on condition, jump on A not equal B"
s39_ber:            "branch on condition, jump on A equal B"
s39_bnlhr:          "branch on condition, jump on not low or high"
s39_bher:           "branch on condition, jump on high or equal"
s39_bnlr:           "branch on condition, jump on A not low"
s39_bler:           "branch on condition, jump on low or equal"
s39_bnhr:           "branch on condition, jump on A not high"
s39_bnor:           "branch on condition, jump on not overflow / if not ones"
s39_bakr:           "branch and stack"
s39_bal:            "branch and link"
s39_balr:           "branch and link"
s39_bas:            "branch and save"
s39_basr:           "branch and save"
s39_bassm:          "branch and save and set mode"
s39_bc:             "branch on condition"
s39_bcr:            "branch on condition"
s39_bct:            "branch on count (32)"
s39_bctg:           "branch on count (64)"
s39_bctgr:          "branch on count (64)"
s39_bctr:           "branch on count (32)"
s39_bi:             "unconditional indirect branch"
s39_bio:            "branch indirect on condition, jump on overflow / if ones"
s39_bih:            "branch indirect on condition, jump on A high"
s39_binle:          "branch indirect on condition, jump on not low or equal"
s39_bil:            "branch indirect on condition, jump on A low"
s39_binhe:          "branch indirect on condition, jump on not high or equal"
s39_bilh:           "branch indirect on condition, jump on low or high"
s39_bine:           "branch indirect on condition, jump on A not equal B"
s39_bie:            "branch indirect on condition, jump on A equal B"
s39_binlh:          "branch indirect on condition, jump on not low or high"
s39_bihe:           "branch indirect on condition, jump on high or equal"
s39_binl:           "branch indirect on condition, jump on A not low"
s39_bile:           "branch indirect on condition, jump on low or equal"
s39_binh:           "branch indirect on condition, jump on A not high"
s39_bino:           "branch indirect on condition, jump on not overflow / if not ones"
s39_bic:            "branch indirect on condition"
s39_bpp:            "branch prediction preload"
s39_bprp:           "branch prediction relative preload"
s39_br:             "unconditional branch"
s39_bras:           "branch relative and save"
s39_brasl:          "branch relative and save long"
s39_brc:            "branch relative on condition"
s39_brcl:           "branch relative on condition long"
s39_brct:           "branch relative on count (32)"
s39_brctg:          "branch relative on count (64)"
s39_brcth:          "branch relative on count high (32)"
s39_brxh:           "branch relative on index high (32)"
s39_brxhg:          "branch relative on index high (64)"
s39_brxle:          "branch relative on index low or equal (32)"
s39_brxlg:          "branch relative on index low or equal (64)"
s39_bsa:            "branch and set authority"
s39_bsg:            "branch in subspace group"
s39_bsm:            "branch and set mode"
s39_bxh:            "branch on index high (32)"
s39_bxhg:           "branch on index high (64)"
s39_bxle:           "branch on index low or equal (32)"
s39_bxleg:          "branch on index low or equal (64)"
s39_c:              "compare (32)"
s39_cd:             "compare (long HFP)"
s39_cdb:            "compare (long BFP)"
s39_cdbr:           "compare (long BFP)"
s39_cdfbr:          "convert from fixed (32 to long BFP)"
s39_cdfbra:         "convert from fixed (32 to long BFP)"
s39_cdfr:           "convert from fixed (32 to long HFP)"
s39_cdftr:          "convert from fixed (32 to long DFP)"
s39_cdgbr:          "convert from fixed (64 to long BFP)"
s39_cdgbra:         "convert from fixed (64 to long BFP)"
s39_cdgr:           "convert from fixed (64 to long HFP)"
s39_cdgtr:          "convert from fixed (64 to long DFP)"
s39_cdgtra:         "convert from fixed (64 to long DFP)"
s39_cdlfbr:         "convert from logical (32 to long BFP)"
s39_cdlftr:         "convert from logical (32 to long DFP)"
s39_cdlgbr:         "convert from logical (64 to long BFP)"
s39_cdlgtr:         "convert from logical (64 to long DFP)"
s39_cdpt:           "convert from packed (to long DFP)"
s39_cdr:            "compare (long HFP)"
s39_cds:            "compare double and swap (32)"
s39_cdsg:           "compare double and swap (64)"
s39_cdstr:          "convert from signed packed (64 to long DFP)"
s39_cdsy:           "compare double and swap (32)"
s39_cdtr:           "compare (long DFP)"
s39_cdutr:          "convert from unsigned packed (64 to long DFP)"
s39_cdzt:           "convert from zoned (to long DFP)"
s39_ce:             "compare (short HFP)"
s39_ceb:            "compare (short BFP)"
s39_cebr:           "compare (short BFP)"
s39_cedtr:          "compare biased exponent (long DFP)"
s39_cefbr:          "convert from fixed (32 to short BFP)"
s39_cefbra:         "convert from fixed (32 to short BFP)"
s39_cefr:           "convert from fixed (32 to short HFP)"
s39_cegbr:          "convert from fixed (64 to short BFP)"
s39_cegbra:         "convert from fixed (64 to short BFP)"
s39_cegr:           "convert from fixed (64 to short HFP)"
s39_celfbr:         "convert from logical (32 to short BFP)"
s39_celgbr:         "convert from logical (64 to short BFP)"
s39_cer:            "compare (short HFP)"
s39_cextr:          "compare biased exponent (extended DFP)"
s39_cfc:            "compare and form codeword"
s39_cfdbr:          "convert to fixed (long BFP to 32)"
s39_cfdbra:         "convert to fixed (long BFP to 32)"
s39_cfdr:           "convert to fixed (long HFP to 32)"
s39_cfdtr:          "convert to fixed (long DFP to 32)"
s39_cfebr:          "convert to fixed (short BFP to 32)"
s39_cfebra:         "convert to fixed (short BFP to 32)"
s39_cfer:           "convert to fixed (short HFP to 32)"
s39_cfi:            "compare immediate (32)"
s39_cfxbr:          "convert to fixed (extended BFP to 32)"
s39_cfxbra:         "convert to fixed (extended BFP to 32)"
s39_cfxr:           "convert to fixed (extended HFP to 32)"
s39_cfxtr:          "convert to fixed (extended DFP to 32)"
s39_cg:             "compare (64)"
s39_cgdbr:          "convert to fixed (long BFP to 64)"
s39_cgdbra:         "convert to fixed (long BFP to 64)"
s39_cgdr:           "convert to fixed (long HFP to 64)"
s39_cgdtr:          "convert to fixed (long DFP to 64)"
s39_cgdtra:         "convert to fixed (long DFP to 64)"
s39_cgebr:          "convert to fixed (short BFP to 64)"
s39_cgebra:         "convert to fixed (short BFP to 64)"
s39_cger:           "convert to fixed (short HFP to 64)"
s39_cgf:            "compare (64 <- 32)"
s39_cgfi:           "compare immediate (64 <- 32)"
s39_cgfr:           "compare (64 <- 32)"
s39_cgfrl:          "compare relative long (64 <- 32)"
s39_cgh:            "compare halfword (64 <- 16)"
s39_cghi:           "compare halfword immediate (64 <- 16)"
s39_cghrl:          "compare halfword relative long (64 <- 16)"
s39_cghsi:          "compare halfword immediate (64 <- 16)"
s39_cgib:           "compare immediate and branch (64 <- 8)"
s39_cgibh:          "compare immediate and branch (64 <- 8), jump on A high"
s39_cgibnhe:        "compare immediate and branch (64 <- 8), jump on not high or equal"
s39_cgiblh:         "compare immediate and branch (64 <- 8), jump on low or high"
s39_cgibnlh:        "compare immediate and branch (64 <- 8), jump on not low or high"
s39_cgibnl:         "compare immediate and branch (64 <- 8), jump on A not low"
s39_cgible:         "compare immediate and branch (64 <- 8), jump on low or equal"
s39_cgij:           "compare immediate and branch relative (64 <- 8)"
s39_cgijh:          "compare immediate and branch relative (64 <- 8), jump on A high"
s39_cgijnhe:        "compare immediate and branch relative (64 <- 8), jump on not high or equal"
s39_cgijlh:         "compare immediate and branch relative (64 <- 8), jump on low or high"
s39_cgijnlh:        "compare immediate and branch relative (64 <- 8), jump on not low or high"
s39_cgijnl:         "compare immediate and branch relative (64 <- 8), jump on A not low"
s39_cgijle:         "compare immediate and branch relative (64 <- 8), jump on low or equal"
s39_cgit:           "compare immediate and trap (64 <- 16)"
s39_cgith:          "compare immediate and trap (64 <- 16), jump on A high"
s39_cgitnhe:        "compare immediate and trap (64 <- 16), jump on not high or equal"
s39_cgitlh:         "compare immediate and trap (64 <- 16), jump on low or high"
s39_cgitnlh:        "compare immediate and trap (64 <- 16), jump on not low or high"
s39_cgitnl:         "compare immediate and trap (64 <- 16), jump on A not low"
s39_cgitle:         "compare immediate and trap (64 <- 16), jump on low or equal"
s39_cgr:            "compare (64)"
s39_cgrb:           "compare and branch (64)"
s39_cgrbh:          "compare and branch (64), jump on A high"
s39_cgrbnhe:        "compare and branch (64), jump on not high or equal"
s39_cgrblh:         "compare and branch (64), jump on low or high"
s39_cgrbnlh:        "compare and branch (64), jump on not low or high"
s39_cgrbnl:         "compare and branch (64), jump on A not low"
s39_cgrble:         "compare and branch (64), jump on low or equal"
s39_cgrj:           "compare and branch relative (64)"
s39_cgrjh:          "compare and branch relative (64), jump on A high"
s39_cgrjnhe:        "compare and branch relative (64), jump on not high or equal"
s39_cgrjlh:         "compare and branch relative (64), jump on low or high"
s39_cgrjnlh:        "compare and branch relative (64), jump on not low or high"
s39_cgrjnl:         "compare and branch relative (64), jump on A not low"
s39_cgrjle:         "compare and branch relative (64), jump on low or equal"
s39_cgrl:           "compare relative long (64)"
s39_cgrt:           "compare and trap (64)"
s39_cgrth:          "compare and trap (64), jump on A high"
s39_cgrtnhe:        "compare and trap (64), jump on not high or equal"
s39_cgrtlh:         "compare and trap (64), jump on low or high"
s39_cgrtnlh:        "compare and trap (64), jump on not low or high"
s39_cgrtnl:         "compare and trap (64), jump on A not low"
s39_cgrtle:         "compare and trap (64), jump on low or equal"
s39_cgxbr:          "convert to fixed (extended BFP to 64)"
s39_cgxbra:         "convert to fixed (extended BFP to 64)"
s39_cgxr:           "convert to fixed (extended HFP to 64)"
s39_cgxtr:          "convert to fixed (extended DFP to 64)"
s39_cgxtra:         "convert to fixed (extended DFP to 64)"
s39_ch:             "compare halfword (32 <- 16)"
s39_chf:            "compare high (32)"
s39_chhr:           "compare high (32)"
s39_chhsi:          "compare halfword immediate (16 <- 16)"
s39_chi:            "compare halfword immediate (32 <- 16)"
s39_chlr:           "compare high (32)"
s39_chrl:           "compare halfword relative long (32 <- 16)"
s39_chsi:           "compare halfword immediate (32 <- 16)"
s39_chy:            "compare halfword (32 <- 16)"
s39_cib:            "comapre immediate and branch (32 <- 8)"
s39_cibh:           "comapre immediate and branch (32 <- 8), jump on A high"
s39_cibnhe:         "comapre immediate and branch (32 <- 8), jump on not high or equal"
s39_ciblh:          "comapre immediate and branch (32 <- 8), jump on low or high"
s39_cibnlh:         "comapre immediate and branch (32 <- 8), jump on not low or high"
s39_cibnl:          "comapre immediate and branch (32 <- 8), jump on A not low"
s39_cible:          "comapre immediate and branch (32 <- 8), jump on low or equal"
s39_cih:            "compare immediate high (32)"
s39_cij:            "compare immediate and branch relative (32 <- 8)"
s39_cijh:           "compare immediate and branch relative (32 <- 8), jump on A high"
s39_cijnhe:         "compare immediate and branch relative (32 <- 8), jump on not high or equal"
s39_cijlh:          "compare immediate and branch relative (32 <- 8), jump on low or high"
s39_cijnlh:         "compare immediate and branch relative (32 <- 8), jump on not low or high"
s39_cijnl:          "compare immediate and branch relative (32 <- 8), jump on A not low"
s39_cijle:          "compare immediate and branch relative (32 <- 8), jump on low or equal"
s39_cit:            "compare immediate and trap (32 <- 16)"
s39_cith:           "compare immediate and trap (32 <- 16), jump on A high"
s39_citnhe:         "compare immediate and trap (32 <- 16), jump on not high or equal"
s39_citlh:          "compare immediate and trap (32 <- 16), jump on low or high"
s39_citnlh:         "compare immediate and trap (32 <- 16), jump on not low or high"
s39_citnl:          "compare immediate and trap (32 <- 16), jump on A not low"
s39_citle:          "compare immediate and trap (32 <- 16), jump on low or equal"
s39_cksm:           "checksum"
s39_cl:             "compare logical (32)"
s39_clc:            "compare logical (character)"
s39_clcl:           "compare logical long"
s39_clcle:          "compare logical long extended"
s39_clclu:          "compare logical long unicode"
s39_clfdbr:         "convert to logical (long BFP to 32)"
s39_clfdtr:         "convert to logical (long DFP to 32)"
s39_clfebr:         "convert to logical (short BFP to 32)"
s39_clfhsi:         "compare logical immediate (32 <- 16)"
s39_clfi:           "compare logical immediate (32)"
s39_clfit:          "compare logical immediate and trap (32 <- 16)"
s39_clfith:         "compare logical immediate and trap (32 <- 16), jump on A high"
s39_clfitnhe:       "compare logical immediate and trap (32 <- 16), jump on not high or equal"
s39_clfitlh:        "compare logical immediate and trap (32 <- 16), jump on low or high"
s39_clfitnlh:       "compare logical immediate and trap (32 <- 16), jump on not low or high"
s39_clfitnl:        "compare logical immediate and trap (32 <- 16), jump on A not low"
s39_clfitle:        "compare logical immediate and trap (32 <- 16), jump on low or equal"
s39_clfxbr:         "convert to logical (extended BFP to 32)"
s39_clfxtr:         "convert to logical (extended DFP to 32)"
s39_clg:            "compare logical (64)"
s39_clgdbr:         "convert to logical (long BFP to 64)"
s39_clgdtr:         "convert to logical (long DFP to 64)"
s39_clgebr:         "convert to logical (short BFP to 64)"
s39_clgf:           "compare logical (64 <- 32)"
s39_clgfi:          "compare logical immediate (64 <- 32)"
s39_clgfr:          "compare logical (64 <- 32)"
s39_clgfrl:         "compare logical relative long (64 <- 32)"
s39_clghrl:         "compare logical relative long (64 <- 16)"
s39_clghsi:         "compare logical relative long (64 <- 16)"
s39_clgib:          "compare logical immediate and branch (64 <- 8)"
s39_clgibh:         "compare logical immediate and branch (64 <- 8), jump on A high"
s39_clgibnhe:       "compare logical immediate and branch (64 <- 8), jump on not high or equal"
s39_clgiblh:        "compare logical immediate and branch (64 <- 8), jump on low or high"
s39_clgibnlh:       "compare logical immediate and branch (64 <- 8), jump on not low or high"
s39_clgibnl:        "compare logical immediate and branch (64 <- 8), jump on A not low"
s39_clgible:        "compare logical immediate and branch (64 <- 8), jump on low or equal"
s39_clgij:          "compare logical immediate and branch relative (64 <- 8)"
s39_clgijh:         "compare logical immediate and branch relative (64 <- 8), jump on A high"
s39_clgijnhe:       "compare logical immediate and branch relative (64 <- 8), jump on not high or equal"
s39_clgijlh:        "compare logical immediate and branch relative (64 <- 8), jump on low or high"
s39_clgijnlh:       "compare logical immediate and branch relative (64 <- 8), jump on not low or high"
s39_clgijnl:        "compare logical immediate and branch relative (64 <- 8), jump on A not low"
s39_clgijle:        "compare logical immediate and branch relative (64 <- 8), jump on low or equal"
s39_clgit:          "compare logical immedate and trap (64 <- 16)"
s39_clgith:         "compare logical immedate and trap (64 <- 16), jump on A high"
s39_clgitnhe:       "compare logical immedate and trap (64 <- 16), jump on not high or equal"
s39_clgitlh:        "compare logical immedate and trap (64 <- 16), jump on low or high"
s39_clgitnlh:       "compare logical immedate and trap (64 <- 16), jump on not low or high"
s39_clgitnl:        "compare logical immedate and trap (64 <- 16), jump on A not low"
s39_clgitle:        "compare logical immedate and trap (64 <- 16), jump on low or equal"
s39_clgr:           "compare logical (64)"
s39_clgrb:          "compare logical and branch (64)"
s39_clgrbh:         "compare logical and branch (64), jump on A high"
s39_clgrbnhe:       "compare logical and branch (64), jump on not high or equal"
s39_clgrblh:        "compare logical and branch (64), jump on low or high"
s39_clgrbnlh:       "compare logical and branch (64), jump on not low or high"
s39_clgrbnl:        "compare logical and branch (64), jump on A not low"
s39_clgrble:        "compare logical and branch (64), jump on low or equal"
s39_clgrj:          "compare logical and branch relative (64)"
s39_clgrjh:         "compare logical and branch relative (64), jump on A high"
s39_clgrjnhe:       "compare logical and branch relative (64), jump on not high or equal"
s39_clgrjlh:        "compare logical and branch relative (64), jump on low or high"
s39_clgrjnlh:       "compare logical and branch relative (64), jump on not low or high"
s39_clgrjnl:        "compare logical and branch relative (64), jump on A not low"
s39_clgrjle:        "compare logical and branch relative (64), jump on low or equal"
s39_clgrl:          "compare logical relative long (64)"
s39_clgrt:          "compare logical and trap (64)"
s39_clgrth:         "compare logical and trap (64), jump on A high"
s39_clgrtnhe:       "compare logical and trap (64), jump on not high or equal"
s39_clgrtlh:        "compare logical and trap (64), jump on low or high"
s39_clgrtnlh:       "compare logical and trap (64), jump on not low or high"
s39_clgrtnl:        "compare logical and trap (64), jump on A not low"
s39_clgrtle:        "compare logical and trap (64), jump on low or equal"
s39_clgt:           "compare logical and trap (64)"
s39_clgth:          "compare logical and trap (64), jump on A high"
s39_clgtnhe:        "compare logical and trap (64), jump on not high or equal"
s39_clgtlh:         "compare logical and trap (64), jump on low or high"
s39_clgtnlh:        "compare logical and trap (64), jump on not low or high"
s39_clgtnl:         "compare logical and trap (64), jump on A not low"
s39_clgtle:         "compare logical and trap (64), jump on low or equal"
s39_clgxbr:         "convert to logical (extended BFP to 64)"
s39_clgxtr:         "convert to logical (extended DFP to 64)"
s39_clhf:           "compare logical high (32)"
s39_clhhr:          "compare logical high (32)"
s39_clhhsi:         "compare logical immediate (16 <- 16)"
s39_clhlr:          "compare logical high (32)"
s39_clhrl:          "compare logical relative long (32 <- 16)"
s39_cli:            "compare logical (immediate)"
s39_clib:           "compare logical immediate and branch (32 <- 8)"
s39_clibh:          "compare logical immediate and branch (32 <- 8), jump on A high"
s39_clibnhe:        "compare logical immediate and branch (32 <- 8), jump on not high or equal"
s39_cliblh:         "compare logical immediate and branch (32 <- 8), jump on low or high"
s39_clibnlh:        "compare logical immediate and branch (32 <- 8), jump on not low or high"
s39_clibnl:         "compare logical immediate and branch (32 <- 8), jump on A not low"
s39_clible:         "compare logical immediate and branch (32 <- 8), jump on low or equal"
s39_clih:           "compare logical immediate high (32)"
s39_clij:           "compare logical immediate and branch relative (32 <- 8)"
s39_clijh:          "compare logical immediate and branch relative (32 <- 8), jump on A high"
s39_clijnhe:        "compare logical immediate and branch relative (32 <- 8), jump on not high or equal"
s39_clijlh:         "compare logical immediate and branch relative (32 <- 8), jump on low or high"
s39_clijnlh:        "compare logical immediate and branch relative (32 <- 8), jump on not low or high"
s39_clijnl:         "compare logical immediate and branch relative (32 <- 8), jump on A not low"
s39_clijle:         "compare logical immediate and branch relative (32 <- 8), jump on low or equal"
s39_cliy:           "compare logical (immediate)"
s39_clm:            "compare logical character under mask (low)"
s39_clmh:           "compare logical character under mask (high)"
s39_clmy:           "compare logical (32)"
s39_clr:            "compare logical (32)"
s39_clrb:           "compare logical and branch (32)"
s39_clrbh:          "compare logical and branch (32), jump on A high"
s39_clrbnhe:        "compare logical and branch (32), jump on not high or equal"
s39_clrblh:         "compare logical and branch (32), jump on low or high"
s39_clrbnlh:        "compare logical and branch (32), jump on not low or high"
s39_clrbnl:         "compare logical and branch (32), jump on A not low"
s39_clrble:         "compare logical and branch (32), jump on low or equal"
s39_clrj:           "compare logical and branch relative (32)"
s39_clrjh:          "compare logical and branch relative (32), jump on A high"
s39_clrjnhe:        "compare logical and branch relative (32), jump on not high or equal"
s39_clrjlh:         "compare logical and branch relative (32), jump on low or high"
s39_clrjnlh:        "compare logical and branch relative (32), jump on not low or high"
s39_clrjnl:         "compare logical and branch relative (32), jump on A not low"
s39_clrjle:         "compare logical and branch relative (32), jump on low or equal"
s39_clrl:           "compare logical relative long (32)"
s39_clrt:           "compare logical and trap (32)"
s39_clrth:          "compare logical and trap (32), jump on A high"
s39_clrtnhe:        "compare logical and trap (32), jump on not high or equal"
s39_clrtlh:         "compare logical and trap (32), jump on low or high"
s39_clrtnlh:        "compare logical and trap (32), jump on not low or high"
s39_clrtnl:         "compare logical and trap (32), jump on A not low"
s39_clrtle:         "compare logical and trap (32), jump on low or equal"
s39_clst:           "compare logical string"
s39_clt:            "compare logical and trap (32)"
s39_clth:           "compare logical and trap (32), jump on A high"
s39_cltnhe:         "compare logical and trap (32), jump on not high or equal"
s39_cltlh:          "compare logical and trap (32), jump on low or high"
s39_cltnlh:         "compare logical and trap (32), jump on not low or high"
s39_cltnl:          "compare logical and trap (32), jump on A not low"
s39_cltle:          "compare logical and trap (32), jump on low or equal"
s39_cly:            "compare logical (32)"
s39_cmpsc:          "compression call"
s39_cp:             "compare decimal"
s39_cpdt:           "convert to packed (from long DFP)"
s39_cpsdr:          "copy sign (long)"
s39_cpxt:           "convert to packed (from extended DFP)"
s39_cpya:           "copy access"
s39_cr:             "compare (32)"
s39_crb:            "compare and branch (32)"
s39_crbh:           "compare and branch (32), jump on A high"
s39_crbnhe:         "compare and branch (32), jump on not high or equal"
s39_crblh:          "compare and branch (32), jump on low or high"
s39_crbnlh:         "compare and branch (32), jump on not low or high"
s39_crbnl:          "compare and branch (32), jump on A not low"
s39_crble:          "compare and branch (32), jump on low or equal"
s39_crdte:          "compare and replace DAT table entry"
s39_crj:            "compare and branch relative (32)"
s39_crjh:           "compare and branch relative (32), jump on A high"
s39_crjnhe:         "compare and branch relative (32), jump on not high or equal"
s39_crjlh:          "compare and branch relative (32), jump on low or high"
s39_crjnlh:         "compare and branch relative (32), jump on not low or high"
s39_crjnl:          "compare and branch relative (32), jump on A not low"
s39_crjle:          "compare and branch relative (32), jump on low or equal"
s39_crl:            "compare relative long (32)"
s39_crt:            "compare and trap (32)"
s39_crth:           "compare and trap (32), jump on A high"
s39_crtnhe:         "compare and trap (32), jump on not high or equal"
s39_crtlh:          "compare and trap (32), jump on low or high"
s39_crtnlh:         "compare and trap (32), jump on not low or high"
s39_crtnl:          "compare and trap (32), jump on A not low"
s39_crtle:          "compare and trap (32), jump on low or equal"
s39_cs:             "compare and swap (32)"
s39_csch:           "clear subchannel"
s39_csdtr:          "convert to signed packed (long DFP to 64)"
s39_csg:            "compare and swap (64)"
s39_csp:            "compare and swap and purge (32)"
s39_cspg:           "compare and swap and purge (64)"
s39_csst:           "compare and swap and store"
s39_csxtr:          "convert to signed packed (extended DFP to 128)"
s39_csy:            "compare and swap (32)"
s39_cu12:           "convert utf-8 to utf-16"
s39_cu14:           "convert utf-8 to utf-32"
s39_cu21:           "convert utf-16 to utf-8"
s39_cu24:           "convert utf-16 to utf-32"
s39_cu41:           "convert utf-32 to utf-8"
s39_cu42:           "convert utf-32 to utf-16"
s39_cudtr:          "convert to unsigned packed (long DFP to 64)"
s39_cuse:           "compare until substring equal"
s39_cutfu:          "convert utf-8 to unicode"
s39_cuutf:          "convert unicode to utf-8"
s39_cuxtr:          "convert to unsigned packed (extended DFP to 128)"
s39_cvb:            "convert to binary (32)"
s39_cvbg:           "convert to binary (64)"
s39_cvby:           "convert to binary (32)"
s39_cvd:            "convert to decimal (32)"
s39_cvdg:           "convert to decimal (64)"
s39_cvdy:           "convert to decimal (32)"
s39_cxbr:           "compare (extended BFP)"
s39_cxfbr:          "convert from fixed (32 to extended BFP)"
s39_cxfbra:         "convert from fixed (32 to extended BFP)"
s39_cxfr:           "convert from fixed (32 to extended HFP)"
s39_cxftr:          "convert from fixed (32 to extended DFP)"
s39_cxgbr:          "convert from fixed (64 to extended BFP)"
s39_cxgbra:         "convert from fixed (64 to extended BFP)"
s39_cxgr:           "convert from fixed (64 to extended HFP)"
s39_cxgtr:          "convert from fixed (64 to extended DFP)"
s39_cxgtra:         "convert from fixed (64 to extended DFP)"
s39_cxlfbr:         "convert from logical (32 to extended BFP)"
s39_cxlftr:         "convert from logical (32 to extended DFP)"
s39_cxlgbr:         "convert from logical (64 to extended BFP)"
s39_cxlgtr:         "convert from logical (64 to extended DFP)"
s39_cxpt:           "convert from packed (to extended DFP)"
s39_cxr:            "compare (extended HFP)"
s39_cxstr:          "convert from singed packed (128 to extended DFP)"
s39_cxtr:           "compare (extended DFP)"
s39_cxutr:          "convert from unsigned packed (128 to extended DFP)"
s39_cxzt:           "convert from zoned (to extended DFP)"
s39_cy:             "compare (32)"
s39_czdt:           "convert to zoned (from long DFP)"
s39_czxt:           "convert to zoned (from extended DFP)"
s39_d:              "divide (32 <- 64)"
s39_dd:             "divide (long HFP)"
s39_ddb:            "divide (long BFP)"
s39_ddbr:           "divide (long BFP)"
s39_ddr:            "divide (long HFP)"
s39_ddtr:           "divide (long DFP)"
s39_ddtra:          "divide (long DFP)"
s39_de:             "divide (short HFP)"
s39_deb:            "divide (short BFP)"
s39_debr:           "divide (short BFP)"
s39_der:            "divide (short HFP)"
s39_dfltcc:         ""
s39_diag:           "diagnose"
s39_didbr:          "divide to integer (long BFP)"
s39_diebr:          "divide to integer (short BFP)"
s39_dl:             "divide logical (32 <- 64)"
s39_dlg:            "divide logical (64 <- 128)"
s39_dlgr:           "divide logical (64 <- 128)"
s39_dlr:            "divide logical (32 <- 64)"
s39_dp:             "divide decimal"
s39_dr:             "divide (32 <- 64)"
s39_dsg:            "divide single (64)"
s39_dsgf:           "divide single (64 <- 32)"
s39_dsgfr:          "divide single (64 <- 32)"
s39_dsgr:           "divide single (64)"
s39_dxbr:           "divide (extended BFP)"
s39_dxr:            "divide (extended HFP)"
s39_dxtr:           "divide (extended DFP)"
s39_dxtra:          "divide (extended DFP)"
s39_ear:            "extract access"
s39_ecag:           "extract cache attribute"
s39_ecctr:          "extract cpu counter"
s39_ecpga:          "extract coprocessor-group address"
s39_ectg:           "extract cpu time"
s39_ed:             "edit"
s39_edmk:           "edit and mark"
s39_eedtr:          "extract biased exponent (long DFP to 64)"
s39_eextr:          "extract biased exponent (extended DFP to 64)"
s39_efpc:           "extract fpc"
s39_epair:          "extract primary ASN and instance"
s39_epar:           "extract primary ASN"
s39_epctr:          "extract peripheral counter"
s39_epsw:           "extract psw"
s39_ereg:           "extract stacked registers (32)"
s39_eregg:          "extract stacked registers (64)"
s39_esair:          "extract secondary ASN and instance"
s39_esar:           "extract secondary ASN"
s39_esdtr:          "extract significance (long DFP to 64)"
s39_esea:           "extract and set extended authority"
s39_esta:           "extract stacked state"
s39_esxtr:          "extract significance (extended DFP to 64)"
s39_etnd:           "extract transaction nesting depth"
s39_ex:             "execute"
s39_exrl:           "execute relative long"
s39_fidbr:          "load fp integer (long BFP)"
s39_fidbra:         "load fp integer (long BFP)"
s39_fidr:           "load fp integer (long HFP)"
s39_fidtr:          "load fp integer (long DFP)"
s39_fiebr:          "load fp integer (short BFP)"
s39_fiebra:         "load fp integer (short BFP)"
s39_fier:           "load fp integer (short HFP)"
s39_fixbr:          "load fp integer (extended BFP)"
s39_fixbra:         "load fp integer (extended BFP)"
s39_fixr:           "load fp integer (extended HFP)"
s39_fixtr:          "load fp integer (extended DFP)"
s39_flogr:          "find leftmost one"
s39_hdr:            "halve (long HFP)"
s39_her:            "halve (short HFP)"
s39_hsch:           "halt subchannel"
s39_iac:            "insert address space control"
s39_ic:             "insert character"
s39_icm:            "insert characters under mask (low)"
s39_icmh:           "insert characters under mask (high)"
s39_icmy:           "insert characters under mask (low)"
s39_icy:            "insert character"
s39_idte:           "invalidate dat table entry"
s39_iedtr:          "insert biased exponent (64 to long DFP)"
s39_iextr:          "insert biased exponent (64 to extended DFP)"
s39_iihf:           "insert immediate (high)"
s39_iihh:           "inset immediate (high high)"
s39_iihl:           "insert immediate (high low)"
s39_iilf:           "insert immediate (low)"
s39_iilh:           "insert immediate (low high)"
s39_iill:           "insert immediate (low low)"
s39_ipk:            "insert PSW key"
s39_ipm:            "insert program mask"
s39_ipte:           "invalidate page table entry"
s39_irbm:           "insert reference bits multiple"
s39_iske:           "insert storage key extended"
s39_ivsk:           "insert virtual storage key"
s39_j:              "unconditional jump"
s39_jo:             "conditional jump, jump on overflow / if ones"
s39_jh:             "conditional jump, jump on A high"
s39_jnle:           "conditional jump, jump on not low or equal"
s39_jl:             "conditional jump, jump on A low"
s39_jnhe:           "conditional jump, jump on not high or equal"
s39_jlh:            "conditional jump, jump on low or high"
s39_jne:            "conditional jump, jump on A not equal B"
s39_je:             "conditional jump, jump on A equal B"
s39_jnlh:           "conditional jump, jump on not low or high"
s39_jhe:            "conditional jump, jump on high or equal"
s39_jnl:            "conditional jump, jump on A not low"
s39_jle:            "conditional jump, jump on low or equal"
s39_jnh:            "conditional jump, jump on A not high"
s39_jno:            "conditional jump, jump on not overflow / if not ones"
s39_jg:             "unconditional jump long"
s39_jgo:            "conditional jump long, jump on overflow / if ones"
s39_jgh:            "conditional jump long, jump on A high"
s39_jgnle:          "conditional jump long, jump on not low or equal"
s39_jgl:            "conditional jump long, jump on A low"
s39_jgnhe:          "conditional jump long, jump on not high or equal"
s39_jglh:           "conditional jump long, jump on low or high"
s39_jgne:           "conditional jump long, jump on A not equal B"
s39_jge:            "conditional jump long, jump on A equal B"
s39_jgnlh:          "conditional jump long, jump on not low or high"
s39_jghe:           "conditional jump long, jump on high or equal"
s39_jgnl:           "conditional jump long, jump on A not low"
s39_jgle:           "conditional jump long, jump on low or equal"
s39_jgnh:           "conditional jump long, jump on A not high"
s39_jgno:           "conditional jump long, jump on not overflow / if not ones"
s39_kdb:            "compare and signal (long BFP)"
s39_kdbr:           "compare and signal (long BFP)"
s39_kdsa:           ""
s39_kdtr:           "compare and signal (long DFP)"
s39_keb:            "compare and signal (short BFP)"
s39_kebr:           "compare and signal (short BFP)"
s39_kimd:           "compute intermediate message digest"
s39_klmd:           "compute last message digest"
s39_km:             "cipher message"
s39_kma:            "cipher message with authentication"
s39_kmac:           "compute message with authentication"
s39_kmc:            "cipher message with chaining"
s39_kmctr:          "cipher message with counter"
s39_kmf:            "cipher message with cipher feedback"
s39_kmo:            "cipher message with output feedback"
s39_kxbr:           "compare and signal (extended BFP)"
s39_kxtr:           "compare and signal (extended DFP)"
s39_l:              "load (32)"
s39_la:             "load address"
s39_laa:            "load and add (32)"
s39_laag:           "load and add (64)"
s39_laal:           "load and add logical (32)"
s39_laalg:          "load and add logical (64)"
s39_lae:            "load address extended"
s39_laey:           "load address extended"
s39_lam:            "load access multiple"
s39_lamy:           "load access multiple"
s39_lan:            "load and and (32)"
s39_lang:           "load and and (64)"
s39_lao:            "load and or (32)"
s39_laog:           "load and or (64)"
s39_larl:           "load address relative long"
s39_lasp:           "load address space parameters"
s39_lat:            "load and trap (32L <- 32)"
s39_lax:            "load and exclusive or (32)"
s39_laxg:           "load and exclusive or (64)"
s39_lay:            "load address"
s39_lb:             "load byte (32 <- 8)"
s39_lbh:            "load byte high (32 <- 8)"
s39_lbr:            "load byte (32 <- 8)"
s39_lcbb:           "load count to block boundary"
s39_lcctl:          "load cpu-counter-set controls"
s39_lcdbr:          "load complement (long BFP)"
s39_lcdfr:          "load complement (long)"
s39_lcdr:           "load complement (long HFP)"
s39_lcebr:          "load complement (short BFP)"
s39_lcer:           "load complement (short HFP)"
s39_lcgfr:          "load complement (64 <- 32)"
s39_lcgr:           "load complement (64)"
s39_lcr:            "load complement (32)"
s39_lctl:           "load control (32)"
s39_lctlg:          "load control (64)"
s39_lcxbr:          "load complement (extended BFP)"
s39_lcxr:           "load complement (extended HFP)"
s39_ld:             "load (long)"
s39_lde:            "load lengthened (short to long HFP)"
s39_ldeb:           "load lengthened (short to long BFP)"
s39_ldebr:          "load lengthened (short to long BFP)"
s39_lder:           "load lengthened (short to long HFP)"
s39_ldetr:          "load lengthened (short to long DFP)"
s39_ldgr:           "load fpr from gr (64 to long)"
s39_ldr:            "load (long)"
s39_ldrv:           ""
s39_ldxbr:          "load rounded (extended to long BFP)"
s39_ldxbra:         "load rounded (extended to long BFP)"
s39_ldxr:           "load rounded (extended to long HFP)"
s39_ldxtr:          "load rounded (extended to long HFP)"
s39_ldy:            "load (long)"
s39_le:             "load (short)"
s39_ledbr:          "load rounded (long to short BFP)"
s39_ledbra:         "load rounded (long to short BFP)"
s39_ledr:           "load rounded (long to short HFP)"
s39_ledtr:          "load rounded (long to short DFP)"
s39_ler:            "load short"
s39_lerv:           ""
s39_lexbr:          "load rounded (extended to short BFP)"
s39_lexbra:         "load rounded (extended to short BFP)"
s39_lexr:           "load rounded (extended to short HFP)"
s39_ley:            "load (short)"
s39_lfas:           "load fpc and signal"
s39_lfh:            "load high (32)"
s39_lfhat:          "load high and trap (32h <- 32)"
s39_lfpc:           "load fpc"
s39_lg:             "load (64)"
s39_lgat:           "load and trap (64)"
s39_lgb:            "load byte (64 <- 8)"
s39_lgbr:           "load byte (64 <- 8)"
s39_lgdr:           "load gr from fpr (long to 64)"
s39_lgf:            "load (64 <- 32)"
s39_lgfi:           "load immediate (64 <- 32)"
s39_lgfr:           "load (64 <- 32)"
s39_lgfrl:          "load relative long (64 <- 32)"
s39_lgg:            "load guarded (64)"
s39_lgh:            "load halfword (64 <- 16)"
s39_lghi:           "load halfword immediate (64 <- 16)"
s39_lghr:           "load halfword (64 <- 16)"
s39_lghrl:          "load halfword relative long (64 <- 16)"
s39_lgr:            "load (64)"
s39_lgrl:           "load relative long (64)"
s39_lgsc:           "load guarded storage controls"
s39_lh:             "load halfword (32 <- 16)"
s39_lhh:            "load halfword high (32 <- 16)"
s39_lhi:            "load halfword immediate (32) <- 16"
s39_lhr:            "load halfword (32 <- 16)"
s39_lhrl:           "load halfword relative long (32 <- 16)"
s39_lhy:            "load halfword (32 <- 16)"
s39_llc:            "load logical character (32 <- 8)"
s39_llch:           "load logical character high (32 <- 8)"
s39_llcr:           "load logical character (32 <- 8)"
s39_llgc:           "load logical character (64 <- 8)"
s39_llgcr:          "load logical character (64 <- 8)"
s39_llgf:           "load logical (64 <- 32)"
s39_llgfat:         "load logical and trap (64 <- 32)"
s39_llgfr:          "load logical (64 <- 32)"
s39_llgfrl:         "load logical relative long (64 <- 32)"
s39_llgfsg:         "load logical and shift guarded (64 <- 32)"
s39_llgh:           "load logical halfword (64 <- 16)"
s39_llghr:          "load logical halfword (64 <- 16)"
s39_llghrl:         "load logical halfword relative long (64 <- 16)"
s39_llgt:           "load logical thirty one bits (64 <- 31)"
s39_llgtat:         "load logical thirty one bits and trap (64 <- 31)"
s39_llgtr:          "load logical thirty one bits (64 <- 31)"
s39_llh:            "load logical halfword (32 <- 16)"
s39_llhh:           "load logical halfword high (32 <- 16)"
s39_llhr:           "load logical halfword (32 <- 16)"
s39_llhrl:          "load logical halfword relative long (32 <- 16)"
s39_llihf:          "load logical immediate (high)"
s39_llihh:          "load logical immediate (high high)"
s39_llihl:          "load logical immediate (high low)"
s39_llilf:          "load logical immediate (low)"
s39_llilh:          "load logical immediate (low high)"
s39_llill:          "load logical immediate (low low)"
s39_llzrgf:         "load logical and zero rightmost byte (64 <- 32)"
s39_lm:             "load multiple (32)"
s39_lmd:            "load multiple disjoint (64 <- 32& 32)"
s39_lmg:            "load multiple (64)"
s39_lmh:            "load multiple high (32)"
s39_lmy:            "load multiple high (32)"
s39_lndbr:          "load negative (long BFP)"
s39_lndfr:          "load negative (long)"
s39_lndr:           "load negative (long HFP)"
s39_lnebr:          "load negative (short BFP)"
s39_lner:           "load negative (short HFP)"
s39_lngfr:          "load negative (64 <- 32)"
s39_lngr:           "load negative (64)"
s39_lnr:            "load negative (32)"
s39_lnxbr:          "load negative (extended BFP)"
s39_lnxr:           "load negative (extended HFP)"
s39_loc:            "load on condition (32)"
s39_loco:           "load on condition (32), jump on overflow / if ones"
s39_loch:           "load on condition (32), jump on A high"
s39_locnle:         "load on condition (32), jump on not low or equal"
s39_locl:           "load on condition (32), jump on A low"
s39_locnhe:         "load on condition (32), jump on not high or equal"
s39_loclh:          "load on condition (32), jump on low or high"
s39_locne:          "load on condition (32), jump on A not equal B"
s39_loce:           "load on condition (32), jump on A equal B"
s39_locnlh:         "load on condition (32), jump on not low or high"
s39_loche:          "load on condition (32), jump on high or equal"
s39_locnl:          "load on condition (32), jump on A not low"
s39_locle:          "load on condition (32), jump on low or equal"
s39_locnh:          "load on condition (32), jump on A not high"
s39_locno:          "load on condition (32), jump on not overflow / if not ones"
s39_locfh:          "load high on condition (32)"
s39_locfho:         "load high on condition (32), jump on overflow / if ones"
s39_locfhh:         "load high on condition (32), jump on A high"
s39_locfhnle:       "load high on condition (32), jump on not low or equal"
s39_locfhl:         "load high on condition (32), jump on A low"
s39_locfhnhe:       "load high on condition (32), jump on not high or equal"
s39_locfhlh:        "load high on condition (32), jump on low or high"
s39_locfhne:        "load high on condition (32), jump on A not equal B"
s39_locfhe:         "load high on condition (32), jump on A equal B"
s39_locfhnlh:       "load high on condition (32), jump on not low or high"
s39_locfhhe:        "load high on condition (32), jump on high or equal"
s39_locfhnl:        "load high on condition (32), jump on A not low"
s39_locfhle:        "load high on condition (32), jump on low or equal"
s39_locfhnh:        "load high on condition (32), jump on A not high"
s39_locfhno:        "load high on condition (32), jump on not overflow / if not ones"
s39_locfhr:         "load high on condition (32)"
s39_locfhro:        "load high on condition (32), jump on overflow / if ones"
s39_locfhrh:        "load high on condition (32), jump on A high"
s39_locfhrnle:      "load high on condition (32), jump on not low or equal"
s39_locfhrl:        "load high on condition (32), jump on A low"
s39_locfhrnhe:      "load high on condition (32), jump on not high or equal"
s39_locfhrlh:       "load high on condition (32), jump on low or high"
s39_locfhrne:       "load high on condition (32), jump on A not equal B"
s39_locfhre:        "load high on condition (32), jump on A equal B"
s39_locfhrnlh:      "load high on condition (32), jump on not low or high"
s39_locfhrhe:       "load high on condition (32), jump on high or equal"
s39_locfhrnl:       "load high on condition (32), jump on A not low"
s39_locfhrle:       "load high on condition (32), jump on low or equal"
s39_locfhrnh:       "load high on condition (32), jump on A not high"
s39_locfhrno:       "load high on condition (32), jump on not overflow / if not ones"
s39_locg:           "load on condition (64)"
s39_locgo:          "load on condition (64), jump on overflow / if ones"
s39_locgh:          "load on condition (64), jump on A high"
s39_locgnle:        "load on condition (64), jump on not low or equal"
s39_locgl:          "load on condition (64), jump on A low"
s39_locgnhe:        "load on condition (64), jump on not high or equal"
s39_locglh:         "load on condition (64), jump on low or high"
s39_locgne:         "load on condition (64), jump on A not equal B"
s39_locge:          "load on condition (64), jump on A equal B"
s39_locgnlh:        "load on condition (64), jump on not low or high"
s39_locghe:         "load on condition (64), jump on high or equal"
s39_locgnl:         "load on condition (64), jump on A not low"
s39_locgle:         "load on condition (64), jump on low or equal"
s39_locgnh:         "load on condition (64), jump on A not high"
s39_locgno:         "load on condition (64), jump on not overflow / if not ones"
s39_locghi:         "load halfword immediate on condition (64 <- 16)"
s39_locghio:        "load halfword immediate on condition (64 <- 16), jump on overflow / if ones"
s39_locghih:        "load halfword immediate on condition (64 <- 16), jump on A high"
s39_locghinle:      "load halfword immediate on condition (64 <- 16), jump on not low or equal"
s39_locghil:        "load halfword immediate on condition (64 <- 16), jump on A low"
s39_locghinhe:      "load halfword immediate on condition (64 <- 16), jump on not high or equal"
s39_locghilh:       "load halfword immediate on condition (64 <- 16), jump on low or high"
s39_locghine:       "load halfword immediate on condition (64 <- 16), jump on A not equal B"
s39_locghie:        "load halfword immediate on condition (64 <- 16), jump on A equal B"
s39_locghinlh:      "load halfword immediate on condition (64 <- 16), jump on not low or high"
s39_locghihe:       "load halfword immediate on condition (64 <- 16), jump on high or equal"
s39_locghinl:       "load halfword immediate on condition (64 <- 16), jump on A not low"
s39_locghile:       "load halfword immediate on condition (64 <- 16), jump on low or equal"
s39_locghinh:       "load halfword immediate on condition (64 <- 16), jump on A not high"
s39_locghino:       "load halfword immediate on condition (64 <- 16), jump on not overflow / if not ones"
s39_locgr:          "load on condition (64)"
s39_locgro:         "load on condition (64), jump on overflow / if ones"
s39_locgrh:         "load on condition (64), jump on A high"
s39_locgrnle:       "load on condition (64), jump on not low or equal"
s39_locgrl:         "load on condition (64), jump on A low"
s39_locgrnhe:       "load on condition (64), jump on not high or equal"
s39_locgrlh:        "load on condition (64), jump on low or high"
s39_locgrne:        "load on condition (64), jump on A not equal B"
s39_locgre:         "load on condition (64), jump on A equal B"
s39_locgrnlh:       "load on condition (64), jump on not low or high"
s39_locgrhe:        "load on condition (64), jump on high or equal"
s39_locgrnl:        "load on condition (64), jump on A not low"
s39_locgrle:        "load on condition (64), jump on low or equal"
s39_locgrnh:        "load on condition (64), jump on A not high"
s39_locgrno:        "load on condition (64), jump on not overflow / if not ones"
s39_lochhi:         "load halfword high immediate on condition (32 <- 16)"
s39_lochhio:        "load halfword high immediate on condition (32 <- 16), jump on overflow / if ones"
s39_lochhih:        "load halfword high immediate on condition (32 <- 16), jump on A high"
s39_lochhinle:      "load halfword high immediate on condition (32 <- 16), jump on not low or equal"
s39_lochhil:        "load halfword high immediate on condition (32 <- 16), jump on A low"
s39_lochhinhe:      "load halfword high immediate on condition (32 <- 16), jump on not high or equal"
s39_lochhilh:       "load halfword high immediate on condition (32 <- 16), jump on low or high"
s39_lochhine:       "load halfword high immediate on condition (32 <- 16), jump on A not equal B"
s39_lochhie:        "load halfword high immediate on condition (32 <- 16), jump on A equal B"
s39_lochhinlh:      "load halfword high immediate on condition (32 <- 16), jump on not low or high"
s39_lochhihe:       "load halfword high immediate on condition (32 <- 16), jump on high or equal"
s39_lochhinl:       "load halfword high immediate on condition (32 <- 16), jump on A not low"
s39_lochhile:       "load halfword high immediate on condition (32 <- 16), jump on low or equal"
s39_lochhinh:       "load halfword high immediate on condition (32 <- 16), jump on A not high"
s39_lochhino:       "load halfword high immediate on condition (32 <- 16), jump on not overflow / if not ones"
s39_lochi:          "load halfword immediate on condition (32 <- 16)"
s39_lochio:         "load halfword immediate on condition (32 <- 16), jump on overflow / if ones"
s39_lochih:         "load halfword immediate on condition (32 <- 16), jump on A high"
s39_lochinle:       "load halfword immediate on condition (32 <- 16), jump on not low or equal"
s39_lochil:         "load halfword immediate on condition (32 <- 16), jump on A low"
s39_lochinhe:       "load halfword immediate on condition (32 <- 16), jump on not high or equal"
s39_lochilh:        "load halfword immediate on condition (32 <- 16), jump on low or high"
s39_lochine:        "load halfword immediate on condition (32 <- 16), jump on A not equal B"
s39_lochie:         "load halfword immediate on condition (32 <- 16), jump on A equal B"
s39_lochinlh:       "load halfword immediate on condition (32 <- 16), jump on not low or high"
s39_lochihe:        "load halfword immediate on condition (32 <- 16), jump on high or equal"
s39_lochinl:        "load halfword immediate on condition (32 <- 16), jump on A not low"
s39_lochile:        "load halfword immediate on condition (32 <- 16), jump on low or equal"
s39_lochinh:        "load halfword immediate on condition (32 <- 16), jump on A not high"
s39_lochino:        "load halfword immediate on condition (32 <- 16), jump on not overflow / if not ones"
s39_locr:           "load on condition (32)"
s39_locro:          "load on condition (32), jump on overflow / if ones"
s39_locrh:          "load on condition (32), jump on A high"
s39_locrnle:        "load on condition (32), jump on not low or equal"
s39_locrl:          "load on condition (32), jump on A low"
s39_locrnhe:        "load on condition (32), jump on not high or equal"
s39_locrlh:         "load on condition (32), jump on low or high"
s39_locrne:         "load on condition (32), jump on A not equal B"
s39_locre:          "load on condition (32), jump on A equal B"
s39_locrnlh:        "load on condition (32), jump on not low or high"
s39_locrhe:         "load on condition (32), jump on high or equal"
s39_locrnl:         "load on condition (32), jump on A not low"
s39_locrle:         "load on condition (32), jump on low or equal"
s39_locrnh:         "load on condition (32), jump on A not high"
s39_locrno:         "load on condition (32), jump on not overflow / if not ones"
s39_lpctl:          "load peripheral-counter-set controls"
s39_lpd:            "load pair disjoint (32)"
s39_lpdbr:          "load positive (long BFP)"
s39_lpdfr:          "load positive (long)"
s39_lpdg:           "load pair disjoint (64)"
s39_lpdr:           "load positive (long HFP)"
s39_lpebr:          "load positive (short BFP)"
s39_lper:           "load positive (short HFP)"
s39_lpgfr:          "load positive (64 <- 32)"
s39_lpgr:           "load positive (64)"
s39_lpp:            "load program parameter"
s39_lpq:            "load pair from quadword (64&64 <- 128)"
s39_lpr:            "load positive (32)"
s39_lpsw:           "load PSW"
s39_lpswe:          "load psw extended"
s39_lptea:          "load page-table-entry address"
s39_lpxbr:          "load positive (extended BFP)"
s39_lpxr:           "load positive (extended HFP)"
s39_lr:             "load (32)"
s39_lra:            "load real address (32)"
s39_lrag:           "load real address (64)"
s39_lray:           "load real address (32)"
s39_lrdr:           "load rounded (extended to long HFP)"
s39_lrer:           "load rounded (long to short HFP)"
s39_lrl:            "load relative long (32)"
s39_lrv:            "load reversed (32)"
s39_lrvg:           "load reversed (64)"
s39_lrvgr:          "load reversed (64)"
s39_lrvh:           "load reversed (16)"
s39_lrvr:           "load reversed (32)"
s39_lsctl:          "load sampling controls"
s39_lt:             "load and test (32)"
s39_ltdbr:          "load and test (long BFP)"
s39_ltdr:           "load and test (long HFP)"
s39_ltdtr:          "load and test (long DFP)"
s39_ltebr:          "load and test (short BFP)"
s39_lter:           "load and test (short HFP)"
s39_ltg:            "load and test (64)"
s39_ltgf:           "load and test (64 <- 32)"
s39_ltgfr:          "load and test (64 <- 32)"
s39_ltgr:           "load and test (64)"
s39_ltr:            "load and test (32)"
s39_ltxbr:          "load and test (extended BFP)"
s39_ltxr:           "load and test (extended HFP)"
s39_ltxtr:          "load and test (extended DFP)"
s39_lura:           "load using real address (32)"
s39_lurag:          "load using real address (64)"
s39_lxd:            "load lengthened (long to extended HFP)"
s39_lxdb:           "load lengthened (long to extended BFP)"
s39_lxdbr:          "load lengthened (long to extended BFP)"
s39_lxdr:           "load lengthened (long to extended HFP)"
s39_lxdtr:          "load lengthened (long to extended DFP)"
s39_lxe:            "load lengthened (short to extended HFP)"
s39_lxeb:           "load lengthened (short to extended BFP)"
s39_lxebr:          "load lengthened (short to extended BFP)"
s39_lxer:           "load lengthened (short to extended HFP)"
s39_lxr:            "load (extended)"
s39_ly:             "load (32)"
s39_lzdr:           "load zero (long)"
s39_lzer:           "load zero (short)"
s39_lzrf:           "load and zero rightmost byte (32)"
s39_lzrg:           "load and zero rightmost byte (64)"
s39_lzxr:           "load zero (extended)"
s39_m:              "multiply (64 <- 32)"
s39_mad:            "multiply and add (long HFP)"
s39_madb:           "multiply and add (long BFP)"
s39_madbr:          "multiply and add (long BFP)"
s39_madr:           "multiply and add (long HFP)"
s39_mae:            "multiply and add (short HFP)"
s39_maeb:           "multiply and add (short BFP)"
s39_maebr:          "multiply and add (short BFP)"
s39_maer:           "multiply and add (short HFP)"
s39_may:            "multiply & add unnormalized (long to extended HFP)"
s39_mayh:           "multiply & add unnormalized (long to extended high HFP)"
s39_mayhr:          "multiply & add unnormalized (long to extended high HFP)"
s39_mayl:           "multiply & add unnormalized (long to extended low HFP)"
s39_maylr:          "multiply & add unnormalized (long to extended low HFP)"
s39_mayr:           "multiply & add unnormalized (long to extended HFP)"
s39_mc:             "monitor call"
s39_md:             "multiply (long HFP)"
s39_mdb:            "multiply (long BFP)"
s39_mdbr:           "multiply (long BFP)"
s39_mde:            "multiply (short to long HFP)"
s39_mdeb:           "multiply (short to long BFP)"
s39_mdebr:          "multiply (short to long BFP)"
s39_mder:           "multiply (short to long HFP)"
s39_mdr:            "multiply (long HFP)"
s39_mdtr:           "multiply (long DFP)"
s39_mdtra:          "multiply (long DFP)"
s39_me:             "multiply (short to long HFP)"
s39_mee:            "multiply (short HFP)"
s39_meeb:           "multiply (short BFP)"
s39_meebr:          "multiply (short BFP)"
s39_meer:           "multiply (short HFP)"
s39_mer:            "multiply (short to long HFP)"
s39_mfy:            "multiply (64 <- 32)"
s39_mg:             "multiply (128 <- 64)"
s39_mgh:            "multiply halfword (64 <- 16)"
s39_mghi:           "multiply halfword immediate (64 <- 16)"
s39_mgrk:           "multiply (128 <- 64)"
s39_mh:             "multiply halfword (32 <- 16)"
s39_mhi:            "multiply halfword immediate (32 <- 16)"
s39_mhy:            "multiply halfword (32 <- 16)"
s39_ml:             "multiply logical (64 <- 32)"
s39_mlg:            "multiply logical (128 <- 64)"
s39_mlgr:           "multiply logical (128 <- 64)"
s39_mlr:            "multiply logical (64 <- 32)"
s39_mp:             "multiply decimal"
s39_mr:             "multiply (64 <- 32)"
s39_ms:             "multiply single (32)"
s39_msc:            "multiply single (32)"
s39_msch:           "modify subchannel"
s39_msd:            "multiply and subtract (long HFP)"
s39_msdb:           "multiply and subtract (long BFP)"
s39_msdbr:          "multiply and subtract (long BFP)"
s39_msdr:           "multiply and subtract (long HFP)"
s39_mse:            "multiply and subtract (short HFP)"
s39_mseb:           "multiply and subtract (short BFP)"
s39_msebr:          "multiply and subtract (short BFP)"
s39_mser:           "multiply and subtract (short HFP)"
s39_msfi:           "multiply single immediate (32)"
s39_msg:            "multiply single (64)"
s39_msgc:           "multiply single (64)"
s39_msgf:           "multiply single (64 <- 32)"
s39_msgfi:          "multiply single immediate (64 <- 32)"
s39_msgfr:          "multiply single (64 <- 32)"
s39_msgr:           "multiply single (64)"
s39_msgrkc:         "multiply single (64)"
s39_msr:            "multiply single (32)"
s39_msrkc:          "multiply single (32)"
s39_msta:           "modify stacked state"
s39_msy:            "multiply single (32)"
s39_mvc:            "move (character)"
s39_mvcdk:          "move with destination key"
s39_mvcin:          "move inverse"
s39_mvck:           "move with key"
s39_mvcl:           "move long"
s39_mvcle:          "move long extended"
s39_mvclu:          "move long unicode"
s39_mvcos:          "move with optional specifications"
s39_mvcp:           "move to primary"
s39_mvcrl:          ""
s39_mvcs:           "move to secondary"
s39_mvcsk:          "move with source key"
s39_mvghi:          "move (64 <- 16)"
s39_mvhhi:          "move (16 <- 16)"
s39_mvhi:           "move (32 <- 16)"
s39_mvi:            "move (immediate)"
s39_mviy:           "move (immediate)"
s39_mvn:            "move numerics"
s39_mvo:            "move with offset"
s39_mvpg:           "move page"
s39_mvst:           "move string"
s39_mvz:            "move zones"
s39_mxbr:           "multiply (extended BFP)"
s39_mxd:            "multiply (long to extended HFP)"
s39_mxdb:           "multiply (long to extended BFP)"
s39_mxdbr:          "multiply (long to extended BFP)"
s39_mxdr:           "multiply (long to extended HFP)"
s39_mxr:            "multiply (extended HFP)"
s39_mxtr:           "multiply (extended DFP)"
s39_mxtra:          "multiply (extended DFP)"
s39_my:             "multiply unnormalized (long to extended HFP)"
s39_myh:            "multiply unnormalized (long to extended high HFP)"
s39_myhr:           "multiply unnormalized (long to extended high HFP)"
s39_myl:            "multiply unnormalized (long to extended low HFP)"
s39_mylr:           "multiply unnormalized (long to extended low HFP)"
s39_myr:            "multiply unnormalized (long to extended HFP)"
s39_n:              "and (32)"
s39_nc:             "and (character)"
s39_ncgrk:          ""
s39_ncrk:           ""
s39_ng:             "and (64)"
s39_ngr:            "and (64)"
s39_ngrk:           "and (64)"
s39_ni:             "and (immediate)"
s39_niai:           "next instruction access intent"
s39_nihf:           "and immediate (high)"
s39_nihh:           "and immediate (high high)"
s39_nihl:           "and immediate (high low)"
s39_nilf:           "and immediate (low)"
s39_nilh:           "and immediate (low high)"
s39_nill:           "and immediate (low low)"
s39_niy:            "and (immediate)"
s39_nngrk:          ""
s39_nnrk:           ""
s39_nogrk:          ""
s39_nop:            "no operation"
s39_nopr:           "no operation"
s39_nork:           ""
s39_nr:             "and (32)"
s39_nrk:            "and (32)"
s39_ntstg:          "nontransactional store (64)"
s39_nxgrk:          ""
s39_nxrk:           ""
s39_ny:             "and (32)"
s39_o:              "or (32)"
s39_oc:             "or (character)"
s39_ocgrk:          ""
s39_ocrk:           ""
s39_og:             "or (64)"
s39_ogr:            "or (64)"
s39_ogrk:           "or (64)"
s39_oi:             "or (immediate)"
s39_oihf:           "or immediate (high)"
s39_oihh:           "or immediate (high high)"
s39_oihl:           "or immediate (high low)"
s39_oilf:           "or immediate (low)"
s39_oilh:           "or immediate (low high)"
s39_oill:           "or immediate (low low)"
s39_oiy:            "or (immediate)"
s39_or:             "or (32)"
s39_ork:            "or (32)"
s39_oy:             "or (32)"
s39_pack:           "pack"
s39_palb:           "purge ALB"
s39_pc:             "program call"
s39_pcc:            "perform cryptographic computation"
s39_pckmo:          "perform cryptographic key management operation"
s39_pfd:            "prefetch data"
s39_pfdrl:          "prefetch data relative long"
s39_pfmf:           "perform frame management function"
s39_pfpo:           "perform floating point operation"
s39_pgin:           "page in"
s39_pgout:          "page out"
s39_pka:            "pack ascii"
s39_pku:            "pack unicode"
s39_plo:            "perform locked operation"
s39_popcnt:         "population count"
s39_ppa:            "perform processor assist"
s39_ppno:           "perform pseudorandom number operation"
s39_pr:             "program return"
s39_prno:           "perform pseudorandom number operation"
s39_pt:             "program transfer"
s39_ptf:            "perform topology function"
s39_ptff:           "perform timing facility function"
s39_pti:            "program transfer with instance"
s39_ptlb:           "purge TLB"
s39_qadtr:          "quantize (long DFP)"
s39_qaxtr:          "quantize (extended DFP)"
s39_qctri:          "query counter information"
s39_qsi:            "query sampling information"
s39_rchp:           "reset channel path"
s39_risbg:          "rotate then insert selected bits (64)"
s39_risbgn:         "rotate then insert selected bits (64)"
s39_risbhg:         "rotate then insert selected bits high (64)"
s39_risblg:         "rotate then insert selected bits low (64)"
s39_rll:            "rotate left single logical (32)"
s39_rllg:           "rotate left single logical (64)"
s39_rnsbg:          "rotate then and selected bits (64)"
s39_rosbg:          "rotate then or selected bits (64)"
s39_rp:             "resume program"
s39_rrbe:           "reset reference bit extended"
s39_rrbm:           "reset reference bits multiple"
s39_rrdtr:          "reround (long DFP)"
s39_rrxtr:          "reround (extended DFP)"
s39_rsch:           "resume subchannel"
s39_rxsbg:          "rotate then exclusive or selected bits (64)"
s39_s:              "subtract (32)"
s39_sac:            "set address space control"
s39_sacf:           "set address space control fast"
s39_sal:            "set address limit"
s39_sam24:          "set addressing mode 24"
s39_sam31:          "set addressing mode 31"
s39_sam64:          "set addressing mode 64"
s39_sar:            "set access"
s39_scctr:          "set cpu counter"
s39_schm:           "set channel monitor"
s39_sck:            "set clock"
s39_sckc:           "set clock comparator"
s39_sckpf:          "set clock programmable field"
s39_sd:             "subtract normalized (long HFP)"
s39_sdb:            "subtract (long BFP)"
s39_sdbr:           "subtract (long BFP)"
s39_sdr:            "subtract normalized (long HFP)"
s39_sdtr:           "subtract normalized (long DFP)"
s39_sdtra:          "subtract normalized (long DFP)"
s39_se:             "subtract normalized (short HFP)"
s39_seb:            "subtract (short BFP)"
s39_sebr:           "subtract (short BFP)"
s39_selgr:          ""
s39_selgro:         ", jump on overflow / if ones"
s39_selgrh:         ", jump on A high"
s39_selgrnle:       ", jump on not low or equal"
s39_selgrl:         ", jump on A low"
s39_selgrnhe:       ", jump on not high or equal"
s39_selgrlh:        ", jump on low or high"
s39_selgrne:        ", jump on A not equal B"
s39_selgre:         ", jump on A equal B"
s39_selgrnlh:       ", jump on not low or high"
s39_selgrhe:        ", jump on high or equal"
s39_selgrnl:        ", jump on A not low"
s39_selgrle:        ", jump on low or equal"
s39_selgrnh:        ", jump on A not high"
s39_selgrno:        ", jump on not overflow / if not ones"
s39_selhhhr:        ""
s39_selhhhro:       ", jump on overflow / if ones"
s39_selhhhrh:       ", jump on A high"
s39_selhhhrnle:     ", jump on not low or equal"
s39_selhhhrl:       ", jump on A low"
s39_selhhhrnhe:     ", jump on not high or equal"
s39_selhhhrlh:      ", jump on low or high"
s39_selhhhrne:      ", jump on A not equal B"
s39_selhhhre:       ", jump on A equal B"
s39_selhhhrnlh:     ", jump on not low or high"
s39_selhhhrhe:      ", jump on high or equal"
s39_selhhhrnl:      ", jump on A not low"
s39_selhhhrle:      ", jump on low or equal"
s39_selhhhrnh:      ", jump on A not high"
s39_selhhhrno:      ", jump on not overflow / if not ones"
s39_selr:           ""
s39_selro:          ", jump on overflow / if ones"
s39_selrh:          ", jump on A high"
s39_selrnle:        ", jump on not low or equal"
s39_selrl:          ", jump on A low"
s39_selrnhe:        ", jump on not high or equal"
s39_selrlh:         ", jump on low or high"
s39_selrne:         ", jump on A not equal B"
s39_selre:          ", jump on A equal B"
s39_selrnlh:        ", jump on not low or high"
s39_selrhe:         ", jump on high or equal"
s39_selrnl:         ", jump on A not low"
s39_selrle:         ", jump on low or equal"
s39_selrnh:         ", jump on A not high"
s39_selrno:         ", jump on not overflow / if not ones"
s39_ser:            "subtract normalized (short HFP)"
s39_sfasr:          "set fpc and signal"
s39_sfpc:           "set fpc"
s39_sg:             "subtract (64)"
s39_sgf:            "subtract (64 <- 32)"
s39_sgfr:           "subtract (64 <- 32)"
s39_sgh:            "sintract halfword (64 <- 16)"
s39_sgr:            "subtract (64)"
s39_sgrk:           "subtract (64)"
s39_sh:             "subtract halfword (32 <- 16)"
s39_shhhr:          "subtract high (32)"
s39_shhlr:          "subtract high (32)"
s39_shy:            "subtract halfword (32 <- 16)"
s39_sie:            "start interpretive execution"
s39_siga:           "signal adapter"
s39_sigp:           "signal processor"
s39_sl:             "subtract logical (32)"
s39_sla:            "shift left single (32)"
s39_slag:           "shift left single (64)"
s39_slak:           "shift left single (32)"
s39_slb:            "subtract logical with borrow (32)"
s39_slbg:           "subtract logical with borrow (64)"
s39_slbgr:          "subtract logical with borrow (64)"
s39_slbr:           "subtract logical with borrow (32)"
s39_slda:           "shift left double (64)"
s39_sldl:           "shift left double logical (64)"
s39_sldt:           "shift significand left (long DFP)"
s39_slfi:           "subtract logical immediate (32)"
s39_slg:            "subtract logical (64)"
s39_slgf:           "subtract logical (64 <- 32)"
s39_slgfi:          "subtract logical (64 <- 32)"
s39_slgfr:          "subtract logical (64 <- 32)"
s39_slgr:           "subtract logical (64)"
s39_slgrk:          "subtract logical (64)"
s39_slhhhr:         "subtract logical high (32)"
s39_slhhlr:         "subtract logical high (32)"
s39_sll:            "shift left single logical (32)"
s39_sllg:           "shift left single logical (64)"
s39_sllk:           "shift left single logical (32)"
s39_slr:            "subtract logical (32)"
s39_slrk:           "subtract logical (32)"
s39_slxt:           "shift significand left (extended DFP)"
s39_sly:            "subtract logical (32)"
s39_sortl:          ""
s39_sp:             "subtract decimal"
s39_spctr:          "set peripheral counter"
s39_spka:           "set PSW key from address"
s39_spm:            "set program mask"
s39_spt:            "set CPU timer"
s39_spx:            "set prefix"
s39_sqd:            "square root (long HFP)"
s39_sqdb:           "square root (long BFP)"
s39_sqdbr:          "square root (long BFP)"
s39_sqdr:           "square root (long HFP)"
s39_sqe:            "square root (short HFP)"
s39_sqeb:           "square root (short BFP)"
s39_sqebr:          "square root (short BFP)"
s39_sqer:           "square root (short HFP)"
s39_sqxbr:          "square root (extended BFP)"
s39_sqxr:           "square root (extended HFP)"
s39_sr:             "subtract (32)"
s39_sra:            "shift right single (32)"
s39_srag:           "shift right single (64)"
s39_srak:           "shift right single (32)"
s39_srda:           "shift right double (64)"
s39_srdl:           "shift right double logical (64)"
s39_srdt:           "shift significand right (long DFP)"
s39_srk:            "subtract (32)"
s39_srl:            "shift right single logical (32)"
s39_srlg:           "shift right single logical (64)"
s39_srlk:           "shift right single logical (64)"
s39_srnm:           "set bfp rounding mode (2bit)"
s39_srnmb:          "set bfp rounding mode (3bit)"
s39_srnmt:          "set dfp rounding mode"
s39_srp:            "shift and round decimal"
s39_srst:           "search string"
s39_srstu:          "search string unicode"
s39_srxt:           "shift significand right (extended DFP)"
s39_ssair:          "set secondary ASN with instance"
s39_ssar:           "set secondary ASN"
s39_ssch:           "start subchannel"
s39_sske:           "set storage key extended"
s39_ssm:            "set system mask"
s39_st:             "store (32)"
s39_stam:           "store access multiple"
s39_stamy:          "store access multiple"
s39_stap:           "store CPU address"
s39_stc:            "store character"
s39_stch:           "store character high (8)"
s39_stck:           "store clock"
s39_stckc:          "store clock comparator"
s39_stcke:          "store clock extended"
s39_stckf:          "store clock fast"
s39_stcm:           "store characters under mask (low)"
s39_stcmh:          "store characters under mask (high)"
s39_stcmy:          "store characters under mask (low)"
s39_stcps:          "store channel path status"
s39_stcrw:          "store channel report word"
s39_stctg:          "store control (64)"
s39_stctl:          "store control (64)"
s39_stcy:           "store character"
s39_std:            "store (long)"
s39_stdrv:          ""
s39_stdy:           "store (long)"
s39_ste:            "store (short)"
s39_sterv:          ""
s39_stey:           "store (short)"
s39_stfh:           "store high (32)"
s39_stfl:           "store facility list"
s39_stfle:          "store facility list extended"
s39_stfpc:          "store fpc"
s39_stg:            "store (64)"
s39_stgrl:          "store relative long (64)"
s39_stgsc:          "store guarded storage controls"
s39_sth:            "store halfword (16)"
s39_sthh:           "store halfword high (16)"
s39_sthrl:          "store halfword relative long (16)"
s39_sthy:           "store halfword (16)"
s39_stidp:          "store CPU id"
s39_stm:            "store multiple (32)"
s39_stmg:           "store multiple (64)"
s39_stmh:           "store multiple high (32)"
s39_stmy:           "store multiple (32)"
s39_stnsm:          "store then and system mask"
s39_stoc:           "store on condition (32)"
s39_stoco:          "store on condition (32), jump on overflow / if ones"
s39_stoch:          "store on condition (32), jump on A high"
s39_stocnle:        "store on condition (32), jump on not low or equal"
s39_stocl:          "store on condition (32), jump on A low"
s39_stocnhe:        "store on condition (32), jump on not high or equal"
s39_stoclh:         "store on condition (32), jump on low or high"
s39_stocne:         "store on condition (32), jump on A not equal B"
s39_stoce:          "store on condition (32), jump on A equal B"
s39_stocnlh:        "store on condition (32), jump on not low or high"
s39_stoche:         "store on condition (32), jump on high or equal"
s39_stocnl:         "store on condition (32), jump on A not low"
s39_stocle:         "store on condition (32), jump on low or equal"
s39_stocnh:         "store on condition (32), jump on A not high"
s39_stocno:         "store on condition (32), jump on not overflow / if not ones"
s39_stocfh:         "store high on condition"
s39_stocfho:        "store high on condition, jump on overflow / if ones"
s39_stocfhh:        "store high on condition, jump on A high"
s39_stocfhnle:      "store high on condition, jump on not low or equal"
s39_stocfhl:        "store high on condition, jump on A low"
s39_stocfhnhe:      "store high on condition, jump on not high or equal"
s39_stocfhlh:       "store high on condition, jump on low or high"
s39_stocfhne:       "store high on condition, jump on A not equal B"
s39_stocfhe:        "store high on condition, jump on A equal B"
s39_stocfhnlh:      "store high on condition, jump on not low or high"
s39_stocfhhe:       "store high on condition, jump on high or equal"
s39_stocfhnl:       "store high on condition, jump on A not low"
s39_stocfhle:       "store high on condition, jump on low or equal"
s39_stocfhnh:       "store high on condition, jump on A not high"
s39_stocfhno:       "store high on condition, jump on not overflow / if not ones"
s39_stocg:          "store on condition (64)"
s39_stocgo:         "store on condition (64), jump on overflow / if ones"
s39_stocgh:         "store on condition (64), jump on A high"
s39_stocgnle:       "store on condition (64), jump on not low or equal"
s39_stocgl:         "store on condition (64), jump on A low"
s39_stocgnhe:       "store on condition (64), jump on not high or equal"
s39_stocglh:        "store on condition (64), jump on low or high"
s39_stocgne:        "store on condition (64), jump on A not equal B"
s39_stocge:         "store on condition (64), jump on A equal B"
s39_stocgnlh:       "store on condition (64), jump on not low or high"
s39_stocghe:        "store on condition (64), jump on high or equal"
s39_stocgnl:        "store on condition (64), jump on A not low"
s39_stocgle:        "store on condition (64), jump on low or equal"
s39_stocgnh:        "store on condition (64), jump on A not high"
s39_stocgno:        "store on condition (64), jump on not overflow / if not ones"
s39_stosm:          "store then or system mask"
s39_stpq:           "store pair to quadword"
s39_stpt:           "store CPU timer"
s39_stpx:           "store prefix"
s39_strag:          "store real address"
s39_strl:           "store relative long (32)"
s39_strv:           "store reversed (32)"
s39_strvg:          "store reversed (64)"
s39_strvh:          "store reversed (16)"
s39_stsch:          "store subchannel"
s39_stsi:           "store system information"
s39_stura:          "store using real address (32)"
s39_sturg:          "store using real address (64)"
s39_sty:            "store (32)"
s39_su:             "subtract unnormalized (short HFP)"
s39_sur:            "subtract unnormalized (short HFP)"
s39_svc:            "supervisor call"
s39_sw:             "subtract unnormalized (long HFP)"
s39_swr:            "subtract unnormalized (long HFP)"
s39_sxbr:           "subtract (extended BFP)"
s39_sxr:            "subtract normalized (extended HFP)"
s39_sxtr:           "subtract (extended DFP)"
s39_sxtra:          "subtract (extended DFP)"
s39_sy:             "subtract (32)"
s39_tabort:         "transaction abort"
s39_tam:            "test addressing mode"
s39_tar:            "test access"
s39_tb:             "test block"
s39_tbdr:           "convert HFP to BFP (long)"
s39_tbedr:          "convert HFP to BFP (long to short)"
s39_tbegin:         "transaction begin (nonconstrained)"
s39_tbeginc:        "transaction begin (constrained)"
s39_tcdb:           "test data class (long BFP)"
s39_tceb:           "test data class (short BFP)"
s39_tcxb:           "test data class (extended BFP)"
s39_tdcdt:          "test data class (long DFP)"
s39_tdcet:          "test data class (short DFP)"
s39_tdcxt:          "test data class (extended DFP)"
s39_tdgdt:          "test data group (long DFP)"
s39_tdget:          "test data group (short DFP)"
s39_tdgxt:          "test data group (extended DFP)"
s39_tend:           "transaction end"
s39_thder:          "convert BFP to HFP (short to long)"
s39_thdr:           "convert BFP to HFP (long)"
s39_tm:             "test under mask"
s39_tmhh:           "test under mask (high high)"
s39_tmhl:           "test under mask (high low)"
s39_tmlh:           "test under mask (low high)"
s39_tmll:           "test under mask (low low)"
s39_tmy:            "test under mask"
s39_tp:             "test decimal"
s39_tpei:           "test pending external interruption"
s39_tpi:            "test pending interruption"
s39_tprot:          "test protection"
s39_tr:             "translate"
s39_trace:          "trace (32)"
s39_tracg:          "trace (64)"
s39_trap2:          "trap"
s39_trap4:          "trap"
s39_tre:            "translate extended"
s39_troo:           "translate one to one"
s39_trot:           "translate one to two"
s39_trt:            "translate and test"
s39_trte:           "translate and test extended"
s39_trto:           "translate two to one"
s39_trtr:           "translate and test reverse"
s39_trtre:          "translate and test reverse extended"
s39_trtt:           "translate two to two"
s39_ts:             "test and set"
s39_tsch:           "test subchannel"
s39_unpk:           "unpack"
s39_unpka:          "unpack ascii"
s39_unpku:          "unpack unicode"
s39_upt:            "update tree"
s39_va:             "vector add"
s39_vab:            "vector add byte"
s39_vac:            "vector add with carry"
s39_vacc:           "vector add compute carry"
s39_vaccb:          "vector add compute carry byte"
s39_vaccc:          "vector add with carry compute carry"
s39_vacccq:         "vector add with carry compute carry quadword"
s39_vaccf:          "vector add compute carry word"
s39_vaccg:          "vector add compute carry doubleword"
s39_vacch:          "vector add compute carry halfword"
s39_vaccq:          "vector add compute carry quadword"
s39_vacq:           "vector add with carry quadword"
s39_vaf:            "vector add word"
s39_vag:            "vector add double word"
s39_vah:            "vector add halfword"
s39_vap:            "vector add decimal"
s39_vaq:            "vector add quad word"
s39_vavg:           "vector average"
s39_vavgb:          "vector average byte"
s39_vavgf:          "vector average word"
s39_vavgg:          "vector average double word"
s39_vavgh:          "vector average half word"
s39_vavgl:          "vector average logical"
s39_vavglb:         "vector average logical byte"
s39_vavglf:         "vector average logical word"
s39_vavglg:         "vector average logical double word"
s39_vavglh:         "vector average logical half word"
s39_vbperm:         "vector bit permute"
s39_vcdg:           "vector fp convert from fixed 64 bit"
s39_vcdgb:          "vector fp convert from fixed 64 bit"
s39_vcdlg:          "vector fp convert from logical 64 bit"
s39_vcdlgb:         "vector fp convert from logical 64 bit"
s39_vcefb:          ""
s39_vcelfb:         ""
s39_vceq:           "vector compare equal"
s39_vceqb:          "vector compare equal byte"
s39_vceqbs:         "vector compare equal byte"
s39_vceqf:          "vector compare equal word"
s39_vceqfs:         "vector compare equal word"
s39_vceqg:          "vector compare equal double word"
s39_vceqgs:         "vector compare equal double word"
s39_vceqh:          "vector compare equal half word"
s39_vceqhs:         "vector compare equal half word"
s39_vcfeb:          ""
s39_vcfpl:          ""
s39_vcfps:          ""
s39_vcgd:           "vector fp convert to fixed 64 bit"
s39_vcgdb:          "vector fp convert to fixed 64 bit"
s39_vch:            "vector compare high"
s39_vchb:           "vector compare high byte"
s39_vchbs:          "vector compare high byte"
s39_vchf:           "vector compare high word"
s39_vchfs:          "vector compare high word"
s39_vchg:           "vector compare high double word"
s39_vchgs:          "vector compare high double word"
s39_vchh:           "vector compare high half word"
s39_vchhs:          "vector compare high half word"
s39_vchl:           "vector compare high logical"
s39_vchlb:          "vector compare high logical byte"
s39_vchlbs:         "vector compare high logical byte"
s39_vchlf:          "vector compare high logical word"
s39_vchlfs:         "vector compare high logical word"
s39_vchlg:          "vector compare high logical double word"
s39_vchlgs:         "vector compare high logical double word"
s39_vchlh:          "vector compare high logical half word"
s39_vchlhs:         "vector compare high logical half word"
s39_vcksm:          "vector checksum"
s39_vclfeb:         ""
s39_vclfp:          ""
s39_vclgd:          "vector fp convert to logical 64 bit"
s39_vclgdb:         "vector fp convert to logical 64 bit"
s39_vclz:           "vector count leading zeros"
s39_vclzb:          "vector count leading zeros byte"
s39_vclzf:          "vector count leading zeros word"
s39_vclzg:          "vector count leading zeros doubleword"
s39_vclzh:          "vector count leading zeros halfword"
s39_vcp:            "vector compare decimal"
s39_vcsfp:          ""
s39_vctz:           "vector count trailing zeros"
s39_vctzb:          "vector count trailing zeros byte"
s39_vctzf:          "vector count trailing zeros word"
s39_vctzg:          "vector count trailing zeros doubleword"
s39_vctzh:          "vector count trailing zeros halfword"
s39_vcvb:           "vector convert to binary"
s39_vcvbg:          "vector convert to binary"
s39_vcvd:           "vector convert to decimal"
s39_vcvdg:          "vector convert to decimal"
s39_vdp:            "vector divide decimal"
s39_vec:            "vector element compare"
s39_vecb:           "vector element compare byte"
s39_vecf:           "vector element compare word"
s39_vecg:           "vector element compare double word"
s39_vech:           "vector element compare half word"
s39_vecl:           "vector element compare logical"
s39_veclb:          "vector element compare logical byte"
s39_veclf:          "vector element compare logical word"
s39_veclg:          "vector element compare logical double word"
s39_veclh:          "vector element compare logical half word"
s39_verim:          "vector element rotate and insert under mask"
s39_verimb:         "vector element rotate and insert under mask byte"
s39_verimf:         "vector element rotate and insert under mask word"
s39_verimg:         "vector element rotate and insert under mask doubleword"
s39_verimh:         "vector element rotate and insert under mask halfword"
s39_verll:          "vector element rotate left logical"
s39_verllb:         "vector element rotate left logical byte"
s39_verllf:         "vector element rotate left logical word"
s39_verllg:         "vector element rotate left logical doubleword"
s39_verllh:         "vector element rotate left logical halfword"
s39_verllv:         "vector element rotate left logical"
s39_verllvb:        "vector element rotate left logical byte"
s39_verllvf:        "vector element rotate left logical word"
s39_verllvg:        "vector element rotate left logical doubleword"
s39_verllvh:        "vector element rotate left logical halfword"
s39_vesl:           "vector element shift left"
s39_veslb:          "vector element shift left byte"
s39_veslf:          "vector element shift left word"
s39_veslg:          "vector element shift left doubleword"
s39_veslh:          "vector element shift left halfword"
s39_veslv:          "vector element shift left"
s39_veslvb:         "vector element shift left byte"
s39_veslvf:         "vector element shift left word"
s39_veslvg:         "vector element shift left doubleword"
s39_veslvh:         "vector element shift left halfword"
s39_vesra:          "vector element shift right arithmetic"
s39_vesrab:         "vector element shift right arithmetic byte"
s39_vesraf:         "vector element shift right arithmetic word"
s39_vesrag:         "vector element shift right arithmetic doubleword"
s39_vesrah:         "vector element shift right arithmetic halfword"
s39_vesrav:         "vector element shift right arithmetic"
s39_vesravb:        "vector element shift right arithmetic byte"
s39_vesravf:        "vector element shift right arithmetic word"
s39_vesravg:        "vector element shift right arithmetic doubleword"
s39_vesravh:        "vector element shift right arithmetic halfword"
s39_vesrl:          "vector element shift right logical"
s39_vesrlb:         "vector element shift right logical byte"
s39_vesrlf:         "vector element shift right logical word"
s39_vesrlg:         "vector element shift right logical doubleword"
s39_vesrlh:         "vector element shift right logical halfword"
s39_vesrlv:         "vector element shift right logical"
s39_vesrlvb:        "vector element shift right logical byte"
s39_vesrlvf:        "vector element shift right logical word"
s39_vesrlvg:        "vector element shift right logical doubleword"
s39_vesrlvh:        "vector element shift right logical halfword"
s39_vfa:            "vector fp add"
s39_vfadb:          "vector fp add long"
s39_vfae:           "vector find any element equal"
s39_vfaeb:          "vector find any element equal byte"
s39_vfaebs:         "vector find any element equal"
s39_vfaef:          "vector find any element equal word"
s39_vfaefs:         "vector find any element equal"
s39_vfaeh:          "vector find any element equal halfword"
s39_vfaehs:         "vector find any element equal"
s39_vfaezb:         "vector find any element equal"
s39_vfaezbs:        "vector find any element equal"
s39_vfaezf:         "vector find any element equal"
s39_vfaezfs:        "vector find any element equal"
s39_vfaezh:         "vector find any element equal"
s39_vfaezhs:        "vector find any element equal"
s39_vfasb:          "vector fp add short"
s39_vfce:           "vector fp compare equal"
s39_vfcedb:         "vector fp compare equal long"
s39_vfcedbs:        "vector fp compare equal long"
s39_vfcesb:         "vector fp compare equal short"
s39_vfcesbs:        "vector fp compare equal short"
s39_vfch:           "vector fp compare high"
s39_vfchdb:         "vector fp compare high long"
s39_vfchdbs:        "vector fp compare high long"
s39_vfche:          "vector fp compare high or equal"
s39_vfchedb:        "vector fp compare high or equal long"
s39_vfchedbs:       "vector fp compare high or equal long"
s39_vfchesb:        "vector fp compare high or equal short"
s39_vfchesbs:       "vector fp compare high or equal short"
s39_vfchsb:         "vector fp compare high short"
s39_vfchsbs:        "vector fp compare high short"
s39_vfd:            "vector fp divide"
s39_vfddb:          "vector fp divide long"
s39_vfdsb:          "vector fp divide short"
s39_vfee:           "vector find element equal"
s39_vfeeb:          "vector find element equal byte"
s39_vfeebs:         "vector find element equal byte"
s39_vfeef:          "vector find element equal word"
s39_vfeefs:         "vector find element equal word"
s39_vfeeh:          "vector find element equal halfword"
s39_vfeehs:         "vector find element equal halfword"
s39_vfeezb:         "vector find element equal byte"
s39_vfeezbs:        "vector find element equal byte"
s39_vfeezf:         "vector find element equal word"
s39_vfeezfs:        "vector find element equal word"
s39_vfeezh:         "vector find element equal halfword"
s39_vfeezhs:        "vector find element equal halfword"
s39_vfene:          "vector find element not equal"
s39_vfeneb:         "vector find element not equal byte"
s39_vfenebs:        "vector find element not equal byte"
s39_vfenef:         "vector find element not equal word"
s39_vfenefs:        "vector find element not equal word"
s39_vfeneh:         "vector find element not equal halfword"
s39_vfenehs:        "vector find element not equal halfword"
s39_vfenezb:        "vector find element not equal byte"
s39_vfenezbs:       "vector find element not equal byte"
s39_vfenezf:        "vector find element not equal word"
s39_vfenezfs:       "vector find element not equal word"
s39_vfenezh:        "vector find element not equal halfword"
s39_vfenezhs:       "vector find element not equal halfword"
s39_vfi:            "vector load fp integer"
s39_vfidb:          "vector load fp integer long"
s39_vfisb:          "vector load fp integer short"
s39_vfkedb:         "vector fp compare and signal equal long"
s39_vfkedbs:        "vector fp compare and signal equal long"
s39_vfkesb:         "vector fp compare and signal equal short"
s39_vfkesbs:        "vector fp compare and signal equal short"
s39_vfkhdb:         "vector fp compare and signal high long"
s39_vfkhdbs:        "vector fp compare and signal high long"
s39_vfkhedb:        "vector fp compare and signal high or equal long"
s39_vfkhedbs:       "vector fp compare and signal high or equal long"
s39_vfkhesb:        "vector fp compare and signal high or equal short"
s39_vfkhesbs:       "vector fp compare and signal high or equal short"
s39_vfkhsb:         "vector fp compare and signal high short"
s39_vfkhsbs:        "vector fp compare and signal high short"
s39_vflcdb:         "vector fp perform sign operation long"
s39_vflcsb:         "vector fp perform sign operation short"
s39_vfll:           "vector fp load lengthened"
s39_vflls:          "vector fp load lengthened"
s39_vflndb:         "vector fp perform sign operation long"
s39_vflnsb:         "vector fp perform sign operation short"
s39_vflpdb:         "vector fp perform sign operation long"
s39_vflpsb:         "vector fp perform sign operation short"
s39_vflr:           "vector fp load rounded"
s39_vflrd:          "vector fp load rounded long"
s39_vfm:            "vector fp multiply"
s39_vfma:           "vector fp multiply and add"
s39_vfmadb:         "vector fp multiply and add long"
s39_vfmasb:         "vector fp multiply and add short"
s39_vfmax:          "vector fp maximum"
s39_vfmaxdb:        "vector fp maximum long"
s39_vfmaxsb:        "vector fp maximum short"
s39_vfmdb:          "vector fp multiply long"
s39_vfmin:          "vector fp minimum"
s39_vfmindb:        "vector fp minimum long"
s39_vfminsb:        "vector fp minimum short"
s39_vfms:           "vector fp multiply and subtract"
s39_vfmsb:          "vector fp multiply short"
s39_vfmsdb:         "vector fp multiply and subtract long"
s39_vfmssb:         "vector fp multiply and subtract short"
s39_vfnma:          "vector fp negative multiply and add"
s39_vfnmadb:        "vector fp negative multiply and add long"
s39_vfnmasb:        "vector fp negative multiply and add short"
s39_vfnms:          "vector fp negative multiply and subtract"
s39_vfnmsdb:        "vector fp negative multiply and subtract long"
s39_vfnmssb:        "vector fp negative multiply and subtract short"
s39_vfpso:          "vector fp perform sign operation"
s39_vfpsodb:        "vector fp perform sign operation long"
s39_vfpsosb:        "vector fp perform sign operation short"
s39_vfs:            "vector fp subtract"
s39_vfsdb:          "vector fp subtract long"
s39_vfsq:           "vector fp square root"
s39_vfsqdb:         "vector fp square root long"
s39_vfsqsb:         "vector fp square root short"
s39_vfssb:          "vector fp subtract short"
s39_vftci:          "vector fp test data class immediate"
s39_vftcidb:        "vector fp test data class immediate"
s39_vftcisb:        "vector fp test data class immediate short"
s39_vgbm:           "vector generate byte mask"
s39_vgef:           "vector gather element (32)"
s39_vgeg:           "vector gather element (64)"
s39_vgfm:           "vector galois field multiply sum"
s39_vgfma:          "vector galois field multiply sum and accumulate"
s39_vgfmab:         "vector galois field multiply sum and accumulate byte"
s39_vgfmaf:         "vector galois field multiply sum and accumulate word"
s39_vgfmag:         "vector galois field multiply sum and accumulate doubleword"
s39_vgfmah:         "vector galois field multiply sum and accumulate halfword"
s39_vgfmb:          "vector galois field multiply sum byte"
s39_vgfmf:          "vector galois field multiply sum word"
s39_vgfmg:          "vector galois field multiply sum doubleword"
s39_vgfmh:          "vector galois field multiply sum halfword"
s39_vgm:            "vector generate mask"
s39_vgmb:           "vector generate mask byte"
s39_vgmf:           "vector generate mask word"
s39_vgmg:           "vector generate mask double word"
s39_vgmh:           "vector generate mask halfword"
s39_vistr:          "vector isolate string"
s39_vistrb:         "vector isolate string byte"
s39_vistrbs:        "vector isolate string byte"
s39_vistrf:         "vector isolate string word"
s39_vistrfs:        "vector isolate string word"
s39_vistrh:         "vector isolate string halfword"
s39_vistrhs:        "vector isolate string halfword"
s39_vl:             "vector load"
s39_vlbb:           "vector load to block boundary"
s39_vlbr:           ""
s39_vlbrf:          ""
s39_vlbrg:          ""
s39_vlbrh:          ""
s39_vlbrq:          ""
s39_vlbrrep:        ""
s39_vlbrrepf:       ""
s39_vlbrrepg:       ""
s39_vlbrreph:       ""
s39_vlc:            "vector load complement"
s39_vlcb:           "vector load complement byte"
s39_vlcf:           "vector load complement word"
s39_vlcg:           "vector load complement doubleword"
s39_vlch:           "vector load complement halfword"
s39_vlde:           "vector fp load lengthened"
s39_vldeb:          "vector fp load lengthened short to long"
s39_vleb:           "vector load byte element"
s39_vlebrf:         ""
s39_vlebrg:         ""
s39_vlebrh:         ""
s39_vled:           "vector fp load rounded"
s39_vledb:          "vector fp load rounded long to short"
s39_vlef:           "vector load element (32)"
s39_vleg:           "vector load element (64)"
s39_vleh:           "vector load element (16)"
s39_vleib:          "vector load element immediate (8)"
s39_vleif:          "vector load element immediate (32)"
s39_vleig:          "vector load element immediate (64)"
s39_vleih:          "vector load element immediate (16)"
s39_vler:           ""
s39_vlerf:          ""
s39_vlerg:          ""
s39_vlerh:          ""
s39_vlgv:           "vector load gr from vr element"
s39_vlgvb:          "vector load gr from vr byte element"
s39_vlgvf:          "vector load gr from vr word element"
s39_vlgvg:          "vector load gr from vr double word element"
s39_vlgvh:          "vector load gr from vr halfword element"
s39_vlip:           "vector load immediate decimal"
s39_vll:            "vector load with length"
s39_vllebrz:        ""
s39_vllebrze:       ""
s39_vllebrzf:       ""
s39_vllebrzg:       ""
s39_vllebrzh:       ""
s39_vllez:          "vector load logical element and zero"
s39_vllezb:         "vector load logical byte element and zero"
s39_vllezf:         "vector load logical word element and zero"
s39_vllezg:         "vector load logical double word element and zero"
s39_vllezh:         "vector load logical halfword element and zero"
s39_vllezlf:        "vector load logical word element and zero - left aligned"
s39_vlm:            "vector load multiple"
s39_vlp:            "vector load positive"
s39_vlpb:           "vector load positive byte"
s39_vlpf:           "vector load positive word"
s39_vlpg:           "vector load positive doubleword"
s39_vlph:           "vector load positive halfword"
s39_vlr:            "vector load"
s39_vlrep:          "vector load and replicate"
s39_vlrepb:         "vector load and replicate byte elements"
s39_vlrepf:         "vector load and replicate word elements"
s39_vlrepg:         "vector load and replicate double word elements"
s39_vlreph:         "vector load and replicate halfword elements"
s39_vlrl:           "vector load rightmost with immediate length"
s39_vlrlr:          "vector load rightmost with immediate length"
s39_vlvg:           "vector load VR element from GR"
s39_vlvgb:          "vector load VR byte element from GR"
s39_vlvgf:          "vector load VR word element from GR"
s39_vlvgg:          "vector load VR double word element from GR"
s39_vlvgh:          "vector load VR halfword element from GR"
s39_vlvgp:          "vector load VR from GRs disjoint"
s39_vmae:           "vector multiply and add even"
s39_vmaeb:          "vector multiply and add even byte"
s39_vmaef:          "vector multiply and add even word"
s39_vmaeh:          "vector multiply and add even halfword"
s39_vmah:           "vector multiply and add high"
s39_vmahb:          "vector multiply and add high byte"
s39_vmahf:          "vector multiply and add high word"
s39_vmahh:          "vector multiply and add high halfword"
s39_vmal:           "vector multiply and add low"
s39_vmalb:          "vector multiply and add low byte"
s39_vmale:          "vector multiply and add logical even"
s39_vmaleb:         "vector multiply and add logical even byte"
s39_vmalef:         "vector multiply and add logical even word"
s39_vmaleh:         "vector multiply and add logical even halfword"
s39_vmalf:          "vector multiply and add low word"
s39_vmalh:          "vector multiply and add logical high"
s39_vmalhb:         "vector multiply and add logical high byte"
s39_vmalhf:         "vector multiply and add logical high word"
s39_vmalhh:         "vector multiply and add logical high halfword"
s39_vmalhw:         "vector multiply and add low halfword"
s39_vmalo:          "vector multiply and add logical odd"
s39_vmalob:         "vector multiply and add logical odd byte"
s39_vmalof:         "vector multiply and add logical odd word"
s39_vmaloh:         "vector multiply and add logical odd halfword"
s39_vmao:           "vector multiply and add odd"
s39_vmaob:          "vector multiply and add odd byte"
s39_vmaof:          "vector multiply and add odd word"
s39_vmaoh:          "vector multiply and add odd halfword"
s39_vme:            "vector multiply even"
s39_vmeb:           "vector multiply even byte"
s39_vmef:           "vector multiply even word"
s39_vmeh:           "vector multiply even halfword"
s39_vmh:            "vector multiply high"
s39_vmhb:           "vector multiply high byte"
s39_vmhf:           "vector multiply high word"
s39_vmhh:           "vector multiply high halfword"
s39_vml:            "vector multiply low"
s39_vmlb:           "vector multiply low byte"
s39_vmle:           "vector multiply logical even"
s39_vmleb:          "vector multiply logical even byte"
s39_vmlef:          "vector multiply logical even word"
s39_vmleh:          "vector multiply logical even halfword"
s39_vmlf:           "vector multiply low word"
s39_vmlh:           "vector multiply logical high"
s39_vmlhb:          "vector multiply logical high byte"
s39_vmlhf:          "vector multiply logical high word"
s39_vmlhh:          "vector multiply logical high halfword"
s39_vmlhw:          "vector multiply low halfword"
s39_vmlo:           "vector multiply logical odd"
s39_vmlob:          "vector multiply logical odd byte"
s39_vmlof:          "vector multiply logical odd word"
s39_vmloh:          "vector multiply logical odd halfword"
s39_vmn:            "vector minimum"
s39_vmnb:           "vector minimum byte"
s39_vmnf:           "vector minimum word"
s39_vmng:           "vector minimum doubleword"
s39_vmnh:           "vector minimum halfword"
s39_vmnl:           "vector minimum logical"
s39_vmnlb:          "vector minimum logical byte"
s39_vmnlf:          "vector minimum logical word"
s39_vmnlg:          "vector minimum logical doubleword"
s39_vmnlh:          "vector minimum logical halfword"
s39_vmo:            "vector multiply odd"
s39_vmob:           "vector multiply odd byte"
s39_vmof:           "vector multiply odd word"
s39_vmoh:           "vector multiply odd halfword"
s39_vmp:            "vector multiply decimal"
s39_vmrh:           "vector merge high"
s39_vmrhb:          "vector merge high byte"
s39_vmrhf:          "vector merge high word"
s39_vmrhg:          "vector merge high double word"
s39_vmrhh:          "vector merge high halfword"
s39_vmrl:           "vector merge low"
s39_vmrlb:          "vector merge low byte"
s39_vmrlf:          "vector merge low word"
s39_vmrlg:          "vector merge low double word"
s39_vmrlh:          "vector merge low halfword"
s39_vmsl:           "vector multiply sum logical"
s39_vmslg:          "vector multiply sum logical double word"
s39_vmsp:           "vector multiply and shift decimal"
s39_vmx:            "vector maximum"
s39_vmxb:           "vector maximum byte"
s39_vmxf:           "vector maximum word"
s39_vmxg:           "vector maximum doubleword"
s39_vmxh:           "vector maximum halfword"
s39_vmxl:           "vector maximum logical"
s39_vmxlb:          "vector maximum logical byte"
s39_vmxlf:          "vector maximum logical word"
s39_vmxlg:          "vector maximum logical doubleword"
s39_vmxlh:          "vector maximum logical halfword"
s39_vn:             "vector and"
s39_vnc:            "vector and with complement"
s39_vnn:            "vector nand"
s39_vno:            "vector nor"
s39_vnot:           "vector not"
s39_vnx:            "vector not exclusive or"
s39_vo:             "vector or"
s39_voc:            "vector or with complement"
s39_vone:           "vector set to ones"
s39_vpdi:           "vector permute double word immediate"
s39_vperm:          "vector permute"
s39_vpk:            "vector pack"
s39_vpkf:           "vector pack word"
s39_vpkg:           "vector pack double word"
s39_vpkh:           "vector pack halfword"
s39_vpkls:          "vector pack logical saturate"
s39_vpklsf:         "vector pack logical saturate word"
s39_vpklsfs:        "vector pack logical saturate word"
s39_vpklsg:         "vector pack logical saturate double word"
s39_vpklsgs:        "vector pack logical saturate double word"
s39_vpklsh:         "vector pack logical saturate halfword"
s39_vpklshs:        "vector pack logical saturate halfword"
s39_vpks:           "vector pack saturate"
s39_vpksf:          "vector pack saturate word"
s39_vpksfs:         "vector pack saturate word"
s39_vpksg:          "vector pack saturate double word"
s39_vpksgs:         "vector pack saturate double word"
s39_vpksh:          "vector pack saturate halfword"
s39_vpkshs:         "vector pack saturate halfword"
s39_vpkz:           "vector pack zoned"
s39_vpopct:         "vector population count"
s39_vpopctb:        "vector population count byte"
s39_vpopctf:        "vector population count word"
s39_vpopctg:        "vector population count double word"
s39_vpopcth:        "vector population count halfword"
s39_vpsop:          "vector perform sign operation decimal"
s39_vrep:           "vector replicate"
s39_vrepb:          "vector replicate byte"
s39_vrepf:          "vector replicate word"
s39_vrepg:          "vector replicate double word"
s39_vreph:          "vector replicate halfword"
s39_vrepi:          "vector replicate immediate"
s39_vrepib:         "vector replicate immediate byte"
s39_vrepif:         "vector replicate immediate word"
s39_vrepig:         "vector replicate immediate double word"
s39_vrepih:         "vector replicate immediate halfword"
s39_vrp:            "vector remainder decimal"
s39_vs:             "vector subtract"
s39_vsb:            "vector subtract byte"
s39_vsbcbi:         "vector subtract with borrow compute borrow indication"
s39_vsbcbiq:        "vector subtract with borrow compute borrow indication quadword"
s39_vsbi:           "vector subtract with borrow indication"
s39_vsbiq:          "vector subtract with borrow indication quadword"
s39_vscbi:          "vector subtract compute borrow indication"
s39_vscbib:         "vector subtract compute borrow indication byte"
s39_vscbif:         "vector subtract compute borrow indication word"
s39_vscbig:         "vector subtract compute borrow indication doubleword"
s39_vscbih:         "vector subtract compute borrow indication halfword"
s39_vscbiq:         "vector subtract compute borrow indication quadword"
s39_vscef:          "vector scatter element (32)"
s39_vsceg:          "vector scatter element (64)"
s39_vsdp:           "vector shift and divide decimal"
s39_vseg:           "vector sign extend to double word"
s39_vsegb:          "vector sign extend byte to double word"
s39_vsegf:          "vector sign extend word to double word"
s39_vsegh:          "vector sign extend halfword to double word"
s39_vsel:           "vector select"
s39_vsf:            "vector subtract word"
s39_vsg:            "vector subtract doubleword"
s39_vsh:            "vector subtract halfword"
s39_vsl:            "vector shift left"
s39_vslb:           "vector shift left by byte"
s39_vsld:           ""
s39_vsldb:          "vector shift left double by byte"
s39_vsp:            "vector subtract decimal"
s39_vsq:            "vector subtract quadword"
s39_vsra:           "vector shift right arithmetic"
s39_vsrab:          "vector shift right arithmetic by byte"
s39_vsrd:           ""
s39_vsrl:           "vector shift right logical"
s39_vsrlb:          "vector shift right logical by byte"
s39_vsrp:           "vector shift and round decimal"
s39_vst:            "vector store"
s39_vstbr:          ""
s39_vstbrf:         ""
s39_vstbrg:         ""
s39_vstbrh:         ""
s39_vstbrq:         ""
s39_vsteb:          "vector store element (8)"
s39_vstebrf:        ""
s39_vstebrg:        ""
s39_vstebrh:        ""
s39_vstef:          "vector store element (32)"
s39_vsteg:          "vector store element (64)"
s39_vsteh:          "vector store element (16)"
s39_vster:          ""
s39_vsterf:         ""
s39_vsterg:         ""
s39_vsterh:         ""
s39_vstl:           "vector store with length"
s39_vstm:           "vector store multiple"
s39_vstrc:          "vector string range compare"
s39_vstrcb:         "vector string range compare byte"
s39_vstrcbs:        "vector string range compare byte"
s39_vstrcf:         "vector string range compare word"
s39_vstrcfs:        "vector string range compare word"
s39_vstrch:         "vector string range compare halfword"
s39_vstrchs:        "vector string range compare halfword"
s39_vstrczb:        "vector string range compare byte"
s39_vstrczbs:       "vector string range compare byte"
s39_vstrczf:        "vector string range compare word"
s39_vstrczfs:       "vector string range compare word"
s39_vstrczh:        "vector string range compare halfword"
s39_vstrczhs:       "vector string range compare halfword"
s39_vstrl:          "vector store rightmost with length"
s39_vstrlr:         "vector store rightmost with length"
s39_vstrs:          ""
s39_vstrsb:         ""
s39_vstrsf:         ""
s39_vstrsh:         ""
s39_vstrszb:        ""
s39_vstrszf:        ""
s39_vstrszh:        ""
s39_vsum:           "vector sum across word"
s39_vsumb:          "vector sum across word - byte elements"
s39_vsumg:          "vector sum across doubleword"
s39_vsumgf:         "vector sum across doubleword - word"
s39_vsumgh:         "vector sum across doubleword - halfword"
s39_vsumh:          "vector sum across word - halfword elements"
s39_vsumq:          "vector sum across quadword"
s39_vsumqf:         "vector sum across quadword - word elements"
s39_vsumqg:         "vector sum across quadword - doubleword elements"
s39_vtm:            "vector test under mask"
s39_vtp:            "vector test decimal"
s39_vuph:           "vector unpack high"
s39_vuphb:          "vector unpack high byte"
s39_vuphf:          "vector unpack high word"
s39_vuphh:          "vector unpack high halfword"
s39_vupkz:          "vector unpack zoned"
s39_vupl:           "vector unpack low"
s39_vuplb:          "vector unpack low byte"
s39_vuplf:          "vector unpack low word"
s39_vuplh:          "vector unpack logical high"
s39_vuplhb:         "vector unpack logical high byte"
s39_vuplhf:         "vector unpack logical high word"
s39_vuplhh:         "vector unpack logical high halfword"
s39_vuplhw:         "vector unpack low halfword"
s39_vupll:          "vector unpack logical low"
s39_vupllb:         "vector unpack logical low byte"
s39_vupllf:         "vector unpack logical low word"
s39_vupllh:         "vector unpack logical low halfword"
s39_vzero:          "vector set to zero"
s39_wcdgb:          "vector fp convert from fixed 64 bit"
s39_wcdlgb:         "vector fp convert from logical 64 bit"
s39_wcefb:          ""
s39_wcelfb:         ""
s39_wcfeb:          ""
s39_wcgdb:          "vector fp convert to fixed 64 bit"
s39_wclfeb:         ""
s39_wclgdb:         "vector fp convert to logical 64 bit"
s39_wfadb:          "vector fp add long"
s39_wfasb:          "scalar vector fp add scalar short"
s39_wfaxb:          "scalar vector fp add scalar extended"
s39_wfc:            "vector fp compare scalar"
s39_wfcdb:          "vector fp compare scalar long"
s39_wfcedb:         "vector fp compare equal long"
s39_wfcedbs:        "vector fp compare equal long"
s39_wfcesb:         "scalar vector fp compare equal scalar short"
s39_wfcesbs:        "scalar fp compare equal scalar short"
s39_wfcexb:         "scalar vector fp compare equal scalar extended"
s39_wfcexbs:        "scalar vector fp compare equal scalar extended"
s39_wfchdb:         "vector fp compare high long"
s39_wfchdbs:        "vector fp compare high long"
s39_wfchedb:        "vector fp compare high or equal long"
s39_wfchedbs:       "vector fp compare high or equal long"
s39_wfchesb:        "scalar vector fp compare high or equal scalar short"
s39_wfchesbs:       "scalar vector fp compare high or equal scalar short"
s39_wfchexb:        "scalar vector fp compare high or equal scalar extended"
s39_wfchexbs:       "scalar vector fp compare high or equal scalar extended"
s39_wfchsb:         "scalar vector fp compare high scalar short"
s39_wfchsbs:        "scalar vector fp compare high scalar short"
s39_wfchxb:         "scalar vector fp compare high scalar extended"
s39_wfchxbs:        "scalar vector fp compare high scalar extended"
s39_wfcsb:          "scalar vector fp compare scalar short"
s39_wfcxb:          "scalar vector fp compare scalar extended"
s39_wfddb:          "vector fp divide long"
s39_wfdsb:          "scalar vector fp divide scalar short"
s39_wfdxb:          "scalar vector fp divide scalar extended"
s39_wfidb:          "vector load fp integer long"
s39_wfisb:          "scalar vector load fp integer scalar short"
s39_wfixb:          "scalar vector load fp integer scalar extended"
s39_wfk:            "vector fp compare and signal scalar"
s39_wfkdb:          "vector fp compare and signal scalar long"
s39_wfkedb:         "vector fp compare and signal equal long"
s39_wfkedbs:        "vector fp compare and signal equal long"
s39_wfkesb:         "scalar vector fp compare and signal equal scalar short"
s39_wfkesbs:        "scalar fp compare and signal equal scalar short"
s39_wfkexb:         "scalar vector fp compare and signal equal scalar extended"
s39_wfkexbs:        "scalar vector fp compare and signal equal scalar extended"
s39_wfkhdb:         "vector fp compare and signal high long"
s39_wfkhdbs:        "vector fp compare and signal high long"
s39_wfkhedb:        "vector fp compare and signal high or equal long"
s39_wfkhedbs:       "vector fp compare and signal high or equal long"
s39_wfkhesb:        "scalar vector fp compare and signal high or equal scalar short"
s39_wfkhesbs:       "scalar vector fp compare and signal high or equal scalar short"
s39_wfkhexb:        "scalar vector fp compare and signal high or equal scalar extended"
s39_wfkhexbs:       "scalar vector fp compare and signal high or equal scalar extended"
s39_wfkhsb:         "scalar vector fp compare and signal high scalar short"
s39_wfkhsbs:        "scalar vector fp compare and signal high scalar short"
s39_wfkhxb:         "scalar vector fp compare and signal high scalar extended"
s39_wfkhxbs:        "scalar vector fp compare and signal high scalar extended"
s39_wfksb:          "scalar vector fp compare and signal scalar short"
s39_wfkxb:          "scalar vector fp compare and signal scalar extended"
s39_wflcdb:         "vector fp perform sign operation long"
s39_wflcsb:         "scalar vector fp perform sign operation scalar short"
s39_wflcxb:         "scalar vector fp perform sign operation scalar extended"
s39_wflld:          "scalar vector fp load lengthened long"
s39_wflls:          "scalar vector fp load lengthened short"
s39_wflndb:         "vector fp perform sign operation long"
s39_wflnsb:         "scalar vector fp perform sign operation scalar short"
s39_wflnxb:         "scalar vector fp perform sign operation scalar extended"
s39_wflpdb:         "vector fp perform sign operation long"
s39_wflpsb:         "scalar vector fp perform sign operation scalar short"
s39_wflpxb:         "scalar vector fp perform sign operation scalar extended"
s39_wflrd:          "scalar vector fp load rounded long"
s39_wflrx:          "scalar vector fp load rounded extended"
s39_wfmadb:         "vector fp multiply and add long"
s39_wfmasb:         "scalar vector fp multiply and add scalar short"
s39_wfmaxb:         "scalar vector fp multiply and add scalar extended"
s39_wfmaxdb:        "scalar fp maximum scalar long"
s39_wfmaxsb:        "scalar fp maximum scalar short"
s39_wfmaxxb:        "scalar fp maximum scalar extended"
s39_wfmdb:          "vector fp multiply long"
s39_wfmindb:        "scalar fp minimum scalar long"
s39_wfminsb:        "scalar fp minimum scalar short"
s39_wfminxb:        "scalar fp minimum scalar extended"
s39_wfmsb:          "scalar vector fp multiply scalar short"
s39_wfmsdb:         "vector fp multiply and subtract long"
s39_wfmssb:         "scalar vector fp multiply and subtract scalar short"
s39_wfmsxb:         "scalar vector fp multiply and subtract scalar extended"
s39_wfmxb:          "scalar vector fp multiply scalar extended"
s39_wfnmadb:        "scalar vector fp negative multiply and add scalar long"
s39_wfnmasb:        "scalar vector fp negative multiply and add scalar short"
s39_wfnmaxb:        "scalar vector fp negative multiply and add scalar extended"
s39_wfnmsdb:        "scalar vector fp negative multiply and subtract scalar long"
s39_wfnmssb:        "scalar vector fp negative multiply and subtract scalar short"
s39_wfnmsxb:        "scalar vector fp negative multiply and subtract scalar extended"
s39_wfpsodb:        "vector fp perform sign operation long"
s39_wfpsosb:        "scalar vector fp perform sign operation scalar short"
s39_wfpsoxb:        "scalar vector fp perform sign operation scalar extended"
s39_wfsdb:          "vector fp subtract long"
s39_wfsqdb:         "vector fp square root long"
s39_wfsqsb:         "scalar vector fp square root scalar short"
s39_wfsqxb:         "scalar vector fp square root scalar extended"
s39_wfssb:          "scalar vector fp subtract scalar short"
s39_wfsxb:          "scalar vector fp subtract scalar extended"
s39_wftcidb:        "vector fp test data class immediate"
s39_wftcisb:        "scalar vector fp test data class immediate scalar short"
s39_wftcixb:        "scalar vector fp test data class immediate scalar extended"
s39_wldeb:          "vector fp load lengthened short to long"
s39_wledb:          "vector fp load rounded long to short"
s39_x:              "exclusive or (32)"
s39_xc:             "exclusive or (character)"
s39_xg:             "exclusive or (64)"
s39_xgr:            "exclusive or (64)"
s39_xgrk:           "exclusive or (64)"
s39_xi:             "exclusive or (immediate)"
s39_xihf:           "exclusive or immediate (high)"
s39_xilf:           "exclusive or immediate (low)"
s39_xiy:            "exclusive or immediate (immediate)"
s39_xr:             "exclusive or (32)"
s39_xrk:            "exclusive or (32)"
s39_xsch:           "cancel subchannel"
s39_xy:             "exclusive or with long offset"
s39_zap:            "zero and add"
s39_vx:             "vector exclusive or"
