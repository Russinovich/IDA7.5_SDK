
// AMF subcodes
AD218X_amf_01:          "op = op * op (rnd)"
AD218X_amf_03:          "op = mr + op * op (rnd)"
AD218X_amf_02:          "op = mr - op * op (rnd)"
AD218X_amf_04:          "op = op * op (ss)"
AD218X_amf_05:          "op = op * op (su)"
AD218X_amf_06:          "op = op * op (us)"
AD218X_amf_07:          "op = op * op (uu)"
AD218X_amf_08:          "op = mr + op * op"
AD218X_amf_09:          "op = mr + op * op"
AD218X_amf_0a:          "op = mr + op * op"
AD218X_amf_0b:          "op = mr + op * op"
AD218X_amf_0c:          "op = mr - op * op"
AD218X_amf_0d:          "op = mr - op * op"
AD218X_amf_0e:          "op = mr - op * op"
AD218X_amf_0f:          "op = mr - op * op"
AD218X_amf_10:          "op = op"
AD218X_amf_11:          "op = op + 1"
AD218X_amf_12:          "op = op + op + C"
AD218X_amf_13:          "op = op + op"
AD218X_amf_14:          "op = not op"
AD218X_amf_15:          "op = - op"
AD218X_amf_16:          "op = op - op + C - 1"
AD218X_amf_17:          "op = op - op"
AD218X_amf_18:          "op = op - 1"
AD218X_amf_19:          "op = op - op"
AD218X_amf_1a:          "op = op - op + C - 1"
AD218X_amf_1b:          "op = not op"
AD218X_amf_1c:          "op = op and op"
AD218X_amf_1d:          "op = op or op"
AD218X_amf_1e:          "op = op xor op"
AD218X_amf_1f:          "op = abs op"
// Shifter subcodes
AD218X_shft_0:          "sr = lshift op (hi)"
AD218X_shft_1:          "sr = sr or lshift op (hi)"
AD218X_shft_2:          "sr = lshift op (lo)"
AD218X_shft_3:          "sr = sr or lshift op (lo)"
AD218X_shft_4:          "sr = ashift op (hi)"
AD218X_shft_5:          "sr = sr or ashift op (hi)"
AD218X_shft_6:          "sr = ashift op (lo)"
AD218X_shft_7:          "sr = sr or ashift op (lo)"
AD218X_shft_8:          "sr = norm op (hi)"
AD218X_shft_9:          "sr = sr or norm op (hi)"
AD218X_shft_a:          "sr = norm op (lo)"
AD218X_shft_b:          "sr = sr or norm op (lo)"
AD218X_shft_c:          "sr = exp op (hi)"
AD218X_shft_d:          "sr = exp op (hix)"
AD218X_shft_e:          "sr = exp op (lo)"
AD218X_shft_f:          "sr = expadj op"
// ALU/MAC specific options
AD218X_alu_00:          "[IF  COND] X + Const"
AD218X_alu_01:          ""
AD218X_alu_02:          "[IF  COND] X - Const"
AD218X_alu_03:          ""
AD218X_alu_04:          "[IF  COND] Const - X"
AD218X_alu_05:          ""
AD218X_alu_06:          "[IF  COND] X and,or,xor Const"
AD218X_alu_07:          ""
AD218X_alu_08:          ""
AD218X_alu_09:          "[IF  COND] PASS constant; constant <> 0,1, -1"
AD218X_alu_0a:          ""
AD218X_alu_0b:          ""
AD218X_alu_0c:          "ALU Type 23"
AD218X_alu_0d:          "ALU Type 24"
AD218X_alu_0e:          "ALU Type 9, with no result"
AD218X_alu_0f:          ""
AD218X_alu_10:          ""
AD218X_alu_11:          ""
AD218X_alu_12:          ""
AD218X_alu_13:          ""
AD218X_alu_14:          ""
AD218X_alu_15:          ""
AD218X_alu_16:          ""
AD218X_alu_17:          ""
AD218X_alu_18:          ""
AD218X_alu_19:          ""
AD218X_alu_1a:          ""
AD218X_alu_1b:          ""
AD218X_alu_1c:          ""
AD218X_alu_1d:          ""
AD218X_mac_0:           "[IF  COND] MAC CLEAR"
AD218X_mac_1:           "[IF  COND] MAC TRANSFER"
AD218X_mac_2:           "[IF  COND] X * X"
AD218X_mac_3:           ""
AD218X_mac_4:           ""
AD218X_mac_5:           "[IF  COND] MR + X * X"
AD218X_mac_6:           ""
AD218X_mac_7:           ""
AD218X_mac_8:           "[IF  COND] MR - X * X"
AD218X_mac_9:           ""
AD218X_mac_a:           ""
AD218X_mac_b:           "ALU/MAC Type 25"
// ALU/MAC Common case
AD218X_amf:             "[IF  COND] AMF"
// Shifter Common case
AD218X_shft:            "[IF  COND] Shifter"
// Shifter specific options. Shifter Type 15, const
AD218X_shifter_0:       "sr = ashift op by op (hi)"
AD218X_shifter_1:       "sr = sr or ashift op by op (hi)"
AD218X_shifter_2:       "sr = ashift op by op (lo)"
AD218X_shifter_3:       "sr = sr or ashift op by op (lo)"
AD218X_shifter_4:       "sr = lshift op by op (hi)"
AD218X_shifter_5:       "sr = sr or lshift op by op (hi)"
AD218X_shifter_6:       "sr = lshift op by op (lo)"
AD218X_shifter_7:       "sr = sr or lshift op by op (lo)"
// Data Movement
AD218X_move_0:          "Internal Data Move, Instruction Type 17"
AD218X_move_1:          "Load Register Immediate, Instruction Type 6"
AD218X_move_2:          "Load Non-Data Register Immediate, Instruction Type 7"
AD218X_move_3:          "Data Memory Read (Direct Address), Instruction Type 3"
AD218X_move_4:          "Data Memory Read, Instruction Type 4"
AD218X_move_5:          "Program Memory Read"
AD218X_move_6:          "Data Memory Write (Direct Address)"
AD218X_move_7:          "Data Memory Write, Instruction Type 4"
AD218X_move_8:          "Data Memory Write, Immediate Data, Instruction Type 2"
AD218X_move_9:          "Program Memory Write, Instruction Type 5"
AD218X_move_a:          "I/O Memory Space Read/Write, Instruction Type 29"
AD218X_move_b:          ""
// Flow control
AD218X_jump:            "Unconditional JUMP Direct, Instruction Type 10"
AD218X_jump_1:          "Conditional JUMP Direct, Instruction Type 10"
AD218X_jump_2:          "Unconditional JUMP Indirect, Instruction Type 19"
AD218X_jump_3:          "Conditional JUMP Indirect, Instruction Type 19"
AD218X_jump_4:          "Conditional JUMP on Flag In Direct Instruction Type 27"
AD218X_call:            "Conditional CALL Direct, Instruction Type 10"
AD218X_call_1:          "Conditional CALL Indirect, Instruction Type 19"
AD218X_call_2:          "Conditional CALL on Flag In Direct Instruction Type 27"
AD218X_rts:             "Unconditional Return, Instruction Type 20"
AD218X_rts_cond:        "Conditional Return, Instruction Type 20"
AD218X_rti:             "Unconditional Return, Instruction Type 20"
AD218X_rti_cond:        "Conditional Return, Instruction Type 20"
AD218X_nop:             "No operation, Instruction Type 30"
AD218X_do:              "Do Until, Instruction Type 11"
// Misc
AD218X_idle:            "Idle, Instruction Type 31"
AD218X_idle_1:          ""
AD218X_flag_out:        "Flag Out Mode Control Instruction Type 28"
AD218X_stack_ctl:       "Stack Control, Instruction Type 26"
AD218X_mode_ctl:        "Mode Control, Instruction Type 18"
AD218X_tops_w:          "Internal Data Move, Instruction Type 17"
AD218X_tops_r:          ""
AD218X_ints_dis:        "dis ints"
AD218X_ints_ena:        "ena ints"
AD218X_modify:          "Modify Address Register, Instruction Type 21"
// ALU/MAC operation with Data Memory Read/Write
AD218X_double_move:     "Data & Program Memory Read, Instruction Type 1"
AD218X_amf_move_0:      "ALU/MAC operation with Data Memory Read, Instruction Type 4"
AD218X_amf_move_1:      "ALU/MAC operation with Program Memory Read, Instruction Type 5"
AD218X_amf_move_2:      "Shift operation with Data Memory Read, Instruction Type 12"
AD218X_amf_move_3:      "Shift operation with Program Memory Read, Instruction Type 13"
AD218X_amf_move_4:      "ALU/MAC operation with Data Register Move, Instruction Type 8"
AD218X_amf_move_5:      "Shift operation with Data Register Move, Instruction Type 14"
AD218X_amf_move_6:      "ALU/MAC operation with Data Memory Write, Instruction Type 4"
AD218X_amf_move_7:      "ALU/MAC operation with Program Memory Write, Instruction Type 5"
AD218X_amf_move_8:      "Shift operation with Data Memory Write, Instruction Type 12"
AD218X_amf_move_9:      "Shift operation with Program Memory Write, Instruction Type 13"
AD218X_amf_move_a:      "ALU/MAC with Data and Program Memory Read, Instruction Type 1"
