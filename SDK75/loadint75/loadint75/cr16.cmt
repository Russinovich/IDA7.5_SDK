CR16_addb:      "Add byte"
CR16_addw:      "Add word"
CR16_addub:     "Add byte (no flags)"
CR16_adduw:     "Add word (no flags)"
CR16_addcb:     "Add byte with carry"
CR16_addcw:     "Add word with carry"
CR16_andb:      "Logical AND byte"
CR16_andw:      "Logical AND word"
CR16_ashub:     "Arithmetic left/right shift byte"
CR16_ashuw:     "Arithmetic left/right shift word"
CR16_beq:       "Conditional branch (EQ)"
CR16_bne:       "Conditional branch (NE)"
CR16_bcs:       "Conditional branch (Carry Set)"
CR16_bcc:       "Conditional branch (Carry Clear)"
CR16_bhi:       "Conditional branch (High)"
CR16_bls:       "Conditional branch (Low or Same)"
CR16_bgt:       "Conditional branch (Greater)"
CR16_ble:       "Conditional branch (Low or EQ)"
CR16_bfs:       "Conditional branch (F Set)"
CR16_bfc:       "Conditional branch (F Clear)"
CR16_blo:       "Conditional branch (Lower)"
CR16_bhs:       "Conditional branch (High or Same)"
CR16_blt:       "Conditional branch (Less than)"
CR16_bge:       "Conditional branch (Greater than or EQ)"
CR16_br:        "Branch"
CR16_bal:       "Branch and link"
CR16_cmpb:      "Compare byte (Rdest - Rsrc)"
CR16_cmpw:      "Compare word (Rdest - Rsrc)"
CR16_beq1b:     "Compare byte Rsrc to 1 and branch if EQUAL"
CR16_beq1w:     "Compare word Rsrc to 1 and branch if EQUAL"
CR16_beq0b:     "Compare byte Rsrc to 0 and branch if EQUAL"
CR16_beq0w:     "Compare word Rsrc to 0 and branch if EQUAL"
CR16_bne1b:     "Compare byte Rsrc to 1 and branch if NOT-EQUAL"
CR16_bne1w:     "Compare word Rsrc to 1 and branch if NOT-EQUAL"
CR16_bne0b:     "Compare byte Rsrc to 0 and branch if NOT-EQUAL"
CR16_bne0w:     "Compare Rsrc to 0 and branch if NOT-EQUAL"
CR16_di:        "Disable maskable interrupts"
CR16_ei:        "Enable maskable interrupts"
CR16_excp:      "Trap (vector)"
CR16_jeq:       "Conditional Jump (EQ)"
CR16_jne:       "Conditional Jump (NE)"
CR16_jcs:       "Conditional Jump (Carry Set)"
CR16_jcc:       "Conditional Jump (Carry Clear)"
CR16_jhi:       "Conditional Jump (Higher)"
CR16_jls:       "Conditional Jump (Low or Same)"
CR16_jgt:       "Conditional Jump (Greater Than)"
CR16_jle:       "Conditional Jump (Less than or EQ)"
CR16_jfs:       "Conditional Jump (F Set)"
CR16_jfc:       "Conditional Jump (F Clear)"
CR16_jlo:       "Conditional Jump (Lower)"
CR16_jhs:       "Conditional Jump (High or Same)"
CR16_jlt:       "Conditional Jump (Less than)"
CR16_jge:       "Conditional Jump (Greater than or EQ)"
CR16_jump:      "Jump to address"
CR16_jal:       "Jump and link"
CR16_loadb:     "Load byte"
CR16_loadw:     "Load word"
CR16_loadm:     "Load 1 to 4 registers (R2 - R5) from memory, starting at the address in R0, according to imm count value"
CR16_lpr:       "Load processor register"
CR16_lshb:      "Logical left/right shift byte"
CR16_lshw:      "Logical left/right shift word"
CR16_movb:      "Move byte"
CR16_movw:      "Move word"
CR16_movxb:     "Move with sign extension"
CR16_movzb:     "Move with zero extension"
CR16_movd:      "Move 21-bit immediate to register-pair"
CR16_mulb:      "Multiply: Rdest(8):= Rdest(8) * Rsrc(8)/Imm"
CR16_mulw:      "Multiply: Rdest(16):= Rdest(16) * Rsrc(16)/Imm"
CR16_mulsb:     "Multiply signed: Rdest(16):= Rdest(8) * Rsrc(8)"
CR16_mulsw:     "Multiply signed: (Rdest+1,Rdest):= Rdest(16) * Rsrc(16)"
CR16_muluw:     "Multiply unsigned: (Rdest+1,Rdest):= Rdest(16) * Rsrc(16);"
CR16_nop:       "No operation"
CR16_orb:       "Logical OR byte"
CR16_orw:       "Logical OR word"
CR16_push:      "Push number of registers on user stack, starting with Rsrc"
CR16_pop:       "Restore number of registers from user stack, starting with Rsrc"
CR16_popret:    "Restore registers and perform JUMP"
CR16_retx:      "Return from exception"
CR16_seq:       "Save condition code as boolean"
CR16_sne:       "Save condition code as boolean"
CR16_scs:       "Save condition code as boolean"
CR16_scc:       "Save condition code as boolean"
CR16_shi:       "Save condition code as boolean"
CR16_sls:       "Save condition code as boolean"
CR16_sgt:       "Save condition code as boolean"
CR16_sle:       "Save condition code as boolean"
CR16_sfs:       "Save condition code as boolean"
CR16_sfc:       "Save condition code as boolean"
CR16_slo:       "Save condition code as boolean"
CR16_shs:       "Save condition code as boolean"
CR16_slt:       "Save condition code as boolean"
CR16_sge:       "Save condition code as boolean"
CR16_spr:       "Store processor register"
CR16_storb:     "Store byte"
CR16_storw:     "Store word"
CR16_storm:     "Store 1 to 4 registers (R2 - R5) to memory, starting at the address in R1, according to imm count value"
CR16_subb:      "Subtract byte: (Rdest := Rdest - Rsrc)"
CR16_subw:      "Subtract word: (Rdest := Rdest - Rsrc)"
CR16_subcb:     "Subtract byte with carry: (Rdest := Rdest - Rsrc)"
CR16_subcw:     "Subtract word with carry: (Rdest := Rdest - Rsrc)"
CR16_tbit:      "Test bit in register"
CR16_tbitb:     "Test a bit in memory byte"
CR16_tbitw:     "Test a bit in memory word"
CR16_sbitb:     "Set a bit in memory byte"
CR16_sbitw:     "Set a bit in memory word"
CR16_cbitb:     "Clear a bit in memory byte"
CR16_cbitw:     "Clear a bit in memory word"
CR16_wait:      "Wait for interrupt"
CR16_eiwait:    "Enable interrupts and wait for interrupt"
CR16_xorb:      "Logical exclusive OR byte"
CR16_xorw:      "Logical exclusive OR word"

